
MyApp_Nios.elf:     file format elf32-littlenios2
MyApp_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010324 memsz 0x00010324 flags r-x
    LOAD off    0x00011344 vaddr 0x00010344 paddr 0x00011e30 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001391c vaddr 0x0001391c paddr 0x0001391c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fdc0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000354  0000fff0  0000fff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010344  00011e30  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0001391c  0001391c  0001391c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00013a7c  00013a7c  00012e30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012e30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f60  00000000  00000000  00012e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000249c6  00000000  00000000  00013db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009575  00000000  00000000  0003877e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bb82  00000000  00000000  00041cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002208  00000000  00000000  0004d878  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a3c  00000000  00000000  0004fa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a90  00000000  00000000  000534bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006af4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  0006af90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f9f5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006f9f8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006fa04  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006fa05  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006fa06  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006fa11  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006fa1c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006fa27  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000040  00000000  00000000  0006fa31  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     002f83d8  00000000  00000000  0006fa71  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000fff0 l    d  .rodata	00000000 .rodata
00010344 l    d  .rwdata	00000000 .rwdata
0001391c l    d  .bss	00000000 .bss
00013a7c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MyApp_Nios_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 MyApp_Nios.c
0000026c l     F .text	00000058 spi_rx_isr
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001008a l     O .rodata	00000010 zeroes.4404
00002884 l     F .text	000000bc __sbprintf
0001009a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002a94 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000045ec l     F .text	00000008 __fp_unlock
00004600 l     F .text	0000019c __sinit.part.1
0000479c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010344 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010788 l     O .rwdata	00000020 lc_ctype_charset
00010768 l     O .rwdata	00000020 lc_message_charset
000107a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000100cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007c70 l     F .text	000000fc __sprint_r.part.0
000101f0 l     O .rodata	00000010 zeroes.4349
000092ac l     F .text	000000bc __sbprintf
00010200 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d2f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d408 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d7c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d8b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d99c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dde0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011e24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000e084 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e1c0 l     F .text	00000034 alt_dev_reg
00010d90 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e4b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e6c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ecf8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f090 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f2ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000f44c l     F .text	0000003c alt_get_errno
0000f488 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013948 g     O .bss	00000004 alt_instruction_exception_handler
000072b4 g     F .text	00000074 _mprec_log10
000073a0 g     F .text	0000008c __any_on
00009860 g     F .text	00000054 _isatty_r
000100d8 g     O .rodata	00000028 __mprec_tinytens
0000dab4 g     F .text	0000007c alt_main
00000420 g     F .text	000000c0 _puts_r
0001397c g     O .bss	00000100 alt_irq
000098b4 g     F .text	00000060 _lseek_r
00011e30 g       *ABS*	00000000 __flash_rwdata_start
0000bccc g     F .text	00000088 .hidden __eqdf2
00013a7c g       *ABS*	00000000 __alt_heap_start
000003e4 g     F .text	0000003c printf
00009acc g     F .text	0000009c _wcrtomb_r
00007b30 g     F .text	0000005c __sseek
0000494c g     F .text	00000010 __sinit
00009974 g     F .text	00000140 __swbuf_r
00005420 g     F .text	0000007c _setlocale_r
000047a4 g     F .text	00000078 __sfmoreglue
0000db54 g     F .text	00000024 __malloc_unlock
000060f0 g     F .text	0000015c memmove
00004934 g     F .text	00000018 _cleanup
00006374 g     F .text	000000a8 _Balloc
0000bd54 g     F .text	000000dc .hidden __gtdf2
0000f874 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009804 g     F .text	0000005c _fstat_r
00013934 g     O .bss	00000004 errno
00007aac g     F .text	00000008 __seofread
00013940 g     O .bss	00000004 alt_argv
00019df0 g       *ABS*	00000000 _gp
0000e054 g     F .text	00000030 usleep
00010c10 g     O .rwdata	00000180 alt_fd_list
0000f898 g     F .text	00000090 alt_find_dev
00005fa8 g     F .text	00000148 memcpy
000045f4 g     F .text	0000000c _cleanup_r
0000d10c g     F .text	000000dc .hidden __floatsidf
0000f3d0 g     F .text	0000007c alt_io_redirect
0000be30 g     F .text	000000f4 .hidden __ltdf2
0000fff0 g       *ABS*	00000000 __DTOR_END__
000004e0 g     F .text	00000014 puts
0000f250 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007990 g     F .text	00000074 __fpclassifyd
00007210 g     F .text	000000a4 __ratio
00009290 g     F .text	0000001c __vfiprintf_internal
0000e8b8 g     F .text	0000021c altera_avalon_jtag_uart_read
000003b4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000a96c g     F .text	00000064 .hidden __udivsi3
0000d804 g     F .text	000000ac isatty
00010128 g     O .rodata	000000c8 __mprec_tens
0000549c g     F .text	0000000c __locale_charset
00013930 g     O .bss	00000004 __malloc_top_pad
00011df8 g     O .rwdata	00000004 __mb_cur_max
000054cc g     F .text	0000000c _localeconv_r
000067a8 g     F .text	0000003c __i2b
00004dd0 g     F .text	000004c8 __sfvwrite_r
00007a04 g     F .text	00000054 _sbrk_r
00009914 g     F .text	00000060 _read_r
00011e18 g     O .rwdata	00000004 alt_max_fd
000094f8 g     F .text	000000f0 _fclose_r
000045bc g     F .text	00000030 fflush
0001392c g     O .bss	00000004 __malloc_max_sbrked_mem
0000aa50 g     F .text	000008ac .hidden __adddf3
00006fb8 g     F .text	0000010c __b2d
0000a2b0 g     F .text	000005c4 .hidden __umoddi3
0000d9d8 g     F .text	000000dc lseek
00011df0 g     O .rwdata	00000004 _global_impure_ptr
0000742c g     F .text	00000564 _realloc_r
00013a7c g       *ABS*	00000000 __bss_end
0000d6d8 g     F .text	000000f0 alt_iic_isr_register
0000f76c g     F .text	00000108 alt_tick
00009cb4 g     F .text	000005fc .hidden __udivdi3
00009760 g     F .text	00000024 _fputwc_r
00010100 g     O .rodata	00000028 __mprec_bigtens
0000658c g     F .text	00000104 __s2b
0000d1e8 g     F .text	000000a8 .hidden __floatunsidf
00006cf8 g     F .text	00000060 __mcmp
0000496c g     F .text	00000018 __fp_lock_all
0000d68c g     F .text	0000004c alt_ic_irq_enabled
0000f6d0 g     F .text	0000009c alt_alarm_stop
00013938 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010be8 g     O .rwdata	00000028 alt_dev_null
0000f070 g     F .text	00000020 alt_dcache_flush_all
00006690 g     F .text	00000068 __hi0bits
0000d08c g     F .text	00000080 .hidden __fixdfsi
00011e30 g       *ABS*	00000000 __ram_rwdata_end
00011e10 g     O .rwdata	00000008 alt_dev_list
0000e0c0 g     F .text	00000100 write
0000fbbc g     F .text	000000a0 _putc_r
00010344 g       *ABS*	00000000 __ram_rodata_end
0000d470 g     F .text	000000b8 fstat
0000be30 g     F .text	000000f4 .hidden __ledf2
00006a70 g     F .text	00000140 __pow5mult
00007d84 g     F .text	0000150c ___vfiprintf_internal_r
00013924 g     O .bss	00000004 __nlocale_changed
0000a9d0 g     F .text	00000058 .hidden __umodsi3
00013a7c g       *ABS*	00000000 end
0000e3f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000fff0 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000ed70 g     F .text	0000007c alt_avalon_timer_sc_init
0000d290 g     F .text	00000064 .hidden __clzsi2
0000ead4 g     F .text	00000224 altera_avalon_jtag_uart_write
0000495c g     F .text	00000004 __sfp_lock_acquire
00005ec4 g     F .text	000000e4 memchr
0000058c g     F .text	000022dc ___vfprintf_internal_r
00004ac0 g     F .text	00000310 _free_r
0000db78 g     F .text	0000022c alt_printf
000054a8 g     F .text	00000010 __locale_mb_cur_max
0000fe3c g     F .text	00000180 __call_exitprocs
00013920 g     O .bss	00000004 __mlocale_changed
00011dfc g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0001394c g     O .bss	00000004 _alt_tick_rate
00006bb0 g     F .text	00000148 __lshift
00013950 g     O .bss	00000004 _alt_nticks
0000de1c g     F .text	00000104 read
0000e22c g     F .text	00000064 alt_sys_init
0000fd24 g     F .text	00000118 __register_exitproc
000067e4 g     F .text	0000028c __multiply
0000e760 g     F .text	00000068 altera_avalon_jtag_uart_close
0000aa28 g     F .text	00000028 .hidden __mulsi3
00010344 g       *ABS*	00000000 __ram_rwdata_start
0000fff0 g       *ABS*	00000000 __ram_rodata_start
00013954 g     O .bss	00000028 __malloc_current_mallinfo
000070c4 g     F .text	0000014c __d2b
0000e290 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fa30 g     F .text	000000c4 alt_get_fd
0000ef18 g     F .text	00000158 alt_busy_sleep
000093c8 g     F .text	00000054 _close_r
0000fb40 g     F .text	0000007c memcmp
0000e350 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013a7c g       *ABS*	00000000 __alt_stack_base
0000e3a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002940 g     F .text	00000154 __swsetup_r
0000b2fc g     F .text	000009d0 .hidden __divdf3
0000481c g     F .text	00000118 __sfp
00007328 g     F .text	00000078 __copybits
000107e0 g     O .rwdata	00000408 __malloc_av_
00004968 g     F .text	00000004 __sinit_lock_release
0000bf24 g     F .text	0000086c .hidden __muldf3
00007a58 g     F .text	00000054 __sread
0000f928 g     F .text	00000108 alt_find_file
0000f0cc g     F .text	000000a4 alt_dev_llist_insert
0000db30 g     F .text	00000024 __malloc_lock
0000dfa4 g     F .text	000000b0 sbrk
00004560 g     F .text	0000005c _fflush_r
0000941c g     F .text	000000dc _calloc_r
0001391c g       *ABS*	00000000 __bss_start
0000624c g     F .text	00000128 memset
000002c4 g     F .text	000000f0 main
00013944 g     O .bss	00000004 alt_envp
00013928 g     O .bss	00000004 __malloc_max_total_mem
0000e2f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009ab4 g     F .text	00000018 __swbuf
00007b8c g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
000095e8 g     F .text	00000014 fclose
00002cbc g     F .text	00001688 _dtoa_r
000056b8 g     F .text	0000080c _malloc_r
00009c28 g     F .text	00000030 __ascii_wctomb
00011e1c g     O .rwdata	00000004 alt_errno
00005298 g     F .text	000000c4 _fwalk
0000fc5c g     F .text	000000c8 putc
0000a874 g     F .text	00000084 .hidden __divsi3
0000499c g     F .text	00000124 _malloc_trim_r
0000fff0 g       *ABS*	00000000 __CTOR_END__
00007b94 g     F .text	000000dc strcmp
0000fff0 g       *ABS*	00000000 __flash_rodata_start
0000fff0 g       *ABS*	00000000 __DTOR_LIST__
0000bccc g     F .text	00000088 .hidden __nedf2
0000e1f4 g     F .text	00000038 alt_irq_init
0000df20 g     F .text	00000084 alt_release_fd
00010210 g     O .rodata	00000100 .hidden __clz_tab
0001391c g     O .bss	00000004 _PathLocale
0000faf4 g     F .text	00000014 atexit
00009368 g     F .text	00000060 _write_r
000054d8 g     F .text	00000018 setlocale
00011df4 g     O .rwdata	00000004 _impure_ptr
0001393c g     O .bss	00000004 alt_argc
00004344 g     F .text	0000021c __sflush_r
0000f1d0 g     F .text	00000060 _do_dtors
000054c4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006f54 g     F .text	00000064 __ulp
00004984 g     F .text	00000018 __fp_unlock_all
00011e08 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000054f0 g     F .text	0000000c localeconv
0000d528 g     F .text	00000050 alt_ic_isr_register
00011e30 g       *ABS*	00000000 _edata
00013a7c g       *ABS*	00000000 _end
000095fc g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000e7c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000d600 g     F .text	0000008c alt_ic_irq_disable
00007ab4 g     F .text	0000007c __swrite
00011e00 g     O .rwdata	00000004 __malloc_trim_threshold
000054b8 g     F .text	0000000c __locale_msgcharset
0000fb08 g     F .text	00000038 exit
0000535c g     F .text	000000c4 _fwalk_reent
00006d58 g     F .text	000001fc __mdiff
0000a8f8 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004960 g     F .text	00000004 __sfp_lock_release
0000ffbc g     F .text	00000034 _exit
0000edec g     F .text	0000012c alt_alarm_start
000054fc g     F .text	000001bc __smakebuf_r
000004f4 g     F .text	00000098 strlen
0000f574 g     F .text	0000015c open
0000bd54 g     F .text	000000dc .hidden __gedf2
0000dda4 g     F .text	0000003c alt_putchar
00011e04 g     O .rwdata	00000004 __wctomb
00007d6c g     F .text	00000018 __sprint_r
0000f230 g     F .text	00000020 alt_icache_flush_all
00011e20 g     O .rwdata	00000004 alt_priority_mask
0000d578 g     F .text	00000088 alt_ic_irq_enable
00002868 g     F .text	0000001c __vfprintf_internal
00009c58 g     F .text	0000005c _wctomb_r
0000c790 g     F .text	000008fc .hidden __subdf3
000066f8 g     F .text	000000b0 __lo0bits
00011e28 g     O .rwdata	00000008 alt_alarm_list
0000f170 g     F .text	00000060 _do_ctors
00009b68 g     F .text	000000c0 wcrtomb
0000d330 g     F .text	000000d8 close
0000d918 g     F .text	00000084 alt_load
00009784 g     F .text	00000080 fputwc
00004964 g     F .text	00000004 __sinit_lock_acquire
00006444 g     F .text	00000148 __multadd
0000641c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108e5f04 	addi	r2,r2,14716
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108e5f04 	addi	r2,r2,14716
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d617 	ldw	r2,-25768(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d617 	ldw	r2,-25768(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a77c14 	ori	gp,gp,40432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108e4714 	ori	r2,r2,14620

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18ce9f14 	ori	r3,r3,14972

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000d9180 	call	d918 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000dab40 	call	dab4 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <alt_after_alt_main>

0000026c <spi_rx_isr>:
typedef int bool;

#define TRUE    1
#define FALSE   0

static void spi_rx_isr(void* isr_context){
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	e13fff15 	stw	r4,-4(fp)

        alt_printf("ISR :) %x \n" ,  IORD_ALTERA_AVALON_SPI_RXDATA(SPI_NIOS_BASE));
     280:	008000b4 	movhi	r2,2
     284:	10802004 	addi	r2,r2,128
     288:	10800037 	ldwio	r2,0(r2)
     28c:	100b883a 	mov	r5,r2
     290:	01000074 	movhi	r4,1
     294:	213ffc04 	addi	r4,r4,-16
     298:	000db780 	call	db78 <alt_printf>

        //This resets the IRQ flag. Otherwise the IRQ will continuously run.
        IOWR_ALTERA_AVALON_SPI_STATUS(SPI_NIOS_BASE, 0x0);
     29c:	0007883a 	mov	r3,zero
     2a0:	008000b4 	movhi	r2,2
     2a4:	10802204 	addi	r2,r2,136
     2a8:	10c00035 	stwio	r3,0(r2)
}
     2ac:	0001883a 	nop
     2b0:	e037883a 	mov	sp,fp
     2b4:	dfc00117 	ldw	ra,4(sp)
     2b8:	df000017 	ldw	fp,0(sp)
     2bc:	dec00204 	addi	sp,sp,8
     2c0:	f800283a 	ret

000002c4 <main>:


int main()
{
     2c4:	defff604 	addi	sp,sp,-40
     2c8:	dfc00915 	stw	ra,36(sp)
     2cc:	df000815 	stw	fp,32(sp)
     2d0:	df000804 	addi	fp,sp,32
    unsigned int value = 0;
     2d4:	e03ff915 	stw	zero,-28(fp)
    alt_u8 val;
    char spi_command_string_tx[10] = "$HELLOABC*";
     2d8:	00931174 	movhi	r2,19525
     2dc:	10920904 	addi	r2,r2,18468
     2e0:	e0bffb15 	stw	r2,-20(fp)
     2e4:	00909074 	movhi	r2,16961
     2e8:	1093d304 	addi	r2,r2,20300
     2ec:	e0bffc15 	stw	r2,-16(fp)
     2f0:	008a90c4 	movi	r2,10819
     2f4:	e0bffd0d 	sth	r2,-12(fp)

      char spi_command_string_rx[10] = "$HELLOABC*";
     2f8:	00920904 	movi	r2,18468
     2fc:	e0bffd8d 	sth	r2,-10(fp)
     300:	00931144 	movi	r2,19525
     304:	e0bffe0d 	sth	r2,-8(fp)
     308:	0093d304 	movi	r2,20300
     30c:	e0bffe8d 	sth	r2,-6(fp)
     310:	00909044 	movi	r2,16961
     314:	e0bfff0d 	sth	r2,-4(fp)
     318:	008a90c4 	movi	r2,10819
     31c:	e0bfff8d 	sth	r2,-2(fp)

    
    printf("Hello from MyApp_Nios ! \r\n");
     320:	01000074 	movhi	r4,1
     324:	213fff04 	addi	r4,r4,-4
     328:	00004e00 	call	4e0 <puts>
    printf("SPI irq: %x\r\n",SPI_NIOS_IRQ);
     32c:	01400084 	movi	r5,2
     330:	01000074 	movhi	r4,1
     334:	21000604 	addi	r4,r4,24
     338:	00003e40 	call	3e4 <printf>
  int ret = alt_ic_isr_register(SPI_NIOS_IRQ_INTERRUPT_CONTROLLER_ID,SPI_NIOS_IRQ,spi_rx_isr,(void *)spi_command_string_tx,0x0);
     33c:	e0bffb04 	addi	r2,fp,-20
     340:	d8000015 	stw	zero,0(sp)
     344:	100f883a 	mov	r7,r2
     348:	01800034 	movhi	r6,0
     34c:	31809b04 	addi	r6,r6,620
     350:	01400084 	movi	r5,2
     354:	0009883a 	mov	r4,zero
     358:	000d5280 	call	d528 <alt_ic_isr_register>
     35c:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_NIOS_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK | ALTERA_AVALON_SPI_CONTROL_IRRDY_MSK);
     360:	00c12004 	movi	r3,1152
     364:	008000b4 	movhi	r2,2
     368:	10802304 	addi	r2,r2,140
     36c:	10c00035 	stwio	r3,0(r2)
  alt_printf("IRQ register return %x \n", ret);
     370:	e17ffa17 	ldw	r5,-24(fp)
     374:	01000074 	movhi	r4,1
     378:	21000a04 	addi	r4,r4,40
     37c:	000db780 	call	db78 <alt_printf>

    //Just calling the ISR to see if the function is OK.
    spi_rx_isr(NULL);
     380:	0009883a 	mov	r4,zero
     384:	000026c0 	call	26c <spi_rx_isr>

    while(1) {
      IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_NIOS_BASE, value++);
     388:	e0bff917 	ldw	r2,-28(fp)
     38c:	10c00044 	addi	r3,r2,1
     390:	e0fff915 	stw	r3,-28(fp)
     394:	1007883a 	mov	r3,r2
     398:	008000b4 	movhi	r2,2
     39c:	10801804 	addi	r2,r2,96
     3a0:	10c00035 	stwio	r3,0(r2)

    //You need to enable the IRQ in the IP core control register as well


      usleep(100000);
     3a4:	010000b4 	movhi	r4,2
     3a8:	2121a804 	addi	r4,r4,-31072
     3ac:	000e0540 	call	e054 <usleep>
    }
     3b0:	003ff506 	br	388 <main+0xc4>

000003b4 <_printf_r>:
     3b4:	defffd04 	addi	sp,sp,-12
     3b8:	2805883a 	mov	r2,r5
     3bc:	dfc00015 	stw	ra,0(sp)
     3c0:	d9800115 	stw	r6,4(sp)
     3c4:	d9c00215 	stw	r7,8(sp)
     3c8:	21400217 	ldw	r5,8(r4)
     3cc:	d9c00104 	addi	r7,sp,4
     3d0:	100d883a 	mov	r6,r2
     3d4:	000058c0 	call	58c <___vfprintf_internal_r>
     3d8:	dfc00017 	ldw	ra,0(sp)
     3dc:	dec00304 	addi	sp,sp,12
     3e0:	f800283a 	ret

000003e4 <printf>:
     3e4:	defffc04 	addi	sp,sp,-16
     3e8:	dfc00015 	stw	ra,0(sp)
     3ec:	d9400115 	stw	r5,4(sp)
     3f0:	d9800215 	stw	r6,8(sp)
     3f4:	d9c00315 	stw	r7,12(sp)
     3f8:	00800074 	movhi	r2,1
     3fc:	10877d04 	addi	r2,r2,7668
     400:	10800017 	ldw	r2,0(r2)
     404:	200b883a 	mov	r5,r4
     408:	d9800104 	addi	r6,sp,4
     40c:	11000217 	ldw	r4,8(r2)
     410:	00028680 	call	2868 <__vfprintf_internal>
     414:	dfc00017 	ldw	ra,0(sp)
     418:	dec00404 	addi	sp,sp,16
     41c:	f800283a 	ret

00000420 <_puts_r>:
     420:	defff604 	addi	sp,sp,-40
     424:	dc000715 	stw	r16,28(sp)
     428:	2021883a 	mov	r16,r4
     42c:	2809883a 	mov	r4,r5
     430:	dc400815 	stw	r17,32(sp)
     434:	dfc00915 	stw	ra,36(sp)
     438:	2823883a 	mov	r17,r5
     43c:	00004f40 	call	4f4 <strlen>
     440:	10c00044 	addi	r3,r2,1
     444:	d8800115 	stw	r2,4(sp)
     448:	00800074 	movhi	r2,1
     44c:	10801104 	addi	r2,r2,68
     450:	d8800215 	stw	r2,8(sp)
     454:	00800044 	movi	r2,1
     458:	d8800315 	stw	r2,12(sp)
     45c:	00800084 	movi	r2,2
     460:	dc400015 	stw	r17,0(sp)
     464:	d8c00615 	stw	r3,24(sp)
     468:	dec00415 	stw	sp,16(sp)
     46c:	d8800515 	stw	r2,20(sp)
     470:	80000226 	beq	r16,zero,47c <_puts_r+0x5c>
     474:	80800e17 	ldw	r2,56(r16)
     478:	10001426 	beq	r2,zero,4cc <_puts_r+0xac>
     47c:	81400217 	ldw	r5,8(r16)
     480:	2880030b 	ldhu	r2,12(r5)
     484:	10c8000c 	andi	r3,r2,8192
     488:	1800061e 	bne	r3,zero,4a4 <_puts_r+0x84>
     48c:	29001917 	ldw	r4,100(r5)
     490:	00f7ffc4 	movi	r3,-8193
     494:	10880014 	ori	r2,r2,8192
     498:	20c6703a 	and	r3,r4,r3
     49c:	2880030d 	sth	r2,12(r5)
     4a0:	28c01915 	stw	r3,100(r5)
     4a4:	d9800404 	addi	r6,sp,16
     4a8:	8009883a 	mov	r4,r16
     4ac:	0004dd00 	call	4dd0 <__sfvwrite_r>
     4b0:	1000091e 	bne	r2,zero,4d8 <_puts_r+0xb8>
     4b4:	00800284 	movi	r2,10
     4b8:	dfc00917 	ldw	ra,36(sp)
     4bc:	dc400817 	ldw	r17,32(sp)
     4c0:	dc000717 	ldw	r16,28(sp)
     4c4:	dec00a04 	addi	sp,sp,40
     4c8:	f800283a 	ret
     4cc:	8009883a 	mov	r4,r16
     4d0:	000494c0 	call	494c <__sinit>
     4d4:	003fe906 	br	47c <_puts_r+0x5c>
     4d8:	00bfffc4 	movi	r2,-1
     4dc:	003ff606 	br	4b8 <_puts_r+0x98>

000004e0 <puts>:
     4e0:	00800074 	movhi	r2,1
     4e4:	10877d04 	addi	r2,r2,7668
     4e8:	200b883a 	mov	r5,r4
     4ec:	11000017 	ldw	r4,0(r2)
     4f0:	00004201 	jmpi	420 <_puts_r>

000004f4 <strlen>:
     4f4:	208000cc 	andi	r2,r4,3
     4f8:	10002026 	beq	r2,zero,57c <strlen+0x88>
     4fc:	20800007 	ldb	r2,0(r4)
     500:	10002026 	beq	r2,zero,584 <strlen+0x90>
     504:	2005883a 	mov	r2,r4
     508:	00000206 	br	514 <strlen+0x20>
     50c:	10c00007 	ldb	r3,0(r2)
     510:	18001826 	beq	r3,zero,574 <strlen+0x80>
     514:	10800044 	addi	r2,r2,1
     518:	10c000cc 	andi	r3,r2,3
     51c:	183ffb1e 	bne	r3,zero,50c <strlen+0x18>
     520:	10c00017 	ldw	r3,0(r2)
     524:	01ffbff4 	movhi	r7,65279
     528:	39ffbfc4 	addi	r7,r7,-257
     52c:	00ca303a 	nor	r5,zero,r3
     530:	01a02074 	movhi	r6,32897
     534:	19c7883a 	add	r3,r3,r7
     538:	31a02004 	addi	r6,r6,-32640
     53c:	1946703a 	and	r3,r3,r5
     540:	1986703a 	and	r3,r3,r6
     544:	1800091e 	bne	r3,zero,56c <strlen+0x78>
     548:	10800104 	addi	r2,r2,4
     54c:	10c00017 	ldw	r3,0(r2)
     550:	19cb883a 	add	r5,r3,r7
     554:	00c6303a 	nor	r3,zero,r3
     558:	28c6703a 	and	r3,r5,r3
     55c:	1986703a 	and	r3,r3,r6
     560:	183ff926 	beq	r3,zero,548 <strlen+0x54>
     564:	00000106 	br	56c <strlen+0x78>
     568:	10800044 	addi	r2,r2,1
     56c:	10c00007 	ldb	r3,0(r2)
     570:	183ffd1e 	bne	r3,zero,568 <strlen+0x74>
     574:	1105c83a 	sub	r2,r2,r4
     578:	f800283a 	ret
     57c:	2005883a 	mov	r2,r4
     580:	003fe706 	br	520 <strlen+0x2c>
     584:	0005883a 	mov	r2,zero
     588:	f800283a 	ret

0000058c <___vfprintf_internal_r>:
     58c:	deffb804 	addi	sp,sp,-288
     590:	dfc04715 	stw	ra,284(sp)
     594:	ddc04515 	stw	r23,276(sp)
     598:	dd404315 	stw	r21,268(sp)
     59c:	d9002d15 	stw	r4,180(sp)
     5a0:	282f883a 	mov	r23,r5
     5a4:	302b883a 	mov	r21,r6
     5a8:	d9c02e15 	stw	r7,184(sp)
     5ac:	df004615 	stw	fp,280(sp)
     5b0:	dd804415 	stw	r22,272(sp)
     5b4:	dd004215 	stw	r20,264(sp)
     5b8:	dcc04115 	stw	r19,260(sp)
     5bc:	dc804015 	stw	r18,256(sp)
     5c0:	dc403f15 	stw	r17,252(sp)
     5c4:	dc003e15 	stw	r16,248(sp)
     5c8:	00054cc0 	call	54cc <_localeconv_r>
     5cc:	10800017 	ldw	r2,0(r2)
     5d0:	1009883a 	mov	r4,r2
     5d4:	d8803415 	stw	r2,208(sp)
     5d8:	00004f40 	call	4f4 <strlen>
     5dc:	d8803715 	stw	r2,220(sp)
     5e0:	d8802d17 	ldw	r2,180(sp)
     5e4:	10000226 	beq	r2,zero,5f0 <___vfprintf_internal_r+0x64>
     5e8:	10800e17 	ldw	r2,56(r2)
     5ec:	1000fb26 	beq	r2,zero,9dc <___vfprintf_internal_r+0x450>
     5f0:	b880030b 	ldhu	r2,12(r23)
     5f4:	10c8000c 	andi	r3,r2,8192
     5f8:	1800061e 	bne	r3,zero,614 <___vfprintf_internal_r+0x88>
     5fc:	b9001917 	ldw	r4,100(r23)
     600:	00f7ffc4 	movi	r3,-8193
     604:	10880014 	ori	r2,r2,8192
     608:	20c6703a 	and	r3,r4,r3
     60c:	b880030d 	sth	r2,12(r23)
     610:	b8c01915 	stw	r3,100(r23)
     614:	10c0020c 	andi	r3,r2,8
     618:	1800c326 	beq	r3,zero,928 <___vfprintf_internal_r+0x39c>
     61c:	b8c00417 	ldw	r3,16(r23)
     620:	1800c126 	beq	r3,zero,928 <___vfprintf_internal_r+0x39c>
     624:	1080068c 	andi	r2,r2,26
     628:	00c00284 	movi	r3,10
     62c:	10c0c626 	beq	r2,r3,948 <___vfprintf_internal_r+0x3bc>
     630:	d8c00404 	addi	r3,sp,16
     634:	05000074 	movhi	r20,1
     638:	d9001e04 	addi	r4,sp,120
     63c:	a5002284 	addi	r20,r20,138
     640:	d8c01e15 	stw	r3,120(sp)
     644:	d8002015 	stw	zero,128(sp)
     648:	d8001f15 	stw	zero,124(sp)
     64c:	d8003315 	stw	zero,204(sp)
     650:	d8003615 	stw	zero,216(sp)
     654:	d8003815 	stw	zero,224(sp)
     658:	1811883a 	mov	r8,r3
     65c:	d8003915 	stw	zero,228(sp)
     660:	d8003a15 	stw	zero,232(sp)
     664:	d8002f15 	stw	zero,188(sp)
     668:	d9002815 	stw	r4,160(sp)
     66c:	a8800007 	ldb	r2,0(r21)
     670:	10028b26 	beq	r2,zero,10a0 <___vfprintf_internal_r+0xb14>
     674:	00c00944 	movi	r3,37
     678:	a823883a 	mov	r17,r21
     67c:	10c0021e 	bne	r2,r3,688 <___vfprintf_internal_r+0xfc>
     680:	00001406 	br	6d4 <___vfprintf_internal_r+0x148>
     684:	10c00326 	beq	r2,r3,694 <___vfprintf_internal_r+0x108>
     688:	8c400044 	addi	r17,r17,1
     68c:	88800007 	ldb	r2,0(r17)
     690:	103ffc1e 	bne	r2,zero,684 <___vfprintf_internal_r+0xf8>
     694:	8d61c83a 	sub	r16,r17,r21
     698:	80000e26 	beq	r16,zero,6d4 <___vfprintf_internal_r+0x148>
     69c:	d8c02017 	ldw	r3,128(sp)
     6a0:	d8801f17 	ldw	r2,124(sp)
     6a4:	45400015 	stw	r21,0(r8)
     6a8:	1c07883a 	add	r3,r3,r16
     6ac:	10800044 	addi	r2,r2,1
     6b0:	d8c02015 	stw	r3,128(sp)
     6b4:	44000115 	stw	r16,4(r8)
     6b8:	d8801f15 	stw	r2,124(sp)
     6bc:	00c001c4 	movi	r3,7
     6c0:	1880a916 	blt	r3,r2,968 <___vfprintf_internal_r+0x3dc>
     6c4:	42000204 	addi	r8,r8,8
     6c8:	d9402f17 	ldw	r5,188(sp)
     6cc:	2c0b883a 	add	r5,r5,r16
     6d0:	d9402f15 	stw	r5,188(sp)
     6d4:	88800007 	ldb	r2,0(r17)
     6d8:	1000aa26 	beq	r2,zero,984 <___vfprintf_internal_r+0x3f8>
     6dc:	8d400044 	addi	r21,r17,1
     6e0:	8c400047 	ldb	r17,1(r17)
     6e4:	0021883a 	mov	r16,zero
     6e8:	00bfffc4 	movi	r2,-1
     6ec:	0025883a 	mov	r18,zero
     6f0:	dc002905 	stb	r16,164(sp)
     6f4:	d8002785 	stb	zero,158(sp)
     6f8:	d8002b05 	stb	zero,172(sp)
     6fc:	d8802a15 	stw	r2,168(sp)
     700:	d8003115 	stw	zero,196(sp)
     704:	04c01604 	movi	r19,88
     708:	05800244 	movi	r22,9
     70c:	9021883a 	mov	r16,r18
     710:	4039883a 	mov	fp,r8
     714:	ad400044 	addi	r21,r21,1
     718:	88bff804 	addi	r2,r17,-32
     71c:	98833236 	bltu	r19,r2,13e8 <___vfprintf_internal_r+0xe5c>
     720:	100490ba 	slli	r2,r2,2
     724:	00c00034 	movhi	r3,0
     728:	18c1ce04 	addi	r3,r3,1848
     72c:	10c5883a 	add	r2,r2,r3
     730:	10800017 	ldw	r2,0(r2)
     734:	1000683a 	jmp	r2
     738:	000012e0 	cmpeqi	zero,zero,75
     73c:	000013e8 	cmpgeui	zero,zero,79
     740:	000013e8 	cmpgeui	zero,zero,79
     744:	00001300 	call	130 <alt_irq_handler+0x34>
     748:	000013e8 	cmpgeui	zero,zero,79
     74c:	000013e8 	cmpgeui	zero,zero,79
     750:	000013e8 	cmpgeui	zero,zero,79
     754:	000013e8 	cmpgeui	zero,zero,79
     758:	000013e8 	cmpgeui	zero,zero,79
     75c:	000013e8 	cmpgeui	zero,zero,79
     760:	000009e8 	cmpgeui	zero,zero,39
     764:	000011f0 	cmpltui	zero,zero,71
     768:	000013e8 	cmpgeui	zero,zero,79
     76c:	000008ac 	andhi	zero,zero,34
     770:	00000a0c 	andi	zero,zero,40
     774:	000013e8 	cmpgeui	zero,zero,79
     778:	00000a5c 	xori	zero,zero,41
     77c:	00000a68 	cmpgeui	zero,zero,41
     780:	00000a68 	cmpgeui	zero,zero,41
     784:	00000a68 	cmpgeui	zero,zero,41
     788:	00000a68 	cmpgeui	zero,zero,41
     78c:	00000a68 	cmpgeui	zero,zero,41
     790:	00000a68 	cmpgeui	zero,zero,41
     794:	00000a68 	cmpgeui	zero,zero,41
     798:	00000a68 	cmpgeui	zero,zero,41
     79c:	00000a68 	cmpgeui	zero,zero,41
     7a0:	000013e8 	cmpgeui	zero,zero,79
     7a4:	000013e8 	cmpgeui	zero,zero,79
     7a8:	000013e8 	cmpgeui	zero,zero,79
     7ac:	000013e8 	cmpgeui	zero,zero,79
     7b0:	000013e8 	cmpgeui	zero,zero,79
     7b4:	000013e8 	cmpgeui	zero,zero,79
     7b8:	000013e8 	cmpgeui	zero,zero,79
     7bc:	000013e8 	cmpgeui	zero,zero,79
     7c0:	000013e8 	cmpgeui	zero,zero,79
     7c4:	000013e8 	cmpgeui	zero,zero,79
     7c8:	00000aa4 	muli	zero,zero,42
     7cc:	00000b6c 	andhi	zero,zero,45
     7d0:	000013e8 	cmpgeui	zero,zero,79
     7d4:	00000b6c 	andhi	zero,zero,45
     7d8:	000013e8 	cmpgeui	zero,zero,79
     7dc:	000013e8 	cmpgeui	zero,zero,79
     7e0:	000013e8 	cmpgeui	zero,zero,79
     7e4:	000013e8 	cmpgeui	zero,zero,79
     7e8:	00000c18 	cmpnei	zero,zero,48
     7ec:	000013e8 	cmpgeui	zero,zero,79
     7f0:	000013e8 	cmpgeui	zero,zero,79
     7f4:	00000c24 	muli	zero,zero,48
     7f8:	000013e8 	cmpgeui	zero,zero,79
     7fc:	000013e8 	cmpgeui	zero,zero,79
     800:	000013e8 	cmpgeui	zero,zero,79
     804:	000013e8 	cmpgeui	zero,zero,79
     808:	000013e8 	cmpgeui	zero,zero,79
     80c:	000010a8 	cmpgeui	zero,zero,66
     810:	000013e8 	cmpgeui	zero,zero,79
     814:	000013e8 	cmpgeui	zero,zero,79
     818:	00001114 	movui	zero,68
     81c:	000013e8 	cmpgeui	zero,zero,79
     820:	000013e8 	cmpgeui	zero,zero,79
     824:	000013e8 	cmpgeui	zero,zero,79
     828:	000013e8 	cmpgeui	zero,zero,79
     82c:	000013e8 	cmpgeui	zero,zero,79
     830:	000013e8 	cmpgeui	zero,zero,79
     834:	000013e8 	cmpgeui	zero,zero,79
     838:	000013e8 	cmpgeui	zero,zero,79
     83c:	000013e8 	cmpgeui	zero,zero,79
     840:	000013e8 	cmpgeui	zero,zero,79
     844:	0000138c 	andi	zero,zero,78
     848:	0000130c 	andi	zero,zero,76
     84c:	00000b6c 	andhi	zero,zero,45
     850:	00000b6c 	andhi	zero,zero,45
     854:	00000b6c 	andhi	zero,zero,45
     858:	0000132c 	andhi	zero,zero,76
     85c:	0000130c 	andi	zero,zero,76
     860:	000013e8 	cmpgeui	zero,zero,79
     864:	000013e8 	cmpgeui	zero,zero,79
     868:	00001338 	rdprs	zero,zero,76
     86c:	000013e8 	cmpgeui	zero,zero,79
     870:	0000134c 	andi	zero,zero,77
     874:	000011d0 	cmplti	zero,zero,71
     878:	000008b8 	rdprs	zero,zero,34
     87c:	00001208 	cmpgei	zero,zero,72
     880:	000013e8 	cmpgeui	zero,zero,79
     884:	00001214 	movui	zero,72
     888:	000013e8 	cmpgeui	zero,zero,79
     88c:	00001278 	rdprs	zero,zero,73
     890:	000013e8 	cmpgeui	zero,zero,79
     894:	000013e8 	cmpgeui	zero,zero,79
     898:	00001298 	cmpnei	zero,zero,74
     89c:	d8c03117 	ldw	r3,196(sp)
     8a0:	d8802e15 	stw	r2,184(sp)
     8a4:	00c7c83a 	sub	r3,zero,r3
     8a8:	d8c03115 	stw	r3,196(sp)
     8ac:	84000114 	ori	r16,r16,4
     8b0:	ac400007 	ldb	r17,0(r21)
     8b4:	003f9706 	br	714 <___vfprintf_internal_r+0x188>
     8b8:	00800c04 	movi	r2,48
     8bc:	d8802705 	stb	r2,156(sp)
     8c0:	00801e04 	movi	r2,120
     8c4:	d8802745 	stb	r2,157(sp)
     8c8:	d9002a17 	ldw	r4,168(sp)
     8cc:	d8802e17 	ldw	r2,184(sp)
     8d0:	d8002785 	stb	zero,158(sp)
     8d4:	e011883a 	mov	r8,fp
     8d8:	10c00104 	addi	r3,r2,4
     8dc:	14c00017 	ldw	r19,0(r2)
     8e0:	002d883a 	mov	r22,zero
     8e4:	80800094 	ori	r2,r16,2
     8e8:	2002ca16 	blt	r4,zero,1414 <___vfprintf_internal_r+0xe88>
     8ec:	00bfdfc4 	movi	r2,-129
     8f0:	80a4703a 	and	r18,r16,r2
     8f4:	d8c02e15 	stw	r3,184(sp)
     8f8:	94800094 	ori	r18,r18,2
     8fc:	9802b41e 	bne	r19,zero,13d0 <___vfprintf_internal_r+0xe44>
     900:	01400074 	movhi	r5,1
     904:	29401b04 	addi	r5,r5,108
     908:	d9403915 	stw	r5,228(sp)
     90c:	04401e04 	movi	r17,120
     910:	d8802a17 	ldw	r2,168(sp)
     914:	0039883a 	mov	fp,zero
     918:	1001fa26 	beq	r2,zero,1104 <___vfprintf_internal_r+0xb78>
     91c:	0027883a 	mov	r19,zero
     920:	002d883a 	mov	r22,zero
     924:	00021906 	br	118c <___vfprintf_internal_r+0xc00>
     928:	d9002d17 	ldw	r4,180(sp)
     92c:	b80b883a 	mov	r5,r23
     930:	00029400 	call	2940 <__swsetup_r>
     934:	1005dc1e 	bne	r2,zero,20a8 <___vfprintf_internal_r+0x1b1c>
     938:	b880030b 	ldhu	r2,12(r23)
     93c:	00c00284 	movi	r3,10
     940:	1080068c 	andi	r2,r2,26
     944:	10ff3a1e 	bne	r2,r3,630 <___vfprintf_internal_r+0xa4>
     948:	b880038f 	ldh	r2,14(r23)
     94c:	103f3816 	blt	r2,zero,630 <___vfprintf_internal_r+0xa4>
     950:	d9c02e17 	ldw	r7,184(sp)
     954:	d9002d17 	ldw	r4,180(sp)
     958:	a80d883a 	mov	r6,r21
     95c:	b80b883a 	mov	r5,r23
     960:	00028840 	call	2884 <__sbprintf>
     964:	00001106 	br	9ac <___vfprintf_internal_r+0x420>
     968:	d9002d17 	ldw	r4,180(sp)
     96c:	d9801e04 	addi	r6,sp,120
     970:	b80b883a 	mov	r5,r23
     974:	0007d6c0 	call	7d6c <__sprint_r>
     978:	1000081e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
     97c:	da000404 	addi	r8,sp,16
     980:	003f5106 	br	6c8 <___vfprintf_internal_r+0x13c>
     984:	d8802017 	ldw	r2,128(sp)
     988:	10000426 	beq	r2,zero,99c <___vfprintf_internal_r+0x410>
     98c:	d9002d17 	ldw	r4,180(sp)
     990:	d9801e04 	addi	r6,sp,120
     994:	b80b883a 	mov	r5,r23
     998:	0007d6c0 	call	7d6c <__sprint_r>
     99c:	b880030b 	ldhu	r2,12(r23)
     9a0:	1080100c 	andi	r2,r2,64
     9a4:	1005c01e 	bne	r2,zero,20a8 <___vfprintf_internal_r+0x1b1c>
     9a8:	d8802f17 	ldw	r2,188(sp)
     9ac:	dfc04717 	ldw	ra,284(sp)
     9b0:	df004617 	ldw	fp,280(sp)
     9b4:	ddc04517 	ldw	r23,276(sp)
     9b8:	dd804417 	ldw	r22,272(sp)
     9bc:	dd404317 	ldw	r21,268(sp)
     9c0:	dd004217 	ldw	r20,264(sp)
     9c4:	dcc04117 	ldw	r19,260(sp)
     9c8:	dc804017 	ldw	r18,256(sp)
     9cc:	dc403f17 	ldw	r17,252(sp)
     9d0:	dc003e17 	ldw	r16,248(sp)
     9d4:	dec04804 	addi	sp,sp,288
     9d8:	f800283a 	ret
     9dc:	d9002d17 	ldw	r4,180(sp)
     9e0:	000494c0 	call	494c <__sinit>
     9e4:	003f0206 	br	5f0 <___vfprintf_internal_r+0x64>
     9e8:	d9002e17 	ldw	r4,184(sp)
     9ec:	d9402e17 	ldw	r5,184(sp)
     9f0:	21000017 	ldw	r4,0(r4)
     9f4:	28800104 	addi	r2,r5,4
     9f8:	d9003115 	stw	r4,196(sp)
     9fc:	203fa716 	blt	r4,zero,89c <___vfprintf_internal_r+0x310>
     a00:	d8802e15 	stw	r2,184(sp)
     a04:	ac400007 	ldb	r17,0(r21)
     a08:	003f4206 	br	714 <___vfprintf_internal_r+0x188>
     a0c:	ac400007 	ldb	r17,0(r21)
     a10:	01000a84 	movi	r4,42
     a14:	a8c00044 	addi	r3,r21,1
     a18:	89075826 	beq	r17,r4,277c <___vfprintf_internal_r+0x21f0>
     a1c:	8cbff404 	addi	r18,r17,-48
     a20:	b486ae36 	bltu	r22,r18,24dc <___vfprintf_internal_r+0x1f50>
     a24:	0009883a 	mov	r4,zero
     a28:	1823883a 	mov	r17,r3
     a2c:	01400284 	movi	r5,10
     a30:	000aa280 	call	aa28 <__mulsi3>
     a34:	88c00007 	ldb	r3,0(r17)
     a38:	1489883a 	add	r4,r2,r18
     a3c:	8d400044 	addi	r21,r17,1
     a40:	1cbff404 	addi	r18,r3,-48
     a44:	a823883a 	mov	r17,r21
     a48:	b4bff82e 	bgeu	r22,r18,a2c <___vfprintf_internal_r+0x4a0>
     a4c:	1823883a 	mov	r17,r3
     a50:	2005f616 	blt	r4,zero,222c <___vfprintf_internal_r+0x1ca0>
     a54:	d9002a15 	stw	r4,168(sp)
     a58:	003f2f06 	br	718 <___vfprintf_internal_r+0x18c>
     a5c:	84002014 	ori	r16,r16,128
     a60:	ac400007 	ldb	r17,0(r21)
     a64:	003f2b06 	br	714 <___vfprintf_internal_r+0x188>
     a68:	8cbff404 	addi	r18,r17,-48
     a6c:	d8003115 	stw	zero,196(sp)
     a70:	0009883a 	mov	r4,zero
     a74:	a823883a 	mov	r17,r21
     a78:	01400284 	movi	r5,10
     a7c:	000aa280 	call	aa28 <__mulsi3>
     a80:	88c00007 	ldb	r3,0(r17)
     a84:	9089883a 	add	r4,r18,r2
     a88:	ad400044 	addi	r21,r21,1
     a8c:	1cbff404 	addi	r18,r3,-48
     a90:	a823883a 	mov	r17,r21
     a94:	b4bff82e 	bgeu	r22,r18,a78 <___vfprintf_internal_r+0x4ec>
     a98:	1823883a 	mov	r17,r3
     a9c:	d9003115 	stw	r4,196(sp)
     aa0:	003f1d06 	br	718 <___vfprintf_internal_r+0x18c>
     aa4:	8025883a 	mov	r18,r16
     aa8:	dc002903 	ldbu	r16,164(sp)
     aac:	e011883a 	mov	r8,fp
     ab0:	84003fcc 	andi	r16,r16,255
     ab4:	8007531e 	bne	r16,zero,2804 <___vfprintf_internal_r+0x2278>
     ab8:	94800414 	ori	r18,r18,16
     abc:	9080080c 	andi	r2,r18,32
     ac0:	1003a326 	beq	r2,zero,1950 <___vfprintf_internal_r+0x13c4>
     ac4:	d9002e17 	ldw	r4,184(sp)
     ac8:	20800117 	ldw	r2,4(r4)
     acc:	24c00017 	ldw	r19,0(r4)
     ad0:	21000204 	addi	r4,r4,8
     ad4:	d9002e15 	stw	r4,184(sp)
     ad8:	102d883a 	mov	r22,r2
     adc:	10047316 	blt	r2,zero,1cac <___vfprintf_internal_r+0x1720>
     ae0:	d9002a17 	ldw	r4,168(sp)
     ae4:	df002783 	ldbu	fp,158(sp)
     ae8:	2003e416 	blt	r4,zero,1a7c <___vfprintf_internal_r+0x14f0>
     aec:	00ffdfc4 	movi	r3,-129
     af0:	9d84b03a 	or	r2,r19,r22
     af4:	90e4703a 	and	r18,r18,r3
     af8:	10018026 	beq	r2,zero,10fc <___vfprintf_internal_r+0xb70>
     afc:	b003ab26 	beq	r22,zero,19ac <___vfprintf_internal_r+0x1420>
     b00:	dc402915 	stw	r17,164(sp)
     b04:	dc001e04 	addi	r16,sp,120
     b08:	b023883a 	mov	r17,r22
     b0c:	402d883a 	mov	r22,r8
     b10:	9809883a 	mov	r4,r19
     b14:	880b883a 	mov	r5,r17
     b18:	01800284 	movi	r6,10
     b1c:	000f883a 	mov	r7,zero
     b20:	000a2b00 	call	a2b0 <__umoddi3>
     b24:	10800c04 	addi	r2,r2,48
     b28:	843fffc4 	addi	r16,r16,-1
     b2c:	9809883a 	mov	r4,r19
     b30:	880b883a 	mov	r5,r17
     b34:	80800005 	stb	r2,0(r16)
     b38:	01800284 	movi	r6,10
     b3c:	000f883a 	mov	r7,zero
     b40:	0009cb40 	call	9cb4 <__udivdi3>
     b44:	1027883a 	mov	r19,r2
     b48:	10c4b03a 	or	r2,r2,r3
     b4c:	1823883a 	mov	r17,r3
     b50:	103fef1e 	bne	r2,zero,b10 <___vfprintf_internal_r+0x584>
     b54:	d8c02817 	ldw	r3,160(sp)
     b58:	dc402917 	ldw	r17,164(sp)
     b5c:	b011883a 	mov	r8,r22
     b60:	1c07c83a 	sub	r3,r3,r16
     b64:	d8c02b15 	stw	r3,172(sp)
     b68:	00005f06 	br	ce8 <___vfprintf_internal_r+0x75c>
     b6c:	8025883a 	mov	r18,r16
     b70:	dc002903 	ldbu	r16,164(sp)
     b74:	e011883a 	mov	r8,fp
     b78:	84003fcc 	andi	r16,r16,255
     b7c:	80071e1e 	bne	r16,zero,27f8 <___vfprintf_internal_r+0x226c>
     b80:	9080020c 	andi	r2,r18,8
     b84:	1004af26 	beq	r2,zero,1e44 <___vfprintf_internal_r+0x18b8>
     b88:	d9002e17 	ldw	r4,184(sp)
     b8c:	d9402e17 	ldw	r5,184(sp)
     b90:	d8802e17 	ldw	r2,184(sp)
     b94:	21000017 	ldw	r4,0(r4)
     b98:	29400117 	ldw	r5,4(r5)
     b9c:	10800204 	addi	r2,r2,8
     ba0:	d9003615 	stw	r4,216(sp)
     ba4:	d9403815 	stw	r5,224(sp)
     ba8:	d8802e15 	stw	r2,184(sp)
     bac:	d9003617 	ldw	r4,216(sp)
     bb0:	d9403817 	ldw	r5,224(sp)
     bb4:	da003d15 	stw	r8,244(sp)
     bb8:	04000044 	movi	r16,1
     bbc:	00079900 	call	7990 <__fpclassifyd>
     bc0:	da003d17 	ldw	r8,244(sp)
     bc4:	1404441e 	bne	r2,r16,1cd8 <___vfprintf_internal_r+0x174c>
     bc8:	d9003617 	ldw	r4,216(sp)
     bcc:	d9403817 	ldw	r5,224(sp)
     bd0:	000d883a 	mov	r6,zero
     bd4:	000f883a 	mov	r7,zero
     bd8:	000be300 	call	be30 <__ledf2>
     bdc:	da003d17 	ldw	r8,244(sp)
     be0:	1005e316 	blt	r2,zero,2370 <___vfprintf_internal_r+0x1de4>
     be4:	df002783 	ldbu	fp,158(sp)
     be8:	008011c4 	movi	r2,71
     bec:	1445580e 	bge	r2,r17,2150 <___vfprintf_internal_r+0x1bc4>
     bf0:	04000074 	movhi	r16,1
     bf4:	84001304 	addi	r16,r16,76
     bf8:	00c000c4 	movi	r3,3
     bfc:	00bfdfc4 	movi	r2,-129
     c00:	d8c02915 	stw	r3,164(sp)
     c04:	90a4703a 	and	r18,r18,r2
     c08:	d8c02b15 	stw	r3,172(sp)
     c0c:	d8002a15 	stw	zero,168(sp)
     c10:	d8003215 	stw	zero,200(sp)
     c14:	00003a06 	br	d00 <___vfprintf_internal_r+0x774>
     c18:	84000214 	ori	r16,r16,8
     c1c:	ac400007 	ldb	r17,0(r21)
     c20:	003ebc06 	br	714 <___vfprintf_internal_r+0x188>
     c24:	8025883a 	mov	r18,r16
     c28:	dc002903 	ldbu	r16,164(sp)
     c2c:	e011883a 	mov	r8,fp
     c30:	84003fcc 	andi	r16,r16,255
     c34:	8007001e 	bne	r16,zero,2838 <___vfprintf_internal_r+0x22ac>
     c38:	94800414 	ori	r18,r18,16
     c3c:	9080080c 	andi	r2,r18,32
     c40:	1002fa26 	beq	r2,zero,182c <___vfprintf_internal_r+0x12a0>
     c44:	d9002e17 	ldw	r4,184(sp)
     c48:	d9402a17 	ldw	r5,168(sp)
     c4c:	d8002785 	stb	zero,158(sp)
     c50:	20800204 	addi	r2,r4,8
     c54:	24c00017 	ldw	r19,0(r4)
     c58:	25800117 	ldw	r22,4(r4)
     c5c:	2804b116 	blt	r5,zero,1f24 <___vfprintf_internal_r+0x1998>
     c60:	013fdfc4 	movi	r4,-129
     c64:	9d86b03a 	or	r3,r19,r22
     c68:	d8802e15 	stw	r2,184(sp)
     c6c:	9124703a 	and	r18,r18,r4
     c70:	1802fb1e 	bne	r3,zero,1860 <___vfprintf_internal_r+0x12d4>
     c74:	d8c02a17 	ldw	r3,168(sp)
     c78:	0039883a 	mov	fp,zero
     c7c:	1805e526 	beq	r3,zero,2414 <___vfprintf_internal_r+0x1e88>
     c80:	0027883a 	mov	r19,zero
     c84:	002d883a 	mov	r22,zero
     c88:	dc001e04 	addi	r16,sp,120
     c8c:	9806d0fa 	srli	r3,r19,3
     c90:	b008977a 	slli	r4,r22,29
     c94:	b02cd0fa 	srli	r22,r22,3
     c98:	9cc001cc 	andi	r19,r19,7
     c9c:	98800c04 	addi	r2,r19,48
     ca0:	843fffc4 	addi	r16,r16,-1
     ca4:	20e6b03a 	or	r19,r4,r3
     ca8:	80800005 	stb	r2,0(r16)
     cac:	9d86b03a 	or	r3,r19,r22
     cb0:	183ff61e 	bne	r3,zero,c8c <___vfprintf_internal_r+0x700>
     cb4:	90c0004c 	andi	r3,r18,1
     cb8:	18014126 	beq	r3,zero,11c0 <___vfprintf_internal_r+0xc34>
     cbc:	10803fcc 	andi	r2,r2,255
     cc0:	1080201c 	xori	r2,r2,128
     cc4:	10bfe004 	addi	r2,r2,-128
     cc8:	00c00c04 	movi	r3,48
     ccc:	10c13c26 	beq	r2,r3,11c0 <___vfprintf_internal_r+0xc34>
     cd0:	80ffffc5 	stb	r3,-1(r16)
     cd4:	d8c02817 	ldw	r3,160(sp)
     cd8:	80bfffc4 	addi	r2,r16,-1
     cdc:	1021883a 	mov	r16,r2
     ce0:	1887c83a 	sub	r3,r3,r2
     ce4:	d8c02b15 	stw	r3,172(sp)
     ce8:	d8802b17 	ldw	r2,172(sp)
     cec:	d9002a17 	ldw	r4,168(sp)
     cf0:	1100010e 	bge	r2,r4,cf8 <___vfprintf_internal_r+0x76c>
     cf4:	2005883a 	mov	r2,r4
     cf8:	d8802915 	stw	r2,164(sp)
     cfc:	d8003215 	stw	zero,200(sp)
     d00:	e7003fcc 	andi	fp,fp,255
     d04:	e700201c 	xori	fp,fp,128
     d08:	e73fe004 	addi	fp,fp,-128
     d0c:	e0000326 	beq	fp,zero,d1c <___vfprintf_internal_r+0x790>
     d10:	d8c02917 	ldw	r3,164(sp)
     d14:	18c00044 	addi	r3,r3,1
     d18:	d8c02915 	stw	r3,164(sp)
     d1c:	90c0008c 	andi	r3,r18,2
     d20:	d8c02c15 	stw	r3,176(sp)
     d24:	18000326 	beq	r3,zero,d34 <___vfprintf_internal_r+0x7a8>
     d28:	d8c02917 	ldw	r3,164(sp)
     d2c:	18c00084 	addi	r3,r3,2
     d30:	d8c02915 	stw	r3,164(sp)
     d34:	90c0210c 	andi	r3,r18,132
     d38:	d8c03015 	stw	r3,192(sp)
     d3c:	1801c51e 	bne	r3,zero,1454 <___vfprintf_internal_r+0xec8>
     d40:	d9003117 	ldw	r4,196(sp)
     d44:	d8c02917 	ldw	r3,164(sp)
     d48:	20e7c83a 	sub	r19,r4,r3
     d4c:	04c1c10e 	bge	zero,r19,1454 <___vfprintf_internal_r+0xec8>
     d50:	02400404 	movi	r9,16
     d54:	d8c02017 	ldw	r3,128(sp)
     d58:	d8801f17 	ldw	r2,124(sp)
     d5c:	4cc52f0e 	bge	r9,r19,221c <___vfprintf_internal_r+0x1c90>
     d60:	01400074 	movhi	r5,1
     d64:	29402684 	addi	r5,r5,154
     d68:	dc403b15 	stw	r17,236(sp)
     d6c:	d9403515 	stw	r5,212(sp)
     d70:	9823883a 	mov	r17,r19
     d74:	482d883a 	mov	r22,r9
     d78:	9027883a 	mov	r19,r18
     d7c:	070001c4 	movi	fp,7
     d80:	8025883a 	mov	r18,r16
     d84:	dc002d17 	ldw	r16,180(sp)
     d88:	00000306 	br	d98 <___vfprintf_internal_r+0x80c>
     d8c:	8c7ffc04 	addi	r17,r17,-16
     d90:	42000204 	addi	r8,r8,8
     d94:	b440130e 	bge	r22,r17,de4 <___vfprintf_internal_r+0x858>
     d98:	01000074 	movhi	r4,1
     d9c:	18c00404 	addi	r3,r3,16
     da0:	10800044 	addi	r2,r2,1
     da4:	21002684 	addi	r4,r4,154
     da8:	41000015 	stw	r4,0(r8)
     dac:	45800115 	stw	r22,4(r8)
     db0:	d8c02015 	stw	r3,128(sp)
     db4:	d8801f15 	stw	r2,124(sp)
     db8:	e0bff40e 	bge	fp,r2,d8c <___vfprintf_internal_r+0x800>
     dbc:	d9801e04 	addi	r6,sp,120
     dc0:	b80b883a 	mov	r5,r23
     dc4:	8009883a 	mov	r4,r16
     dc8:	0007d6c0 	call	7d6c <__sprint_r>
     dcc:	103ef31e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
     dd0:	8c7ffc04 	addi	r17,r17,-16
     dd4:	d8c02017 	ldw	r3,128(sp)
     dd8:	d8801f17 	ldw	r2,124(sp)
     ddc:	da000404 	addi	r8,sp,16
     de0:	b47fed16 	blt	r22,r17,d98 <___vfprintf_internal_r+0x80c>
     de4:	9021883a 	mov	r16,r18
     de8:	9825883a 	mov	r18,r19
     dec:	8827883a 	mov	r19,r17
     df0:	dc403b17 	ldw	r17,236(sp)
     df4:	d9403517 	ldw	r5,212(sp)
     df8:	98c7883a 	add	r3,r19,r3
     dfc:	10800044 	addi	r2,r2,1
     e00:	41400015 	stw	r5,0(r8)
     e04:	44c00115 	stw	r19,4(r8)
     e08:	d8c02015 	stw	r3,128(sp)
     e0c:	d8801f15 	stw	r2,124(sp)
     e10:	010001c4 	movi	r4,7
     e14:	2082c516 	blt	r4,r2,192c <___vfprintf_internal_r+0x13a0>
     e18:	df002787 	ldb	fp,158(sp)
     e1c:	42000204 	addi	r8,r8,8
     e20:	e0000c26 	beq	fp,zero,e54 <___vfprintf_internal_r+0x8c8>
     e24:	d8801f17 	ldw	r2,124(sp)
     e28:	d9002784 	addi	r4,sp,158
     e2c:	18c00044 	addi	r3,r3,1
     e30:	10800044 	addi	r2,r2,1
     e34:	41000015 	stw	r4,0(r8)
     e38:	01000044 	movi	r4,1
     e3c:	41000115 	stw	r4,4(r8)
     e40:	d8c02015 	stw	r3,128(sp)
     e44:	d8801f15 	stw	r2,124(sp)
     e48:	010001c4 	movi	r4,7
     e4c:	20825e16 	blt	r4,r2,17c8 <___vfprintf_internal_r+0x123c>
     e50:	42000204 	addi	r8,r8,8
     e54:	d8802c17 	ldw	r2,176(sp)
     e58:	10000c26 	beq	r2,zero,e8c <___vfprintf_internal_r+0x900>
     e5c:	d8801f17 	ldw	r2,124(sp)
     e60:	d9002704 	addi	r4,sp,156
     e64:	18c00084 	addi	r3,r3,2
     e68:	10800044 	addi	r2,r2,1
     e6c:	41000015 	stw	r4,0(r8)
     e70:	01000084 	movi	r4,2
     e74:	41000115 	stw	r4,4(r8)
     e78:	d8c02015 	stw	r3,128(sp)
     e7c:	d8801f15 	stw	r2,124(sp)
     e80:	010001c4 	movi	r4,7
     e84:	20825816 	blt	r4,r2,17e8 <___vfprintf_internal_r+0x125c>
     e88:	42000204 	addi	r8,r8,8
     e8c:	d9003017 	ldw	r4,192(sp)
     e90:	00802004 	movi	r2,128
     e94:	2081bb26 	beq	r4,r2,1584 <___vfprintf_internal_r+0xff8>
     e98:	d9402a17 	ldw	r5,168(sp)
     e9c:	d8802b17 	ldw	r2,172(sp)
     ea0:	28adc83a 	sub	r22,r5,r2
     ea4:	0580310e 	bge	zero,r22,f6c <___vfprintf_internal_r+0x9e0>
     ea8:	07000404 	movi	fp,16
     eac:	d8801f17 	ldw	r2,124(sp)
     eb0:	e584360e 	bge	fp,r22,1f8c <___vfprintf_internal_r+0x1a00>
     eb4:	01400074 	movhi	r5,1
     eb8:	29402284 	addi	r5,r5,138
     ebc:	dc402a15 	stw	r17,168(sp)
     ec0:	d9402c15 	stw	r5,176(sp)
     ec4:	b023883a 	mov	r17,r22
     ec8:	04c001c4 	movi	r19,7
     ecc:	a82d883a 	mov	r22,r21
     ed0:	902b883a 	mov	r21,r18
     ed4:	8025883a 	mov	r18,r16
     ed8:	dc002d17 	ldw	r16,180(sp)
     edc:	00000306 	br	eec <___vfprintf_internal_r+0x960>
     ee0:	8c7ffc04 	addi	r17,r17,-16
     ee4:	42000204 	addi	r8,r8,8
     ee8:	e440110e 	bge	fp,r17,f30 <___vfprintf_internal_r+0x9a4>
     eec:	18c00404 	addi	r3,r3,16
     ef0:	10800044 	addi	r2,r2,1
     ef4:	45000015 	stw	r20,0(r8)
     ef8:	47000115 	stw	fp,4(r8)
     efc:	d8c02015 	stw	r3,128(sp)
     f00:	d8801f15 	stw	r2,124(sp)
     f04:	98bff60e 	bge	r19,r2,ee0 <___vfprintf_internal_r+0x954>
     f08:	d9801e04 	addi	r6,sp,120
     f0c:	b80b883a 	mov	r5,r23
     f10:	8009883a 	mov	r4,r16
     f14:	0007d6c0 	call	7d6c <__sprint_r>
     f18:	103ea01e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
     f1c:	8c7ffc04 	addi	r17,r17,-16
     f20:	d8c02017 	ldw	r3,128(sp)
     f24:	d8801f17 	ldw	r2,124(sp)
     f28:	da000404 	addi	r8,sp,16
     f2c:	e47fef16 	blt	fp,r17,eec <___vfprintf_internal_r+0x960>
     f30:	9021883a 	mov	r16,r18
     f34:	a825883a 	mov	r18,r21
     f38:	b02b883a 	mov	r21,r22
     f3c:	882d883a 	mov	r22,r17
     f40:	dc402a17 	ldw	r17,168(sp)
     f44:	d9002c17 	ldw	r4,176(sp)
     f48:	1d87883a 	add	r3,r3,r22
     f4c:	10800044 	addi	r2,r2,1
     f50:	41000015 	stw	r4,0(r8)
     f54:	45800115 	stw	r22,4(r8)
     f58:	d8c02015 	stw	r3,128(sp)
     f5c:	d8801f15 	stw	r2,124(sp)
     f60:	010001c4 	movi	r4,7
     f64:	20821016 	blt	r4,r2,17a8 <___vfprintf_internal_r+0x121c>
     f68:	42000204 	addi	r8,r8,8
     f6c:	9080400c 	andi	r2,r18,256
     f70:	10013a1e 	bne	r2,zero,145c <___vfprintf_internal_r+0xed0>
     f74:	d9402b17 	ldw	r5,172(sp)
     f78:	d8801f17 	ldw	r2,124(sp)
     f7c:	44000015 	stw	r16,0(r8)
     f80:	1947883a 	add	r3,r3,r5
     f84:	10800044 	addi	r2,r2,1
     f88:	41400115 	stw	r5,4(r8)
     f8c:	d8c02015 	stw	r3,128(sp)
     f90:	d8801f15 	stw	r2,124(sp)
     f94:	010001c4 	movi	r4,7
     f98:	2081f516 	blt	r4,r2,1770 <___vfprintf_internal_r+0x11e4>
     f9c:	42000204 	addi	r8,r8,8
     fa0:	9480010c 	andi	r18,r18,4
     fa4:	90003226 	beq	r18,zero,1070 <___vfprintf_internal_r+0xae4>
     fa8:	d9403117 	ldw	r5,196(sp)
     fac:	d8802917 	ldw	r2,164(sp)
     fb0:	28a1c83a 	sub	r16,r5,r2
     fb4:	04002e0e 	bge	zero,r16,1070 <___vfprintf_internal_r+0xae4>
     fb8:	04400404 	movi	r17,16
     fbc:	d8801f17 	ldw	r2,124(sp)
     fc0:	8c04c40e 	bge	r17,r16,22d4 <___vfprintf_internal_r+0x1d48>
     fc4:	01400074 	movhi	r5,1
     fc8:	29402684 	addi	r5,r5,154
     fcc:	d9403515 	stw	r5,212(sp)
     fd0:	048001c4 	movi	r18,7
     fd4:	dcc02d17 	ldw	r19,180(sp)
     fd8:	00000306 	br	fe8 <___vfprintf_internal_r+0xa5c>
     fdc:	843ffc04 	addi	r16,r16,-16
     fe0:	42000204 	addi	r8,r8,8
     fe4:	8c00130e 	bge	r17,r16,1034 <___vfprintf_internal_r+0xaa8>
     fe8:	01000074 	movhi	r4,1
     fec:	18c00404 	addi	r3,r3,16
     ff0:	10800044 	addi	r2,r2,1
     ff4:	21002684 	addi	r4,r4,154
     ff8:	41000015 	stw	r4,0(r8)
     ffc:	44400115 	stw	r17,4(r8)
    1000:	d8c02015 	stw	r3,128(sp)
    1004:	d8801f15 	stw	r2,124(sp)
    1008:	90bff40e 	bge	r18,r2,fdc <___vfprintf_internal_r+0xa50>
    100c:	d9801e04 	addi	r6,sp,120
    1010:	b80b883a 	mov	r5,r23
    1014:	9809883a 	mov	r4,r19
    1018:	0007d6c0 	call	7d6c <__sprint_r>
    101c:	103e5f1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1020:	843ffc04 	addi	r16,r16,-16
    1024:	d8c02017 	ldw	r3,128(sp)
    1028:	d8801f17 	ldw	r2,124(sp)
    102c:	da000404 	addi	r8,sp,16
    1030:	8c3fed16 	blt	r17,r16,fe8 <___vfprintf_internal_r+0xa5c>
    1034:	d9403517 	ldw	r5,212(sp)
    1038:	1c07883a 	add	r3,r3,r16
    103c:	10800044 	addi	r2,r2,1
    1040:	41400015 	stw	r5,0(r8)
    1044:	44000115 	stw	r16,4(r8)
    1048:	d8c02015 	stw	r3,128(sp)
    104c:	d8801f15 	stw	r2,124(sp)
    1050:	010001c4 	movi	r4,7
    1054:	2080060e 	bge	r4,r2,1070 <___vfprintf_internal_r+0xae4>
    1058:	d9002d17 	ldw	r4,180(sp)
    105c:	d9801e04 	addi	r6,sp,120
    1060:	b80b883a 	mov	r5,r23
    1064:	0007d6c0 	call	7d6c <__sprint_r>
    1068:	103e4c1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    106c:	d8c02017 	ldw	r3,128(sp)
    1070:	d8803117 	ldw	r2,196(sp)
    1074:	d9002917 	ldw	r4,164(sp)
    1078:	1100010e 	bge	r2,r4,1080 <___vfprintf_internal_r+0xaf4>
    107c:	2005883a 	mov	r2,r4
    1080:	d9402f17 	ldw	r5,188(sp)
    1084:	288b883a 	add	r5,r5,r2
    1088:	d9402f15 	stw	r5,188(sp)
    108c:	1801c01e 	bne	r3,zero,1790 <___vfprintf_internal_r+0x1204>
    1090:	a8800007 	ldb	r2,0(r21)
    1094:	d8001f15 	stw	zero,124(sp)
    1098:	da000404 	addi	r8,sp,16
    109c:	103d751e 	bne	r2,zero,674 <___vfprintf_internal_r+0xe8>
    10a0:	a823883a 	mov	r17,r21
    10a4:	003d8b06 	br	6d4 <___vfprintf_internal_r+0x148>
    10a8:	8025883a 	mov	r18,r16
    10ac:	dc002903 	ldbu	r16,164(sp)
    10b0:	e011883a 	mov	r8,fp
    10b4:	84003fcc 	andi	r16,r16,255
    10b8:	8005e51e 	bne	r16,zero,2850 <___vfprintf_internal_r+0x22c4>
    10bc:	94800414 	ori	r18,r18,16
    10c0:	9080080c 	andi	r2,r18,32
    10c4:	10022b26 	beq	r2,zero,1974 <___vfprintf_internal_r+0x13e8>
    10c8:	d9002e17 	ldw	r4,184(sp)
    10cc:	d9402a17 	ldw	r5,168(sp)
    10d0:	d8002785 	stb	zero,158(sp)
    10d4:	20c00204 	addi	r3,r4,8
    10d8:	24c00017 	ldw	r19,0(r4)
    10dc:	25800117 	ldw	r22,4(r4)
    10e0:	28042e16 	blt	r5,zero,219c <___vfprintf_internal_r+0x1c10>
    10e4:	013fdfc4 	movi	r4,-129
    10e8:	9d84b03a 	or	r2,r19,r22
    10ec:	d8c02e15 	stw	r3,184(sp)
    10f0:	9124703a 	and	r18,r18,r4
    10f4:	0039883a 	mov	fp,zero
    10f8:	103e801e 	bne	r2,zero,afc <___vfprintf_internal_r+0x570>
    10fc:	d9002a17 	ldw	r4,168(sp)
    1100:	2002e01e 	bne	r4,zero,1c84 <___vfprintf_internal_r+0x16f8>
    1104:	d8002a15 	stw	zero,168(sp)
    1108:	d8002b15 	stw	zero,172(sp)
    110c:	dc001e04 	addi	r16,sp,120
    1110:	003ef506 	br	ce8 <___vfprintf_internal_r+0x75c>
    1114:	8025883a 	mov	r18,r16
    1118:	dc002903 	ldbu	r16,164(sp)
    111c:	e011883a 	mov	r8,fp
    1120:	84003fcc 	andi	r16,r16,255
    1124:	8005ba1e 	bne	r16,zero,2810 <___vfprintf_internal_r+0x2284>
    1128:	01000074 	movhi	r4,1
    112c:	21001604 	addi	r4,r4,88
    1130:	d9003915 	stw	r4,228(sp)
    1134:	9080080c 	andi	r2,r18,32
    1138:	10006126 	beq	r2,zero,12c0 <___vfprintf_internal_r+0xd34>
    113c:	d9402e17 	ldw	r5,184(sp)
    1140:	2cc00017 	ldw	r19,0(r5)
    1144:	2d800117 	ldw	r22,4(r5)
    1148:	29400204 	addi	r5,r5,8
    114c:	d9402e15 	stw	r5,184(sp)
    1150:	9080004c 	andi	r2,r18,1
    1154:	1001ac26 	beq	r2,zero,1808 <___vfprintf_internal_r+0x127c>
    1158:	9d84b03a 	or	r2,r19,r22
    115c:	10038526 	beq	r2,zero,1f74 <___vfprintf_internal_r+0x19e8>
    1160:	d8c02a17 	ldw	r3,168(sp)
    1164:	00800c04 	movi	r2,48
    1168:	d8802705 	stb	r2,156(sp)
    116c:	dc402745 	stb	r17,157(sp)
    1170:	d8002785 	stb	zero,158(sp)
    1174:	90800094 	ori	r2,r18,2
    1178:	18047916 	blt	r3,zero,2360 <___vfprintf_internal_r+0x1dd4>
    117c:	00bfdfc4 	movi	r2,-129
    1180:	90a4703a 	and	r18,r18,r2
    1184:	94800094 	ori	r18,r18,2
    1188:	0039883a 	mov	fp,zero
    118c:	d9003917 	ldw	r4,228(sp)
    1190:	dc001e04 	addi	r16,sp,120
    1194:	988003cc 	andi	r2,r19,15
    1198:	b006973a 	slli	r3,r22,28
    119c:	2085883a 	add	r2,r4,r2
    11a0:	9826d13a 	srli	r19,r19,4
    11a4:	10800003 	ldbu	r2,0(r2)
    11a8:	b02cd13a 	srli	r22,r22,4
    11ac:	843fffc4 	addi	r16,r16,-1
    11b0:	1ce6b03a 	or	r19,r3,r19
    11b4:	80800005 	stb	r2,0(r16)
    11b8:	9d84b03a 	or	r2,r19,r22
    11bc:	103ff51e 	bne	r2,zero,1194 <___vfprintf_internal_r+0xc08>
    11c0:	d8c02817 	ldw	r3,160(sp)
    11c4:	1c07c83a 	sub	r3,r3,r16
    11c8:	d8c02b15 	stw	r3,172(sp)
    11cc:	003ec606 	br	ce8 <___vfprintf_internal_r+0x75c>
    11d0:	8025883a 	mov	r18,r16
    11d4:	dc002903 	ldbu	r16,164(sp)
    11d8:	e011883a 	mov	r8,fp
    11dc:	84003fcc 	andi	r16,r16,255
    11e0:	803e9626 	beq	r16,zero,c3c <___vfprintf_internal_r+0x6b0>
    11e4:	d8c02b03 	ldbu	r3,172(sp)
    11e8:	d8c02785 	stb	r3,158(sp)
    11ec:	003e9306 	br	c3c <___vfprintf_internal_r+0x6b0>
    11f0:	00c00044 	movi	r3,1
    11f4:	d8c02905 	stb	r3,164(sp)
    11f8:	00c00ac4 	movi	r3,43
    11fc:	d8c02b05 	stb	r3,172(sp)
    1200:	ac400007 	ldb	r17,0(r21)
    1204:	003d4306 	br	714 <___vfprintf_internal_r+0x188>
    1208:	84000814 	ori	r16,r16,32
    120c:	ac400007 	ldb	r17,0(r21)
    1210:	003d4006 	br	714 <___vfprintf_internal_r+0x188>
    1214:	d8802e17 	ldw	r2,184(sp)
    1218:	8025883a 	mov	r18,r16
    121c:	d8002785 	stb	zero,158(sp)
    1220:	14000017 	ldw	r16,0(r2)
    1224:	e011883a 	mov	r8,fp
    1228:	14c00104 	addi	r19,r2,4
    122c:	80042d26 	beq	r16,zero,22e4 <___vfprintf_internal_r+0x1d58>
    1230:	d8c02a17 	ldw	r3,168(sp)
    1234:	1803e416 	blt	r3,zero,21c8 <___vfprintf_internal_r+0x1c3c>
    1238:	180d883a 	mov	r6,r3
    123c:	000b883a 	mov	r5,zero
    1240:	8009883a 	mov	r4,r16
    1244:	df003d15 	stw	fp,244(sp)
    1248:	0005ec40 	call	5ec4 <memchr>
    124c:	da003d17 	ldw	r8,244(sp)
    1250:	10046826 	beq	r2,zero,23f4 <___vfprintf_internal_r+0x1e68>
    1254:	1405c83a 	sub	r2,r2,r16
    1258:	d8802b15 	stw	r2,172(sp)
    125c:	1003e016 	blt	r2,zero,21e0 <___vfprintf_internal_r+0x1c54>
    1260:	df002783 	ldbu	fp,158(sp)
    1264:	d8802915 	stw	r2,164(sp)
    1268:	dcc02e15 	stw	r19,184(sp)
    126c:	d8002a15 	stw	zero,168(sp)
    1270:	d8003215 	stw	zero,200(sp)
    1274:	003ea206 	br	d00 <___vfprintf_internal_r+0x774>
    1278:	8025883a 	mov	r18,r16
    127c:	dc002903 	ldbu	r16,164(sp)
    1280:	e011883a 	mov	r8,fp
    1284:	84003fcc 	andi	r16,r16,255
    1288:	803f8d26 	beq	r16,zero,10c0 <___vfprintf_internal_r+0xb34>
    128c:	d8c02b03 	ldbu	r3,172(sp)
    1290:	d8c02785 	stb	r3,158(sp)
    1294:	003f8a06 	br	10c0 <___vfprintf_internal_r+0xb34>
    1298:	8025883a 	mov	r18,r16
    129c:	dc002903 	ldbu	r16,164(sp)
    12a0:	e011883a 	mov	r8,fp
    12a4:	84003fcc 	andi	r16,r16,255
    12a8:	8005661e 	bne	r16,zero,2844 <___vfprintf_internal_r+0x22b8>
    12ac:	01000074 	movhi	r4,1
    12b0:	21001b04 	addi	r4,r4,108
    12b4:	d9003915 	stw	r4,228(sp)
    12b8:	9080080c 	andi	r2,r18,32
    12bc:	103f9f1e 	bne	r2,zero,113c <___vfprintf_internal_r+0xbb0>
    12c0:	9080040c 	andi	r2,r18,16
    12c4:	1002eb26 	beq	r2,zero,1e74 <___vfprintf_internal_r+0x18e8>
    12c8:	d8802e17 	ldw	r2,184(sp)
    12cc:	002d883a 	mov	r22,zero
    12d0:	14c00017 	ldw	r19,0(r2)
    12d4:	10800104 	addi	r2,r2,4
    12d8:	d8802e15 	stw	r2,184(sp)
    12dc:	003f9c06 	br	1150 <___vfprintf_internal_r+0xbc4>
    12e0:	d8802b07 	ldb	r2,172(sp)
    12e4:	1002e11e 	bne	r2,zero,1e6c <___vfprintf_internal_r+0x18e0>
    12e8:	00c00044 	movi	r3,1
    12ec:	d8c02905 	stb	r3,164(sp)
    12f0:	00c00804 	movi	r3,32
    12f4:	d8c02b05 	stb	r3,172(sp)
    12f8:	ac400007 	ldb	r17,0(r21)
    12fc:	003d0506 	br	714 <___vfprintf_internal_r+0x188>
    1300:	84000054 	ori	r16,r16,1
    1304:	ac400007 	ldb	r17,0(r21)
    1308:	003d0206 	br	714 <___vfprintf_internal_r+0x188>
    130c:	8025883a 	mov	r18,r16
    1310:	dc002903 	ldbu	r16,164(sp)
    1314:	e011883a 	mov	r8,fp
    1318:	84003fcc 	andi	r16,r16,255
    131c:	803de726 	beq	r16,zero,abc <___vfprintf_internal_r+0x530>
    1320:	d8c02b03 	ldbu	r3,172(sp)
    1324:	d8c02785 	stb	r3,158(sp)
    1328:	003de406 	br	abc <___vfprintf_internal_r+0x530>
    132c:	84001014 	ori	r16,r16,64
    1330:	ac400007 	ldb	r17,0(r21)
    1334:	003cf706 	br	714 <___vfprintf_internal_r+0x188>
    1338:	ac400007 	ldb	r17,0(r21)
    133c:	00801b04 	movi	r2,108
    1340:	88838f26 	beq	r17,r2,2180 <___vfprintf_internal_r+0x1bf4>
    1344:	84000414 	ori	r16,r16,16
    1348:	003cf206 	br	714 <___vfprintf_internal_r+0x188>
    134c:	8025883a 	mov	r18,r16
    1350:	dc002903 	ldbu	r16,164(sp)
    1354:	e011883a 	mov	r8,fp
    1358:	84003fcc 	andi	r16,r16,255
    135c:	80053f1e 	bne	r16,zero,285c <___vfprintf_internal_r+0x22d0>
    1360:	9080080c 	andi	r2,r18,32
    1364:	1002d226 	beq	r2,zero,1eb0 <___vfprintf_internal_r+0x1924>
    1368:	d9002e17 	ldw	r4,184(sp)
    136c:	d9402f17 	ldw	r5,188(sp)
    1370:	20800017 	ldw	r2,0(r4)
    1374:	2807d7fa 	srai	r3,r5,31
    1378:	21000104 	addi	r4,r4,4
    137c:	d9002e15 	stw	r4,184(sp)
    1380:	11400015 	stw	r5,0(r2)
    1384:	10c00115 	stw	r3,4(r2)
    1388:	003cb806 	br	66c <___vfprintf_internal_r+0xe0>
    138c:	d8c02e17 	ldw	r3,184(sp)
    1390:	d9002e17 	ldw	r4,184(sp)
    1394:	8025883a 	mov	r18,r16
    1398:	18800017 	ldw	r2,0(r3)
    139c:	21000104 	addi	r4,r4,4
    13a0:	00c00044 	movi	r3,1
    13a4:	e011883a 	mov	r8,fp
    13a8:	d8c02915 	stw	r3,164(sp)
    13ac:	d8002785 	stb	zero,158(sp)
    13b0:	d8801405 	stb	r2,80(sp)
    13b4:	d9002e15 	stw	r4,184(sp)
    13b8:	d8c02b15 	stw	r3,172(sp)
    13bc:	d8002a15 	stw	zero,168(sp)
    13c0:	d8003215 	stw	zero,200(sp)
    13c4:	dc001404 	addi	r16,sp,80
    13c8:	0039883a 	mov	fp,zero
    13cc:	003e5306 	br	d1c <___vfprintf_internal_r+0x790>
    13d0:	01000074 	movhi	r4,1
    13d4:	21001b04 	addi	r4,r4,108
    13d8:	0039883a 	mov	fp,zero
    13dc:	d9003915 	stw	r4,228(sp)
    13e0:	04401e04 	movi	r17,120
    13e4:	003f6906 	br	118c <___vfprintf_internal_r+0xc00>
    13e8:	8025883a 	mov	r18,r16
    13ec:	dc002903 	ldbu	r16,164(sp)
    13f0:	e011883a 	mov	r8,fp
    13f4:	84003fcc 	andi	r16,r16,255
    13f8:	8005081e 	bne	r16,zero,281c <___vfprintf_internal_r+0x2290>
    13fc:	883d6126 	beq	r17,zero,984 <___vfprintf_internal_r+0x3f8>
    1400:	00c00044 	movi	r3,1
    1404:	d8c02915 	stw	r3,164(sp)
    1408:	dc401405 	stb	r17,80(sp)
    140c:	d8002785 	stb	zero,158(sp)
    1410:	003fe906 	br	13b8 <___vfprintf_internal_r+0xe2c>
    1414:	01400074 	movhi	r5,1
    1418:	29401b04 	addi	r5,r5,108
    141c:	d9403915 	stw	r5,228(sp)
    1420:	d8c02e15 	stw	r3,184(sp)
    1424:	1025883a 	mov	r18,r2
    1428:	04401e04 	movi	r17,120
    142c:	9d84b03a 	or	r2,r19,r22
    1430:	1000fc1e 	bne	r2,zero,1824 <___vfprintf_internal_r+0x1298>
    1434:	0039883a 	mov	fp,zero
    1438:	00800084 	movi	r2,2
    143c:	10803fcc 	andi	r2,r2,255
    1440:	00c00044 	movi	r3,1
    1444:	10c20f26 	beq	r2,r3,1c84 <___vfprintf_internal_r+0x16f8>
    1448:	00c00084 	movi	r3,2
    144c:	10fd3326 	beq	r2,r3,91c <___vfprintf_internal_r+0x390>
    1450:	003e0b06 	br	c80 <___vfprintf_internal_r+0x6f4>
    1454:	d8c02017 	ldw	r3,128(sp)
    1458:	003e7106 	br	e20 <___vfprintf_internal_r+0x894>
    145c:	00801944 	movi	r2,101
    1460:	14407e0e 	bge	r2,r17,165c <___vfprintf_internal_r+0x10d0>
    1464:	d9003617 	ldw	r4,216(sp)
    1468:	d9403817 	ldw	r5,224(sp)
    146c:	000d883a 	mov	r6,zero
    1470:	000f883a 	mov	r7,zero
    1474:	d8c03c15 	stw	r3,240(sp)
    1478:	da003d15 	stw	r8,244(sp)
    147c:	000bccc0 	call	bccc <__eqdf2>
    1480:	d8c03c17 	ldw	r3,240(sp)
    1484:	da003d17 	ldw	r8,244(sp)
    1488:	1000f71e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x12dc>
    148c:	d8801f17 	ldw	r2,124(sp)
    1490:	01000074 	movhi	r4,1
    1494:	21002204 	addi	r4,r4,136
    1498:	18c00044 	addi	r3,r3,1
    149c:	10800044 	addi	r2,r2,1
    14a0:	41000015 	stw	r4,0(r8)
    14a4:	01000044 	movi	r4,1
    14a8:	41000115 	stw	r4,4(r8)
    14ac:	d8c02015 	stw	r3,128(sp)
    14b0:	d8801f15 	stw	r2,124(sp)
    14b4:	010001c4 	movi	r4,7
    14b8:	2082b816 	blt	r4,r2,1f9c <___vfprintf_internal_r+0x1a10>
    14bc:	42000204 	addi	r8,r8,8
    14c0:	d8802617 	ldw	r2,152(sp)
    14c4:	d9403317 	ldw	r5,204(sp)
    14c8:	11400216 	blt	r2,r5,14d4 <___vfprintf_internal_r+0xf48>
    14cc:	9080004c 	andi	r2,r18,1
    14d0:	103eb326 	beq	r2,zero,fa0 <___vfprintf_internal_r+0xa14>
    14d4:	d8803717 	ldw	r2,220(sp)
    14d8:	d9003417 	ldw	r4,208(sp)
    14dc:	d9403717 	ldw	r5,220(sp)
    14e0:	1887883a 	add	r3,r3,r2
    14e4:	d8801f17 	ldw	r2,124(sp)
    14e8:	41000015 	stw	r4,0(r8)
    14ec:	41400115 	stw	r5,4(r8)
    14f0:	10800044 	addi	r2,r2,1
    14f4:	d8c02015 	stw	r3,128(sp)
    14f8:	d8801f15 	stw	r2,124(sp)
    14fc:	010001c4 	movi	r4,7
    1500:	20832916 	blt	r4,r2,21a8 <___vfprintf_internal_r+0x1c1c>
    1504:	42000204 	addi	r8,r8,8
    1508:	d8803317 	ldw	r2,204(sp)
    150c:	143fffc4 	addi	r16,r2,-1
    1510:	043ea30e 	bge	zero,r16,fa0 <___vfprintf_internal_r+0xa14>
    1514:	04400404 	movi	r17,16
    1518:	d8801f17 	ldw	r2,124(sp)
    151c:	8c00880e 	bge	r17,r16,1740 <___vfprintf_internal_r+0x11b4>
    1520:	01400074 	movhi	r5,1
    1524:	29402284 	addi	r5,r5,138
    1528:	d9402c15 	stw	r5,176(sp)
    152c:	058001c4 	movi	r22,7
    1530:	dcc02d17 	ldw	r19,180(sp)
    1534:	00000306 	br	1544 <___vfprintf_internal_r+0xfb8>
    1538:	42000204 	addi	r8,r8,8
    153c:	843ffc04 	addi	r16,r16,-16
    1540:	8c00820e 	bge	r17,r16,174c <___vfprintf_internal_r+0x11c0>
    1544:	18c00404 	addi	r3,r3,16
    1548:	10800044 	addi	r2,r2,1
    154c:	45000015 	stw	r20,0(r8)
    1550:	44400115 	stw	r17,4(r8)
    1554:	d8c02015 	stw	r3,128(sp)
    1558:	d8801f15 	stw	r2,124(sp)
    155c:	b0bff60e 	bge	r22,r2,1538 <___vfprintf_internal_r+0xfac>
    1560:	d9801e04 	addi	r6,sp,120
    1564:	b80b883a 	mov	r5,r23
    1568:	9809883a 	mov	r4,r19
    156c:	0007d6c0 	call	7d6c <__sprint_r>
    1570:	103d0a1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1574:	d8c02017 	ldw	r3,128(sp)
    1578:	d8801f17 	ldw	r2,124(sp)
    157c:	da000404 	addi	r8,sp,16
    1580:	003fee06 	br	153c <___vfprintf_internal_r+0xfb0>
    1584:	d9403117 	ldw	r5,196(sp)
    1588:	d8802917 	ldw	r2,164(sp)
    158c:	28adc83a 	sub	r22,r5,r2
    1590:	05be410e 	bge	zero,r22,e98 <___vfprintf_internal_r+0x90c>
    1594:	07000404 	movi	fp,16
    1598:	d8801f17 	ldw	r2,124(sp)
    159c:	e5838f0e 	bge	fp,r22,23dc <___vfprintf_internal_r+0x1e50>
    15a0:	01400074 	movhi	r5,1
    15a4:	29402284 	addi	r5,r5,138
    15a8:	dc403015 	stw	r17,192(sp)
    15ac:	d9402c15 	stw	r5,176(sp)
    15b0:	b023883a 	mov	r17,r22
    15b4:	04c001c4 	movi	r19,7
    15b8:	a82d883a 	mov	r22,r21
    15bc:	902b883a 	mov	r21,r18
    15c0:	8025883a 	mov	r18,r16
    15c4:	dc002d17 	ldw	r16,180(sp)
    15c8:	00000306 	br	15d8 <___vfprintf_internal_r+0x104c>
    15cc:	8c7ffc04 	addi	r17,r17,-16
    15d0:	42000204 	addi	r8,r8,8
    15d4:	e440110e 	bge	fp,r17,161c <___vfprintf_internal_r+0x1090>
    15d8:	18c00404 	addi	r3,r3,16
    15dc:	10800044 	addi	r2,r2,1
    15e0:	45000015 	stw	r20,0(r8)
    15e4:	47000115 	stw	fp,4(r8)
    15e8:	d8c02015 	stw	r3,128(sp)
    15ec:	d8801f15 	stw	r2,124(sp)
    15f0:	98bff60e 	bge	r19,r2,15cc <___vfprintf_internal_r+0x1040>
    15f4:	d9801e04 	addi	r6,sp,120
    15f8:	b80b883a 	mov	r5,r23
    15fc:	8009883a 	mov	r4,r16
    1600:	0007d6c0 	call	7d6c <__sprint_r>
    1604:	103ce51e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1608:	8c7ffc04 	addi	r17,r17,-16
    160c:	d8c02017 	ldw	r3,128(sp)
    1610:	d8801f17 	ldw	r2,124(sp)
    1614:	da000404 	addi	r8,sp,16
    1618:	e47fef16 	blt	fp,r17,15d8 <___vfprintf_internal_r+0x104c>
    161c:	9021883a 	mov	r16,r18
    1620:	a825883a 	mov	r18,r21
    1624:	b02b883a 	mov	r21,r22
    1628:	882d883a 	mov	r22,r17
    162c:	dc403017 	ldw	r17,192(sp)
    1630:	d9002c17 	ldw	r4,176(sp)
    1634:	1d87883a 	add	r3,r3,r22
    1638:	10800044 	addi	r2,r2,1
    163c:	41000015 	stw	r4,0(r8)
    1640:	45800115 	stw	r22,4(r8)
    1644:	d8c02015 	stw	r3,128(sp)
    1648:	d8801f15 	stw	r2,124(sp)
    164c:	010001c4 	movi	r4,7
    1650:	20818e16 	blt	r4,r2,1c8c <___vfprintf_internal_r+0x1700>
    1654:	42000204 	addi	r8,r8,8
    1658:	003e0f06 	br	e98 <___vfprintf_internal_r+0x90c>
    165c:	d9403317 	ldw	r5,204(sp)
    1660:	00800044 	movi	r2,1
    1664:	18c00044 	addi	r3,r3,1
    1668:	1141530e 	bge	r2,r5,1bb8 <___vfprintf_internal_r+0x162c>
    166c:	dc401f17 	ldw	r17,124(sp)
    1670:	00800044 	movi	r2,1
    1674:	40800115 	stw	r2,4(r8)
    1678:	8c400044 	addi	r17,r17,1
    167c:	44000015 	stw	r16,0(r8)
    1680:	d8c02015 	stw	r3,128(sp)
    1684:	dc401f15 	stw	r17,124(sp)
    1688:	008001c4 	movi	r2,7
    168c:	14416b16 	blt	r2,r17,1c3c <___vfprintf_internal_r+0x16b0>
    1690:	42000204 	addi	r8,r8,8
    1694:	d8803717 	ldw	r2,220(sp)
    1698:	d9003417 	ldw	r4,208(sp)
    169c:	8c400044 	addi	r17,r17,1
    16a0:	10c7883a 	add	r3,r2,r3
    16a4:	40800115 	stw	r2,4(r8)
    16a8:	41000015 	stw	r4,0(r8)
    16ac:	d8c02015 	stw	r3,128(sp)
    16b0:	dc401f15 	stw	r17,124(sp)
    16b4:	008001c4 	movi	r2,7
    16b8:	14416916 	blt	r2,r17,1c60 <___vfprintf_internal_r+0x16d4>
    16bc:	45800204 	addi	r22,r8,8
    16c0:	d9003617 	ldw	r4,216(sp)
    16c4:	d9403817 	ldw	r5,224(sp)
    16c8:	000d883a 	mov	r6,zero
    16cc:	000f883a 	mov	r7,zero
    16d0:	d8c03c15 	stw	r3,240(sp)
    16d4:	000bccc0 	call	bccc <__eqdf2>
    16d8:	d8c03c17 	ldw	r3,240(sp)
    16dc:	1000bc26 	beq	r2,zero,19d0 <___vfprintf_internal_r+0x1444>
    16e0:	d9403317 	ldw	r5,204(sp)
    16e4:	84000044 	addi	r16,r16,1
    16e8:	8c400044 	addi	r17,r17,1
    16ec:	28bfffc4 	addi	r2,r5,-1
    16f0:	1887883a 	add	r3,r3,r2
    16f4:	b0800115 	stw	r2,4(r22)
    16f8:	b4000015 	stw	r16,0(r22)
    16fc:	d8c02015 	stw	r3,128(sp)
    1700:	dc401f15 	stw	r17,124(sp)
    1704:	008001c4 	movi	r2,7
    1708:	14414316 	blt	r2,r17,1c18 <___vfprintf_internal_r+0x168c>
    170c:	b5800204 	addi	r22,r22,8
    1710:	d9003a17 	ldw	r4,232(sp)
    1714:	df0022c4 	addi	fp,sp,139
    1718:	8c400044 	addi	r17,r17,1
    171c:	20c7883a 	add	r3,r4,r3
    1720:	b7000015 	stw	fp,0(r22)
    1724:	b1000115 	stw	r4,4(r22)
    1728:	d8c02015 	stw	r3,128(sp)
    172c:	dc401f15 	stw	r17,124(sp)
    1730:	008001c4 	movi	r2,7
    1734:	14400e16 	blt	r2,r17,1770 <___vfprintf_internal_r+0x11e4>
    1738:	b2000204 	addi	r8,r22,8
    173c:	003e1806 	br	fa0 <___vfprintf_internal_r+0xa14>
    1740:	01000074 	movhi	r4,1
    1744:	21002284 	addi	r4,r4,138
    1748:	d9002c15 	stw	r4,176(sp)
    174c:	d9002c17 	ldw	r4,176(sp)
    1750:	1c07883a 	add	r3,r3,r16
    1754:	44000115 	stw	r16,4(r8)
    1758:	41000015 	stw	r4,0(r8)
    175c:	10800044 	addi	r2,r2,1
    1760:	d8c02015 	stw	r3,128(sp)
    1764:	d8801f15 	stw	r2,124(sp)
    1768:	010001c4 	movi	r4,7
    176c:	20be0b0e 	bge	r4,r2,f9c <___vfprintf_internal_r+0xa10>
    1770:	d9002d17 	ldw	r4,180(sp)
    1774:	d9801e04 	addi	r6,sp,120
    1778:	b80b883a 	mov	r5,r23
    177c:	0007d6c0 	call	7d6c <__sprint_r>
    1780:	103c861e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1784:	d8c02017 	ldw	r3,128(sp)
    1788:	da000404 	addi	r8,sp,16
    178c:	003e0406 	br	fa0 <___vfprintf_internal_r+0xa14>
    1790:	d9002d17 	ldw	r4,180(sp)
    1794:	d9801e04 	addi	r6,sp,120
    1798:	b80b883a 	mov	r5,r23
    179c:	0007d6c0 	call	7d6c <__sprint_r>
    17a0:	103e3b26 	beq	r2,zero,1090 <___vfprintf_internal_r+0xb04>
    17a4:	003c7d06 	br	99c <___vfprintf_internal_r+0x410>
    17a8:	d9002d17 	ldw	r4,180(sp)
    17ac:	d9801e04 	addi	r6,sp,120
    17b0:	b80b883a 	mov	r5,r23
    17b4:	0007d6c0 	call	7d6c <__sprint_r>
    17b8:	103c781e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    17bc:	d8c02017 	ldw	r3,128(sp)
    17c0:	da000404 	addi	r8,sp,16
    17c4:	003de906 	br	f6c <___vfprintf_internal_r+0x9e0>
    17c8:	d9002d17 	ldw	r4,180(sp)
    17cc:	d9801e04 	addi	r6,sp,120
    17d0:	b80b883a 	mov	r5,r23
    17d4:	0007d6c0 	call	7d6c <__sprint_r>
    17d8:	103c701e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    17dc:	d8c02017 	ldw	r3,128(sp)
    17e0:	da000404 	addi	r8,sp,16
    17e4:	003d9b06 	br	e54 <___vfprintf_internal_r+0x8c8>
    17e8:	d9002d17 	ldw	r4,180(sp)
    17ec:	d9801e04 	addi	r6,sp,120
    17f0:	b80b883a 	mov	r5,r23
    17f4:	0007d6c0 	call	7d6c <__sprint_r>
    17f8:	103c681e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    17fc:	d8c02017 	ldw	r3,128(sp)
    1800:	da000404 	addi	r8,sp,16
    1804:	003da106 	br	e8c <___vfprintf_internal_r+0x900>
    1808:	d9402a17 	ldw	r5,168(sp)
    180c:	d8002785 	stb	zero,158(sp)
    1810:	283f0616 	blt	r5,zero,142c <___vfprintf_internal_r+0xea0>
    1814:	00ffdfc4 	movi	r3,-129
    1818:	9d84b03a 	or	r2,r19,r22
    181c:	90e4703a 	and	r18,r18,r3
    1820:	103c3b26 	beq	r2,zero,910 <___vfprintf_internal_r+0x384>
    1824:	0039883a 	mov	fp,zero
    1828:	003e5806 	br	118c <___vfprintf_internal_r+0xc00>
    182c:	9080040c 	andi	r2,r18,16
    1830:	1001b326 	beq	r2,zero,1f00 <___vfprintf_internal_r+0x1974>
    1834:	d8c02e17 	ldw	r3,184(sp)
    1838:	d9002a17 	ldw	r4,168(sp)
    183c:	d8002785 	stb	zero,158(sp)
    1840:	18800104 	addi	r2,r3,4
    1844:	1cc00017 	ldw	r19,0(r3)
    1848:	002d883a 	mov	r22,zero
    184c:	2001b516 	blt	r4,zero,1f24 <___vfprintf_internal_r+0x1998>
    1850:	00ffdfc4 	movi	r3,-129
    1854:	d8802e15 	stw	r2,184(sp)
    1858:	90e4703a 	and	r18,r18,r3
    185c:	983d0526 	beq	r19,zero,c74 <___vfprintf_internal_r+0x6e8>
    1860:	0039883a 	mov	fp,zero
    1864:	003d0806 	br	c88 <___vfprintf_internal_r+0x6fc>
    1868:	dc402617 	ldw	r17,152(sp)
    186c:	0441d30e 	bge	zero,r17,1fbc <___vfprintf_internal_r+0x1a30>
    1870:	dc403217 	ldw	r17,200(sp)
    1874:	d8803317 	ldw	r2,204(sp)
    1878:	1440010e 	bge	r2,r17,1880 <___vfprintf_internal_r+0x12f4>
    187c:	1023883a 	mov	r17,r2
    1880:	04400a0e 	bge	zero,r17,18ac <___vfprintf_internal_r+0x1320>
    1884:	d8801f17 	ldw	r2,124(sp)
    1888:	1c47883a 	add	r3,r3,r17
    188c:	44000015 	stw	r16,0(r8)
    1890:	10800044 	addi	r2,r2,1
    1894:	44400115 	stw	r17,4(r8)
    1898:	d8c02015 	stw	r3,128(sp)
    189c:	d8801f15 	stw	r2,124(sp)
    18a0:	010001c4 	movi	r4,7
    18a4:	20826516 	blt	r4,r2,223c <___vfprintf_internal_r+0x1cb0>
    18a8:	42000204 	addi	r8,r8,8
    18ac:	88026116 	blt	r17,zero,2234 <___vfprintf_internal_r+0x1ca8>
    18b0:	d9003217 	ldw	r4,200(sp)
    18b4:	2463c83a 	sub	r17,r4,r17
    18b8:	04407b0e 	bge	zero,r17,1aa8 <___vfprintf_internal_r+0x151c>
    18bc:	05800404 	movi	r22,16
    18c0:	d8801f17 	ldw	r2,124(sp)
    18c4:	b4419d0e 	bge	r22,r17,1f3c <___vfprintf_internal_r+0x19b0>
    18c8:	01000074 	movhi	r4,1
    18cc:	21002284 	addi	r4,r4,138
    18d0:	d9002c15 	stw	r4,176(sp)
    18d4:	070001c4 	movi	fp,7
    18d8:	dcc02d17 	ldw	r19,180(sp)
    18dc:	00000306 	br	18ec <___vfprintf_internal_r+0x1360>
    18e0:	42000204 	addi	r8,r8,8
    18e4:	8c7ffc04 	addi	r17,r17,-16
    18e8:	b441970e 	bge	r22,r17,1f48 <___vfprintf_internal_r+0x19bc>
    18ec:	18c00404 	addi	r3,r3,16
    18f0:	10800044 	addi	r2,r2,1
    18f4:	45000015 	stw	r20,0(r8)
    18f8:	45800115 	stw	r22,4(r8)
    18fc:	d8c02015 	stw	r3,128(sp)
    1900:	d8801f15 	stw	r2,124(sp)
    1904:	e0bff60e 	bge	fp,r2,18e0 <___vfprintf_internal_r+0x1354>
    1908:	d9801e04 	addi	r6,sp,120
    190c:	b80b883a 	mov	r5,r23
    1910:	9809883a 	mov	r4,r19
    1914:	0007d6c0 	call	7d6c <__sprint_r>
    1918:	103c201e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    191c:	d8c02017 	ldw	r3,128(sp)
    1920:	d8801f17 	ldw	r2,124(sp)
    1924:	da000404 	addi	r8,sp,16
    1928:	003fee06 	br	18e4 <___vfprintf_internal_r+0x1358>
    192c:	d9002d17 	ldw	r4,180(sp)
    1930:	d9801e04 	addi	r6,sp,120
    1934:	b80b883a 	mov	r5,r23
    1938:	0007d6c0 	call	7d6c <__sprint_r>
    193c:	103c171e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1940:	d8c02017 	ldw	r3,128(sp)
    1944:	df002787 	ldb	fp,158(sp)
    1948:	da000404 	addi	r8,sp,16
    194c:	003d3406 	br	e20 <___vfprintf_internal_r+0x894>
    1950:	9080040c 	andi	r2,r18,16
    1954:	10016126 	beq	r2,zero,1edc <___vfprintf_internal_r+0x1950>
    1958:	d9402e17 	ldw	r5,184(sp)
    195c:	2cc00017 	ldw	r19,0(r5)
    1960:	29400104 	addi	r5,r5,4
    1964:	d9402e15 	stw	r5,184(sp)
    1968:	982dd7fa 	srai	r22,r19,31
    196c:	b005883a 	mov	r2,r22
    1970:	003c5a06 	br	adc <___vfprintf_internal_r+0x550>
    1974:	9080040c 	andi	r2,r18,16
    1978:	10003526 	beq	r2,zero,1a50 <___vfprintf_internal_r+0x14c4>
    197c:	d8c02e17 	ldw	r3,184(sp)
    1980:	d9002a17 	ldw	r4,168(sp)
    1984:	d8002785 	stb	zero,158(sp)
    1988:	18800104 	addi	r2,r3,4
    198c:	1cc00017 	ldw	r19,0(r3)
    1990:	002d883a 	mov	r22,zero
    1994:	20003716 	blt	r4,zero,1a74 <___vfprintf_internal_r+0x14e8>
    1998:	00ffdfc4 	movi	r3,-129
    199c:	d8802e15 	stw	r2,184(sp)
    19a0:	90e4703a 	and	r18,r18,r3
    19a4:	0039883a 	mov	fp,zero
    19a8:	983dd426 	beq	r19,zero,10fc <___vfprintf_internal_r+0xb70>
    19ac:	00800244 	movi	r2,9
    19b0:	14fc5336 	bltu	r2,r19,b00 <___vfprintf_internal_r+0x574>
    19b4:	d8c02817 	ldw	r3,160(sp)
    19b8:	dc001dc4 	addi	r16,sp,119
    19bc:	9cc00c04 	addi	r19,r19,48
    19c0:	1c07c83a 	sub	r3,r3,r16
    19c4:	dcc01dc5 	stb	r19,119(sp)
    19c8:	d8c02b15 	stw	r3,172(sp)
    19cc:	003cc606 	br	ce8 <___vfprintf_internal_r+0x75c>
    19d0:	d8803317 	ldw	r2,204(sp)
    19d4:	143fffc4 	addi	r16,r2,-1
    19d8:	043f4d0e 	bge	zero,r16,1710 <___vfprintf_internal_r+0x1184>
    19dc:	07000404 	movi	fp,16
    19e0:	e400810e 	bge	fp,r16,1be8 <___vfprintf_internal_r+0x165c>
    19e4:	01400074 	movhi	r5,1
    19e8:	29402284 	addi	r5,r5,138
    19ec:	d9402c15 	stw	r5,176(sp)
    19f0:	01c001c4 	movi	r7,7
    19f4:	dcc02d17 	ldw	r19,180(sp)
    19f8:	00000306 	br	1a08 <___vfprintf_internal_r+0x147c>
    19fc:	b5800204 	addi	r22,r22,8
    1a00:	843ffc04 	addi	r16,r16,-16
    1a04:	e4007b0e 	bge	fp,r16,1bf4 <___vfprintf_internal_r+0x1668>
    1a08:	18c00404 	addi	r3,r3,16
    1a0c:	8c400044 	addi	r17,r17,1
    1a10:	b5000015 	stw	r20,0(r22)
    1a14:	b7000115 	stw	fp,4(r22)
    1a18:	d8c02015 	stw	r3,128(sp)
    1a1c:	dc401f15 	stw	r17,124(sp)
    1a20:	3c7ff60e 	bge	r7,r17,19fc <___vfprintf_internal_r+0x1470>
    1a24:	d9801e04 	addi	r6,sp,120
    1a28:	b80b883a 	mov	r5,r23
    1a2c:	9809883a 	mov	r4,r19
    1a30:	d9c03c15 	stw	r7,240(sp)
    1a34:	0007d6c0 	call	7d6c <__sprint_r>
    1a38:	d9c03c17 	ldw	r7,240(sp)
    1a3c:	103bd71e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1a40:	d8c02017 	ldw	r3,128(sp)
    1a44:	dc401f17 	ldw	r17,124(sp)
    1a48:	dd800404 	addi	r22,sp,16
    1a4c:	003fec06 	br	1a00 <___vfprintf_internal_r+0x1474>
    1a50:	9080100c 	andi	r2,r18,64
    1a54:	d8002785 	stb	zero,158(sp)
    1a58:	10010e26 	beq	r2,zero,1e94 <___vfprintf_internal_r+0x1908>
    1a5c:	d9402e17 	ldw	r5,184(sp)
    1a60:	d8c02a17 	ldw	r3,168(sp)
    1a64:	002d883a 	mov	r22,zero
    1a68:	28800104 	addi	r2,r5,4
    1a6c:	2cc0000b 	ldhu	r19,0(r5)
    1a70:	183fc90e 	bge	r3,zero,1998 <___vfprintf_internal_r+0x140c>
    1a74:	d8802e15 	stw	r2,184(sp)
    1a78:	0039883a 	mov	fp,zero
    1a7c:	9d84b03a 	or	r2,r19,r22
    1a80:	103c1e1e 	bne	r2,zero,afc <___vfprintf_internal_r+0x570>
    1a84:	00800044 	movi	r2,1
    1a88:	003e6c06 	br	143c <___vfprintf_internal_r+0xeb0>
    1a8c:	d9002d17 	ldw	r4,180(sp)
    1a90:	d9801e04 	addi	r6,sp,120
    1a94:	b80b883a 	mov	r5,r23
    1a98:	0007d6c0 	call	7d6c <__sprint_r>
    1a9c:	103bbf1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1aa0:	d8c02017 	ldw	r3,128(sp)
    1aa4:	da000404 	addi	r8,sp,16
    1aa8:	d9003217 	ldw	r4,200(sp)
    1aac:	d8802617 	ldw	r2,152(sp)
    1ab0:	d9403317 	ldw	r5,204(sp)
    1ab4:	8123883a 	add	r17,r16,r4
    1ab8:	11400216 	blt	r2,r5,1ac4 <___vfprintf_internal_r+0x1538>
    1abc:	9100004c 	andi	r4,r18,1
    1ac0:	20000d26 	beq	r4,zero,1af8 <___vfprintf_internal_r+0x156c>
    1ac4:	d9003717 	ldw	r4,220(sp)
    1ac8:	d9403417 	ldw	r5,208(sp)
    1acc:	1907883a 	add	r3,r3,r4
    1ad0:	d9001f17 	ldw	r4,124(sp)
    1ad4:	41400015 	stw	r5,0(r8)
    1ad8:	d9403717 	ldw	r5,220(sp)
    1adc:	21000044 	addi	r4,r4,1
    1ae0:	d8c02015 	stw	r3,128(sp)
    1ae4:	41400115 	stw	r5,4(r8)
    1ae8:	d9001f15 	stw	r4,124(sp)
    1aec:	014001c4 	movi	r5,7
    1af0:	2901e816 	blt	r5,r4,2294 <___vfprintf_internal_r+0x1d08>
    1af4:	42000204 	addi	r8,r8,8
    1af8:	d9003317 	ldw	r4,204(sp)
    1afc:	8121883a 	add	r16,r16,r4
    1b00:	2085c83a 	sub	r2,r4,r2
    1b04:	8461c83a 	sub	r16,r16,r17
    1b08:	1400010e 	bge	r2,r16,1b10 <___vfprintf_internal_r+0x1584>
    1b0c:	1021883a 	mov	r16,r2
    1b10:	04000a0e 	bge	zero,r16,1b3c <___vfprintf_internal_r+0x15b0>
    1b14:	d9001f17 	ldw	r4,124(sp)
    1b18:	1c07883a 	add	r3,r3,r16
    1b1c:	44400015 	stw	r17,0(r8)
    1b20:	21000044 	addi	r4,r4,1
    1b24:	44000115 	stw	r16,4(r8)
    1b28:	d8c02015 	stw	r3,128(sp)
    1b2c:	d9001f15 	stw	r4,124(sp)
    1b30:	014001c4 	movi	r5,7
    1b34:	2901fb16 	blt	r5,r4,2324 <___vfprintf_internal_r+0x1d98>
    1b38:	42000204 	addi	r8,r8,8
    1b3c:	8001f716 	blt	r16,zero,231c <___vfprintf_internal_r+0x1d90>
    1b40:	1421c83a 	sub	r16,r2,r16
    1b44:	043d160e 	bge	zero,r16,fa0 <___vfprintf_internal_r+0xa14>
    1b48:	04400404 	movi	r17,16
    1b4c:	d8801f17 	ldw	r2,124(sp)
    1b50:	8c3efb0e 	bge	r17,r16,1740 <___vfprintf_internal_r+0x11b4>
    1b54:	01400074 	movhi	r5,1
    1b58:	29402284 	addi	r5,r5,138
    1b5c:	d9402c15 	stw	r5,176(sp)
    1b60:	058001c4 	movi	r22,7
    1b64:	dcc02d17 	ldw	r19,180(sp)
    1b68:	00000306 	br	1b78 <___vfprintf_internal_r+0x15ec>
    1b6c:	42000204 	addi	r8,r8,8
    1b70:	843ffc04 	addi	r16,r16,-16
    1b74:	8c3ef50e 	bge	r17,r16,174c <___vfprintf_internal_r+0x11c0>
    1b78:	18c00404 	addi	r3,r3,16
    1b7c:	10800044 	addi	r2,r2,1
    1b80:	45000015 	stw	r20,0(r8)
    1b84:	44400115 	stw	r17,4(r8)
    1b88:	d8c02015 	stw	r3,128(sp)
    1b8c:	d8801f15 	stw	r2,124(sp)
    1b90:	b0bff60e 	bge	r22,r2,1b6c <___vfprintf_internal_r+0x15e0>
    1b94:	d9801e04 	addi	r6,sp,120
    1b98:	b80b883a 	mov	r5,r23
    1b9c:	9809883a 	mov	r4,r19
    1ba0:	0007d6c0 	call	7d6c <__sprint_r>
    1ba4:	103b7d1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1ba8:	d8c02017 	ldw	r3,128(sp)
    1bac:	d8801f17 	ldw	r2,124(sp)
    1bb0:	da000404 	addi	r8,sp,16
    1bb4:	003fee06 	br	1b70 <___vfprintf_internal_r+0x15e4>
    1bb8:	9088703a 	and	r4,r18,r2
    1bbc:	203eab1e 	bne	r4,zero,166c <___vfprintf_internal_r+0x10e0>
    1bc0:	dc401f17 	ldw	r17,124(sp)
    1bc4:	40800115 	stw	r2,4(r8)
    1bc8:	44000015 	stw	r16,0(r8)
    1bcc:	8c400044 	addi	r17,r17,1
    1bd0:	d8c02015 	stw	r3,128(sp)
    1bd4:	dc401f15 	stw	r17,124(sp)
    1bd8:	008001c4 	movi	r2,7
    1bdc:	14400e16 	blt	r2,r17,1c18 <___vfprintf_internal_r+0x168c>
    1be0:	45800204 	addi	r22,r8,8
    1be4:	003eca06 	br	1710 <___vfprintf_internal_r+0x1184>
    1be8:	01000074 	movhi	r4,1
    1bec:	21002284 	addi	r4,r4,138
    1bf0:	d9002c15 	stw	r4,176(sp)
    1bf4:	d8802c17 	ldw	r2,176(sp)
    1bf8:	1c07883a 	add	r3,r3,r16
    1bfc:	8c400044 	addi	r17,r17,1
    1c00:	b0800015 	stw	r2,0(r22)
    1c04:	b4000115 	stw	r16,4(r22)
    1c08:	d8c02015 	stw	r3,128(sp)
    1c0c:	dc401f15 	stw	r17,124(sp)
    1c10:	008001c4 	movi	r2,7
    1c14:	147ebd0e 	bge	r2,r17,170c <___vfprintf_internal_r+0x1180>
    1c18:	d9002d17 	ldw	r4,180(sp)
    1c1c:	d9801e04 	addi	r6,sp,120
    1c20:	b80b883a 	mov	r5,r23
    1c24:	0007d6c0 	call	7d6c <__sprint_r>
    1c28:	103b5c1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1c2c:	d8c02017 	ldw	r3,128(sp)
    1c30:	dc401f17 	ldw	r17,124(sp)
    1c34:	dd800404 	addi	r22,sp,16
    1c38:	003eb506 	br	1710 <___vfprintf_internal_r+0x1184>
    1c3c:	d9002d17 	ldw	r4,180(sp)
    1c40:	d9801e04 	addi	r6,sp,120
    1c44:	b80b883a 	mov	r5,r23
    1c48:	0007d6c0 	call	7d6c <__sprint_r>
    1c4c:	103b531e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1c50:	d8c02017 	ldw	r3,128(sp)
    1c54:	dc401f17 	ldw	r17,124(sp)
    1c58:	da000404 	addi	r8,sp,16
    1c5c:	003e8d06 	br	1694 <___vfprintf_internal_r+0x1108>
    1c60:	d9002d17 	ldw	r4,180(sp)
    1c64:	d9801e04 	addi	r6,sp,120
    1c68:	b80b883a 	mov	r5,r23
    1c6c:	0007d6c0 	call	7d6c <__sprint_r>
    1c70:	103b4a1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1c74:	d8c02017 	ldw	r3,128(sp)
    1c78:	dc401f17 	ldw	r17,124(sp)
    1c7c:	dd800404 	addi	r22,sp,16
    1c80:	003e8f06 	br	16c0 <___vfprintf_internal_r+0x1134>
    1c84:	0027883a 	mov	r19,zero
    1c88:	003f4a06 	br	19b4 <___vfprintf_internal_r+0x1428>
    1c8c:	d9002d17 	ldw	r4,180(sp)
    1c90:	d9801e04 	addi	r6,sp,120
    1c94:	b80b883a 	mov	r5,r23
    1c98:	0007d6c0 	call	7d6c <__sprint_r>
    1c9c:	103b3f1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1ca0:	d8c02017 	ldw	r3,128(sp)
    1ca4:	da000404 	addi	r8,sp,16
    1ca8:	003c7b06 	br	e98 <___vfprintf_internal_r+0x90c>
    1cac:	d9402a17 	ldw	r5,168(sp)
    1cb0:	04e7c83a 	sub	r19,zero,r19
    1cb4:	07000b44 	movi	fp,45
    1cb8:	9804c03a 	cmpne	r2,r19,zero
    1cbc:	05adc83a 	sub	r22,zero,r22
    1cc0:	df002785 	stb	fp,158(sp)
    1cc4:	b0adc83a 	sub	r22,r22,r2
    1cc8:	28017b16 	blt	r5,zero,22b8 <___vfprintf_internal_r+0x1d2c>
    1ccc:	00bfdfc4 	movi	r2,-129
    1cd0:	90a4703a 	and	r18,r18,r2
    1cd4:	003b8906 	br	afc <___vfprintf_internal_r+0x570>
    1cd8:	d9003617 	ldw	r4,216(sp)
    1cdc:	d9403817 	ldw	r5,224(sp)
    1ce0:	da003d15 	stw	r8,244(sp)
    1ce4:	00079900 	call	7990 <__fpclassifyd>
    1ce8:	da003d17 	ldw	r8,244(sp)
    1cec:	1000f026 	beq	r2,zero,20b0 <___vfprintf_internal_r+0x1b24>
    1cf0:	d9002a17 	ldw	r4,168(sp)
    1cf4:	05bff7c4 	movi	r22,-33
    1cf8:	00bfffc4 	movi	r2,-1
    1cfc:	8dac703a 	and	r22,r17,r22
    1d00:	20820026 	beq	r4,r2,2504 <___vfprintf_internal_r+0x1f78>
    1d04:	008011c4 	movi	r2,71
    1d08:	b081f726 	beq	r22,r2,24e8 <___vfprintf_internal_r+0x1f5c>
    1d0c:	d9003817 	ldw	r4,224(sp)
    1d10:	90c04014 	ori	r3,r18,256
    1d14:	d8c02c15 	stw	r3,176(sp)
    1d18:	20021516 	blt	r4,zero,2570 <___vfprintf_internal_r+0x1fe4>
    1d1c:	dcc03817 	ldw	r19,224(sp)
    1d20:	d8002905 	stb	zero,164(sp)
    1d24:	00801984 	movi	r2,102
    1d28:	8881f926 	beq	r17,r2,2510 <___vfprintf_internal_r+0x1f84>
    1d2c:	00801184 	movi	r2,70
    1d30:	88821c26 	beq	r17,r2,25a4 <___vfprintf_internal_r+0x2018>
    1d34:	00801144 	movi	r2,69
    1d38:	b081ef26 	beq	r22,r2,24f8 <___vfprintf_internal_r+0x1f6c>
    1d3c:	d8c02a17 	ldw	r3,168(sp)
    1d40:	d8802104 	addi	r2,sp,132
    1d44:	d8800315 	stw	r2,12(sp)
    1d48:	d9403617 	ldw	r5,216(sp)
    1d4c:	d8802504 	addi	r2,sp,148
    1d50:	d9002d17 	ldw	r4,180(sp)
    1d54:	d8800215 	stw	r2,8(sp)
    1d58:	d8802604 	addi	r2,sp,152
    1d5c:	d8c00015 	stw	r3,0(sp)
    1d60:	d8800115 	stw	r2,4(sp)
    1d64:	01c00084 	movi	r7,2
    1d68:	980d883a 	mov	r6,r19
    1d6c:	d8c03c15 	stw	r3,240(sp)
    1d70:	da003d15 	stw	r8,244(sp)
    1d74:	0002cbc0 	call	2cbc <_dtoa_r>
    1d78:	1021883a 	mov	r16,r2
    1d7c:	008019c4 	movi	r2,103
    1d80:	d8c03c17 	ldw	r3,240(sp)
    1d84:	da003d17 	ldw	r8,244(sp)
    1d88:	88817126 	beq	r17,r2,2350 <___vfprintf_internal_r+0x1dc4>
    1d8c:	008011c4 	movi	r2,71
    1d90:	88829126 	beq	r17,r2,27d8 <___vfprintf_internal_r+0x224c>
    1d94:	80f9883a 	add	fp,r16,r3
    1d98:	d9003617 	ldw	r4,216(sp)
    1d9c:	000d883a 	mov	r6,zero
    1da0:	000f883a 	mov	r7,zero
    1da4:	980b883a 	mov	r5,r19
    1da8:	da003d15 	stw	r8,244(sp)
    1dac:	000bccc0 	call	bccc <__eqdf2>
    1db0:	da003d17 	ldw	r8,244(sp)
    1db4:	10018d26 	beq	r2,zero,23ec <___vfprintf_internal_r+0x1e60>
    1db8:	d8802117 	ldw	r2,132(sp)
    1dbc:	1700062e 	bgeu	r2,fp,1dd8 <___vfprintf_internal_r+0x184c>
    1dc0:	01000c04 	movi	r4,48
    1dc4:	10c00044 	addi	r3,r2,1
    1dc8:	d8c02115 	stw	r3,132(sp)
    1dcc:	11000005 	stb	r4,0(r2)
    1dd0:	d8802117 	ldw	r2,132(sp)
    1dd4:	173ffb36 	bltu	r2,fp,1dc4 <___vfprintf_internal_r+0x1838>
    1dd8:	1405c83a 	sub	r2,r2,r16
    1ddc:	d8803315 	stw	r2,204(sp)
    1de0:	008011c4 	movi	r2,71
    1de4:	b0817626 	beq	r22,r2,23c0 <___vfprintf_internal_r+0x1e34>
    1de8:	00801944 	movi	r2,101
    1dec:	1442800e 	bge	r2,r17,27f0 <___vfprintf_internal_r+0x2264>
    1df0:	d8c02617 	ldw	r3,152(sp)
    1df4:	00801984 	movi	r2,102
    1df8:	d8c03215 	stw	r3,200(sp)
    1dfc:	8881fe26 	beq	r17,r2,25f8 <___vfprintf_internal_r+0x206c>
    1e00:	d8c03217 	ldw	r3,200(sp)
    1e04:	d9003317 	ldw	r4,204(sp)
    1e08:	1901dd16 	blt	r3,r4,2580 <___vfprintf_internal_r+0x1ff4>
    1e0c:	9480004c 	andi	r18,r18,1
    1e10:	90022b1e 	bne	r18,zero,26c0 <___vfprintf_internal_r+0x2134>
    1e14:	1805883a 	mov	r2,r3
    1e18:	18028316 	blt	r3,zero,2828 <___vfprintf_internal_r+0x229c>
    1e1c:	d8c03217 	ldw	r3,200(sp)
    1e20:	044019c4 	movi	r17,103
    1e24:	d8c02b15 	stw	r3,172(sp)
    1e28:	df002907 	ldb	fp,164(sp)
    1e2c:	e001531e 	bne	fp,zero,237c <___vfprintf_internal_r+0x1df0>
    1e30:	df002783 	ldbu	fp,158(sp)
    1e34:	d8802915 	stw	r2,164(sp)
    1e38:	dc802c17 	ldw	r18,176(sp)
    1e3c:	d8002a15 	stw	zero,168(sp)
    1e40:	003baf06 	br	d00 <___vfprintf_internal_r+0x774>
    1e44:	d8c02e17 	ldw	r3,184(sp)
    1e48:	d9002e17 	ldw	r4,184(sp)
    1e4c:	d9402e17 	ldw	r5,184(sp)
    1e50:	18c00017 	ldw	r3,0(r3)
    1e54:	21000117 	ldw	r4,4(r4)
    1e58:	29400204 	addi	r5,r5,8
    1e5c:	d8c03615 	stw	r3,216(sp)
    1e60:	d9003815 	stw	r4,224(sp)
    1e64:	d9402e15 	stw	r5,184(sp)
    1e68:	003b5006 	br	bac <___vfprintf_internal_r+0x620>
    1e6c:	ac400007 	ldb	r17,0(r21)
    1e70:	003a2806 	br	714 <___vfprintf_internal_r+0x188>
    1e74:	9080100c 	andi	r2,r18,64
    1e78:	1000a826 	beq	r2,zero,211c <___vfprintf_internal_r+0x1b90>
    1e7c:	d8c02e17 	ldw	r3,184(sp)
    1e80:	002d883a 	mov	r22,zero
    1e84:	1cc0000b 	ldhu	r19,0(r3)
    1e88:	18c00104 	addi	r3,r3,4
    1e8c:	d8c02e15 	stw	r3,184(sp)
    1e90:	003caf06 	br	1150 <___vfprintf_internal_r+0xbc4>
    1e94:	d9002e17 	ldw	r4,184(sp)
    1e98:	d9402a17 	ldw	r5,168(sp)
    1e9c:	002d883a 	mov	r22,zero
    1ea0:	20800104 	addi	r2,r4,4
    1ea4:	24c00017 	ldw	r19,0(r4)
    1ea8:	283ebb0e 	bge	r5,zero,1998 <___vfprintf_internal_r+0x140c>
    1eac:	003ef106 	br	1a74 <___vfprintf_internal_r+0x14e8>
    1eb0:	9080040c 	andi	r2,r18,16
    1eb4:	1000921e 	bne	r2,zero,2100 <___vfprintf_internal_r+0x1b74>
    1eb8:	9480100c 	andi	r18,r18,64
    1ebc:	90013926 	beq	r18,zero,23a4 <___vfprintf_internal_r+0x1e18>
    1ec0:	d9402e17 	ldw	r5,184(sp)
    1ec4:	d8c02f17 	ldw	r3,188(sp)
    1ec8:	28800017 	ldw	r2,0(r5)
    1ecc:	29400104 	addi	r5,r5,4
    1ed0:	d9402e15 	stw	r5,184(sp)
    1ed4:	10c0000d 	sth	r3,0(r2)
    1ed8:	0039e406 	br	66c <___vfprintf_internal_r+0xe0>
    1edc:	9080100c 	andi	r2,r18,64
    1ee0:	10008026 	beq	r2,zero,20e4 <___vfprintf_internal_r+0x1b58>
    1ee4:	d8802e17 	ldw	r2,184(sp)
    1ee8:	14c0000f 	ldh	r19,0(r2)
    1eec:	10800104 	addi	r2,r2,4
    1ef0:	d8802e15 	stw	r2,184(sp)
    1ef4:	982dd7fa 	srai	r22,r19,31
    1ef8:	b005883a 	mov	r2,r22
    1efc:	003af706 	br	adc <___vfprintf_internal_r+0x550>
    1f00:	9080100c 	andi	r2,r18,64
    1f04:	d8002785 	stb	zero,158(sp)
    1f08:	10008a1e 	bne	r2,zero,2134 <___vfprintf_internal_r+0x1ba8>
    1f0c:	d9002e17 	ldw	r4,184(sp)
    1f10:	d9402a17 	ldw	r5,168(sp)
    1f14:	002d883a 	mov	r22,zero
    1f18:	20800104 	addi	r2,r4,4
    1f1c:	24c00017 	ldw	r19,0(r4)
    1f20:	283e4b0e 	bge	r5,zero,1850 <___vfprintf_internal_r+0x12c4>
    1f24:	9d86b03a 	or	r3,r19,r22
    1f28:	d8802e15 	stw	r2,184(sp)
    1f2c:	183e4c1e 	bne	r3,zero,1860 <___vfprintf_internal_r+0x12d4>
    1f30:	0039883a 	mov	fp,zero
    1f34:	0005883a 	mov	r2,zero
    1f38:	003d4006 	br	143c <___vfprintf_internal_r+0xeb0>
    1f3c:	01400074 	movhi	r5,1
    1f40:	29402284 	addi	r5,r5,138
    1f44:	d9402c15 	stw	r5,176(sp)
    1f48:	d9402c17 	ldw	r5,176(sp)
    1f4c:	1c47883a 	add	r3,r3,r17
    1f50:	10800044 	addi	r2,r2,1
    1f54:	41400015 	stw	r5,0(r8)
    1f58:	44400115 	stw	r17,4(r8)
    1f5c:	d8c02015 	stw	r3,128(sp)
    1f60:	d8801f15 	stw	r2,124(sp)
    1f64:	010001c4 	movi	r4,7
    1f68:	20bec816 	blt	r4,r2,1a8c <___vfprintf_internal_r+0x1500>
    1f6c:	42000204 	addi	r8,r8,8
    1f70:	003ecd06 	br	1aa8 <___vfprintf_internal_r+0x151c>
    1f74:	d9002a17 	ldw	r4,168(sp)
    1f78:	d8002785 	stb	zero,158(sp)
    1f7c:	203d2d16 	blt	r4,zero,1434 <___vfprintf_internal_r+0xea8>
    1f80:	00bfdfc4 	movi	r2,-129
    1f84:	90a4703a 	and	r18,r18,r2
    1f88:	003a6106 	br	910 <___vfprintf_internal_r+0x384>
    1f8c:	01000074 	movhi	r4,1
    1f90:	21002284 	addi	r4,r4,138
    1f94:	d9002c15 	stw	r4,176(sp)
    1f98:	003bea06 	br	f44 <___vfprintf_internal_r+0x9b8>
    1f9c:	d9002d17 	ldw	r4,180(sp)
    1fa0:	d9801e04 	addi	r6,sp,120
    1fa4:	b80b883a 	mov	r5,r23
    1fa8:	0007d6c0 	call	7d6c <__sprint_r>
    1fac:	103a7b1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    1fb0:	d8c02017 	ldw	r3,128(sp)
    1fb4:	da000404 	addi	r8,sp,16
    1fb8:	003d4106 	br	14c0 <___vfprintf_internal_r+0xf34>
    1fbc:	d8801f17 	ldw	r2,124(sp)
    1fc0:	01400074 	movhi	r5,1
    1fc4:	01000044 	movi	r4,1
    1fc8:	18c00044 	addi	r3,r3,1
    1fcc:	10800044 	addi	r2,r2,1
    1fd0:	29402204 	addi	r5,r5,136
    1fd4:	41000115 	stw	r4,4(r8)
    1fd8:	41400015 	stw	r5,0(r8)
    1fdc:	d8c02015 	stw	r3,128(sp)
    1fe0:	d8801f15 	stw	r2,124(sp)
    1fe4:	010001c4 	movi	r4,7
    1fe8:	20805c16 	blt	r4,r2,215c <___vfprintf_internal_r+0x1bd0>
    1fec:	42000204 	addi	r8,r8,8
    1ff0:	8800041e 	bne	r17,zero,2004 <___vfprintf_internal_r+0x1a78>
    1ff4:	d8803317 	ldw	r2,204(sp)
    1ff8:	1000021e 	bne	r2,zero,2004 <___vfprintf_internal_r+0x1a78>
    1ffc:	9080004c 	andi	r2,r18,1
    2000:	103be726 	beq	r2,zero,fa0 <___vfprintf_internal_r+0xa14>
    2004:	d9003717 	ldw	r4,220(sp)
    2008:	d8801f17 	ldw	r2,124(sp)
    200c:	d9403417 	ldw	r5,208(sp)
    2010:	20c7883a 	add	r3,r4,r3
    2014:	10800044 	addi	r2,r2,1
    2018:	41000115 	stw	r4,4(r8)
    201c:	41400015 	stw	r5,0(r8)
    2020:	d8c02015 	stw	r3,128(sp)
    2024:	d8801f15 	stw	r2,124(sp)
    2028:	010001c4 	movi	r4,7
    202c:	20812116 	blt	r4,r2,24b4 <___vfprintf_internal_r+0x1f28>
    2030:	42000204 	addi	r8,r8,8
    2034:	0463c83a 	sub	r17,zero,r17
    2038:	0440730e 	bge	zero,r17,2208 <___vfprintf_internal_r+0x1c7c>
    203c:	05800404 	movi	r22,16
    2040:	b440860e 	bge	r22,r17,225c <___vfprintf_internal_r+0x1cd0>
    2044:	01400074 	movhi	r5,1
    2048:	29402284 	addi	r5,r5,138
    204c:	d9402c15 	stw	r5,176(sp)
    2050:	070001c4 	movi	fp,7
    2054:	dcc02d17 	ldw	r19,180(sp)
    2058:	00000306 	br	2068 <___vfprintf_internal_r+0x1adc>
    205c:	42000204 	addi	r8,r8,8
    2060:	8c7ffc04 	addi	r17,r17,-16
    2064:	b440800e 	bge	r22,r17,2268 <___vfprintf_internal_r+0x1cdc>
    2068:	18c00404 	addi	r3,r3,16
    206c:	10800044 	addi	r2,r2,1
    2070:	45000015 	stw	r20,0(r8)
    2074:	45800115 	stw	r22,4(r8)
    2078:	d8c02015 	stw	r3,128(sp)
    207c:	d8801f15 	stw	r2,124(sp)
    2080:	e0bff60e 	bge	fp,r2,205c <___vfprintf_internal_r+0x1ad0>
    2084:	d9801e04 	addi	r6,sp,120
    2088:	b80b883a 	mov	r5,r23
    208c:	9809883a 	mov	r4,r19
    2090:	0007d6c0 	call	7d6c <__sprint_r>
    2094:	103a411e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    2098:	d8c02017 	ldw	r3,128(sp)
    209c:	d8801f17 	ldw	r2,124(sp)
    20a0:	da000404 	addi	r8,sp,16
    20a4:	003fee06 	br	2060 <___vfprintf_internal_r+0x1ad4>
    20a8:	00bfffc4 	movi	r2,-1
    20ac:	003a3f06 	br	9ac <___vfprintf_internal_r+0x420>
    20b0:	008011c4 	movi	r2,71
    20b4:	1440b816 	blt	r2,r17,2398 <___vfprintf_internal_r+0x1e0c>
    20b8:	04000074 	movhi	r16,1
    20bc:	84001404 	addi	r16,r16,80
    20c0:	00c000c4 	movi	r3,3
    20c4:	00bfdfc4 	movi	r2,-129
    20c8:	d8c02915 	stw	r3,164(sp)
    20cc:	90a4703a 	and	r18,r18,r2
    20d0:	df002783 	ldbu	fp,158(sp)
    20d4:	d8c02b15 	stw	r3,172(sp)
    20d8:	d8002a15 	stw	zero,168(sp)
    20dc:	d8003215 	stw	zero,200(sp)
    20e0:	003b0706 	br	d00 <___vfprintf_internal_r+0x774>
    20e4:	d8c02e17 	ldw	r3,184(sp)
    20e8:	1cc00017 	ldw	r19,0(r3)
    20ec:	18c00104 	addi	r3,r3,4
    20f0:	d8c02e15 	stw	r3,184(sp)
    20f4:	982dd7fa 	srai	r22,r19,31
    20f8:	b005883a 	mov	r2,r22
    20fc:	003a7706 	br	adc <___vfprintf_internal_r+0x550>
    2100:	d8c02e17 	ldw	r3,184(sp)
    2104:	d9002f17 	ldw	r4,188(sp)
    2108:	18800017 	ldw	r2,0(r3)
    210c:	18c00104 	addi	r3,r3,4
    2110:	d8c02e15 	stw	r3,184(sp)
    2114:	11000015 	stw	r4,0(r2)
    2118:	00395406 	br	66c <___vfprintf_internal_r+0xe0>
    211c:	d9002e17 	ldw	r4,184(sp)
    2120:	002d883a 	mov	r22,zero
    2124:	24c00017 	ldw	r19,0(r4)
    2128:	21000104 	addi	r4,r4,4
    212c:	d9002e15 	stw	r4,184(sp)
    2130:	003c0706 	br	1150 <___vfprintf_internal_r+0xbc4>
    2134:	d9402e17 	ldw	r5,184(sp)
    2138:	d8c02a17 	ldw	r3,168(sp)
    213c:	002d883a 	mov	r22,zero
    2140:	28800104 	addi	r2,r5,4
    2144:	2cc0000b 	ldhu	r19,0(r5)
    2148:	183dc10e 	bge	r3,zero,1850 <___vfprintf_internal_r+0x12c4>
    214c:	003f7506 	br	1f24 <___vfprintf_internal_r+0x1998>
    2150:	04000074 	movhi	r16,1
    2154:	84001204 	addi	r16,r16,72
    2158:	003aa706 	br	bf8 <___vfprintf_internal_r+0x66c>
    215c:	d9002d17 	ldw	r4,180(sp)
    2160:	d9801e04 	addi	r6,sp,120
    2164:	b80b883a 	mov	r5,r23
    2168:	0007d6c0 	call	7d6c <__sprint_r>
    216c:	103a0b1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    2170:	dc402617 	ldw	r17,152(sp)
    2174:	d8c02017 	ldw	r3,128(sp)
    2178:	da000404 	addi	r8,sp,16
    217c:	003f9c06 	br	1ff0 <___vfprintf_internal_r+0x1a64>
    2180:	ac400043 	ldbu	r17,1(r21)
    2184:	84000814 	ori	r16,r16,32
    2188:	ad400044 	addi	r21,r21,1
    218c:	8c403fcc 	andi	r17,r17,255
    2190:	8c40201c 	xori	r17,r17,128
    2194:	8c7fe004 	addi	r17,r17,-128
    2198:	00395e06 	br	714 <___vfprintf_internal_r+0x188>
    219c:	d8c02e15 	stw	r3,184(sp)
    21a0:	0039883a 	mov	fp,zero
    21a4:	003e3506 	br	1a7c <___vfprintf_internal_r+0x14f0>
    21a8:	d9002d17 	ldw	r4,180(sp)
    21ac:	d9801e04 	addi	r6,sp,120
    21b0:	b80b883a 	mov	r5,r23
    21b4:	0007d6c0 	call	7d6c <__sprint_r>
    21b8:	1039f81e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    21bc:	d8c02017 	ldw	r3,128(sp)
    21c0:	da000404 	addi	r8,sp,16
    21c4:	003cd006 	br	1508 <___vfprintf_internal_r+0xf7c>
    21c8:	8009883a 	mov	r4,r16
    21cc:	df003d15 	stw	fp,244(sp)
    21d0:	00004f40 	call	4f4 <strlen>
    21d4:	d8802b15 	stw	r2,172(sp)
    21d8:	da003d17 	ldw	r8,244(sp)
    21dc:	103c200e 	bge	r2,zero,1260 <___vfprintf_internal_r+0xcd4>
    21e0:	0005883a 	mov	r2,zero
    21e4:	003c1e06 	br	1260 <___vfprintf_internal_r+0xcd4>
    21e8:	d9002d17 	ldw	r4,180(sp)
    21ec:	d9801e04 	addi	r6,sp,120
    21f0:	b80b883a 	mov	r5,r23
    21f4:	0007d6c0 	call	7d6c <__sprint_r>
    21f8:	1039e81e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    21fc:	d8c02017 	ldw	r3,128(sp)
    2200:	d8801f17 	ldw	r2,124(sp)
    2204:	da000404 	addi	r8,sp,16
    2208:	d9403317 	ldw	r5,204(sp)
    220c:	10800044 	addi	r2,r2,1
    2210:	44000015 	stw	r16,0(r8)
    2214:	28c7883a 	add	r3,r5,r3
    2218:	003b5b06 	br	f88 <___vfprintf_internal_r+0x9fc>
    221c:	01000074 	movhi	r4,1
    2220:	21002684 	addi	r4,r4,154
    2224:	d9003515 	stw	r4,212(sp)
    2228:	003af206 	br	df4 <___vfprintf_internal_r+0x868>
    222c:	013fffc4 	movi	r4,-1
    2230:	003a0806 	br	a54 <___vfprintf_internal_r+0x4c8>
    2234:	0023883a 	mov	r17,zero
    2238:	003d9d06 	br	18b0 <___vfprintf_internal_r+0x1324>
    223c:	d9002d17 	ldw	r4,180(sp)
    2240:	d9801e04 	addi	r6,sp,120
    2244:	b80b883a 	mov	r5,r23
    2248:	0007d6c0 	call	7d6c <__sprint_r>
    224c:	1039d31e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    2250:	d8c02017 	ldw	r3,128(sp)
    2254:	da000404 	addi	r8,sp,16
    2258:	003d9406 	br	18ac <___vfprintf_internal_r+0x1320>
    225c:	01000074 	movhi	r4,1
    2260:	21002284 	addi	r4,r4,138
    2264:	d9002c15 	stw	r4,176(sp)
    2268:	d9002c17 	ldw	r4,176(sp)
    226c:	1c47883a 	add	r3,r3,r17
    2270:	10800044 	addi	r2,r2,1
    2274:	41000015 	stw	r4,0(r8)
    2278:	44400115 	stw	r17,4(r8)
    227c:	d8c02015 	stw	r3,128(sp)
    2280:	d8801f15 	stw	r2,124(sp)
    2284:	010001c4 	movi	r4,7
    2288:	20bfd716 	blt	r4,r2,21e8 <___vfprintf_internal_r+0x1c5c>
    228c:	42000204 	addi	r8,r8,8
    2290:	003fdd06 	br	2208 <___vfprintf_internal_r+0x1c7c>
    2294:	d9002d17 	ldw	r4,180(sp)
    2298:	d9801e04 	addi	r6,sp,120
    229c:	b80b883a 	mov	r5,r23
    22a0:	0007d6c0 	call	7d6c <__sprint_r>
    22a4:	1039bd1e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    22a8:	d8802617 	ldw	r2,152(sp)
    22ac:	d8c02017 	ldw	r3,128(sp)
    22b0:	da000404 	addi	r8,sp,16
    22b4:	003e1006 	br	1af8 <___vfprintf_internal_r+0x156c>
    22b8:	00800044 	movi	r2,1
    22bc:	10803fcc 	andi	r2,r2,255
    22c0:	00c00044 	movi	r3,1
    22c4:	10fa0d26 	beq	r2,r3,afc <___vfprintf_internal_r+0x570>
    22c8:	00c00084 	movi	r3,2
    22cc:	10fbaf26 	beq	r2,r3,118c <___vfprintf_internal_r+0xc00>
    22d0:	003a6d06 	br	c88 <___vfprintf_internal_r+0x6fc>
    22d4:	01000074 	movhi	r4,1
    22d8:	21002684 	addi	r4,r4,154
    22dc:	d9003515 	stw	r4,212(sp)
    22e0:	003b5406 	br	1034 <___vfprintf_internal_r+0xaa8>
    22e4:	d8802a17 	ldw	r2,168(sp)
    22e8:	00c00184 	movi	r3,6
    22ec:	1880012e 	bgeu	r3,r2,22f4 <___vfprintf_internal_r+0x1d68>
    22f0:	1805883a 	mov	r2,r3
    22f4:	d8802b15 	stw	r2,172(sp)
    22f8:	1000ef16 	blt	r2,zero,26b8 <___vfprintf_internal_r+0x212c>
    22fc:	04000074 	movhi	r16,1
    2300:	d8802915 	stw	r2,164(sp)
    2304:	dcc02e15 	stw	r19,184(sp)
    2308:	d8002a15 	stw	zero,168(sp)
    230c:	d8003215 	stw	zero,200(sp)
    2310:	84002004 	addi	r16,r16,128
    2314:	0039883a 	mov	fp,zero
    2318:	003a8006 	br	d1c <___vfprintf_internal_r+0x790>
    231c:	0021883a 	mov	r16,zero
    2320:	003e0706 	br	1b40 <___vfprintf_internal_r+0x15b4>
    2324:	d9002d17 	ldw	r4,180(sp)
    2328:	d9801e04 	addi	r6,sp,120
    232c:	b80b883a 	mov	r5,r23
    2330:	0007d6c0 	call	7d6c <__sprint_r>
    2334:	1039991e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    2338:	d8802617 	ldw	r2,152(sp)
    233c:	d9403317 	ldw	r5,204(sp)
    2340:	d8c02017 	ldw	r3,128(sp)
    2344:	da000404 	addi	r8,sp,16
    2348:	2885c83a 	sub	r2,r5,r2
    234c:	003dfb06 	br	1b3c <___vfprintf_internal_r+0x15b0>
    2350:	9080004c 	andi	r2,r18,1
    2354:	103e8f1e 	bne	r2,zero,1d94 <___vfprintf_internal_r+0x1808>
    2358:	d8802117 	ldw	r2,132(sp)
    235c:	003e9e06 	br	1dd8 <___vfprintf_internal_r+0x184c>
    2360:	1025883a 	mov	r18,r2
    2364:	0039883a 	mov	fp,zero
    2368:	00800084 	movi	r2,2
    236c:	003fd306 	br	22bc <___vfprintf_internal_r+0x1d30>
    2370:	07000b44 	movi	fp,45
    2374:	df002785 	stb	fp,158(sp)
    2378:	003a1b06 	br	be8 <___vfprintf_internal_r+0x65c>
    237c:	00c00b44 	movi	r3,45
    2380:	d8c02785 	stb	r3,158(sp)
    2384:	d8802915 	stw	r2,164(sp)
    2388:	dc802c17 	ldw	r18,176(sp)
    238c:	d8002a15 	stw	zero,168(sp)
    2390:	07000b44 	movi	fp,45
    2394:	003a5e06 	br	d10 <___vfprintf_internal_r+0x784>
    2398:	04000074 	movhi	r16,1
    239c:	84001504 	addi	r16,r16,84
    23a0:	003f4706 	br	20c0 <___vfprintf_internal_r+0x1b34>
    23a4:	d9002e17 	ldw	r4,184(sp)
    23a8:	d9402f17 	ldw	r5,188(sp)
    23ac:	20800017 	ldw	r2,0(r4)
    23b0:	21000104 	addi	r4,r4,4
    23b4:	d9002e15 	stw	r4,184(sp)
    23b8:	11400015 	stw	r5,0(r2)
    23bc:	0038ab06 	br	66c <___vfprintf_internal_r+0xe0>
    23c0:	dd802617 	ldw	r22,152(sp)
    23c4:	00bfff44 	movi	r2,-3
    23c8:	b0801c16 	blt	r22,r2,243c <___vfprintf_internal_r+0x1eb0>
    23cc:	d9402a17 	ldw	r5,168(sp)
    23d0:	2d801a16 	blt	r5,r22,243c <___vfprintf_internal_r+0x1eb0>
    23d4:	dd803215 	stw	r22,200(sp)
    23d8:	003e8906 	br	1e00 <___vfprintf_internal_r+0x1874>
    23dc:	01000074 	movhi	r4,1
    23e0:	21002284 	addi	r4,r4,138
    23e4:	d9002c15 	stw	r4,176(sp)
    23e8:	003c9106 	br	1630 <___vfprintf_internal_r+0x10a4>
    23ec:	e005883a 	mov	r2,fp
    23f0:	003e7906 	br	1dd8 <___vfprintf_internal_r+0x184c>
    23f4:	d9002a17 	ldw	r4,168(sp)
    23f8:	df002783 	ldbu	fp,158(sp)
    23fc:	dcc02e15 	stw	r19,184(sp)
    2400:	d9002915 	stw	r4,164(sp)
    2404:	d9002b15 	stw	r4,172(sp)
    2408:	d8002a15 	stw	zero,168(sp)
    240c:	d8003215 	stw	zero,200(sp)
    2410:	003a3b06 	br	d00 <___vfprintf_internal_r+0x774>
    2414:	9080004c 	andi	r2,r18,1
    2418:	0039883a 	mov	fp,zero
    241c:	10000426 	beq	r2,zero,2430 <___vfprintf_internal_r+0x1ea4>
    2420:	00800c04 	movi	r2,48
    2424:	dc001dc4 	addi	r16,sp,119
    2428:	d8801dc5 	stb	r2,119(sp)
    242c:	003b6406 	br	11c0 <___vfprintf_internal_r+0xc34>
    2430:	d8002b15 	stw	zero,172(sp)
    2434:	dc001e04 	addi	r16,sp,120
    2438:	003a2b06 	br	ce8 <___vfprintf_internal_r+0x75c>
    243c:	8c7fff84 	addi	r17,r17,-2
    2440:	b5bfffc4 	addi	r22,r22,-1
    2444:	dd802615 	stw	r22,152(sp)
    2448:	dc4022c5 	stb	r17,139(sp)
    244c:	b000bf16 	blt	r22,zero,274c <___vfprintf_internal_r+0x21c0>
    2450:	00800ac4 	movi	r2,43
    2454:	d8802305 	stb	r2,140(sp)
    2458:	00800244 	movi	r2,9
    245c:	15807016 	blt	r2,r22,2620 <___vfprintf_internal_r+0x2094>
    2460:	00800c04 	movi	r2,48
    2464:	b5800c04 	addi	r22,r22,48
    2468:	d8802345 	stb	r2,141(sp)
    246c:	dd802385 	stb	r22,142(sp)
    2470:	d88023c4 	addi	r2,sp,143
    2474:	df0022c4 	addi	fp,sp,139
    2478:	d8c03317 	ldw	r3,204(sp)
    247c:	1739c83a 	sub	fp,r2,fp
    2480:	d9003317 	ldw	r4,204(sp)
    2484:	e0c7883a 	add	r3,fp,r3
    2488:	df003a15 	stw	fp,232(sp)
    248c:	d8c02b15 	stw	r3,172(sp)
    2490:	00800044 	movi	r2,1
    2494:	1100b30e 	bge	r2,r4,2764 <___vfprintf_internal_r+0x21d8>
    2498:	d8c02b17 	ldw	r3,172(sp)
    249c:	18c00044 	addi	r3,r3,1
    24a0:	d8c02b15 	stw	r3,172(sp)
    24a4:	1805883a 	mov	r2,r3
    24a8:	1800ac16 	blt	r3,zero,275c <___vfprintf_internal_r+0x21d0>
    24ac:	d8003215 	stw	zero,200(sp)
    24b0:	003e5d06 	br	1e28 <___vfprintf_internal_r+0x189c>
    24b4:	d9002d17 	ldw	r4,180(sp)
    24b8:	d9801e04 	addi	r6,sp,120
    24bc:	b80b883a 	mov	r5,r23
    24c0:	0007d6c0 	call	7d6c <__sprint_r>
    24c4:	1039351e 	bne	r2,zero,99c <___vfprintf_internal_r+0x410>
    24c8:	dc402617 	ldw	r17,152(sp)
    24cc:	d8c02017 	ldw	r3,128(sp)
    24d0:	d8801f17 	ldw	r2,124(sp)
    24d4:	da000404 	addi	r8,sp,16
    24d8:	003ed606 	br	2034 <___vfprintf_internal_r+0x1aa8>
    24dc:	182b883a 	mov	r21,r3
    24e0:	d8002a15 	stw	zero,168(sp)
    24e4:	00388c06 	br	718 <___vfprintf_internal_r+0x18c>
    24e8:	d8802a17 	ldw	r2,168(sp)
    24ec:	103e071e 	bne	r2,zero,1d0c <___vfprintf_internal_r+0x1780>
    24f0:	dc002a15 	stw	r16,168(sp)
    24f4:	003e0506 	br	1d0c <___vfprintf_internal_r+0x1780>
    24f8:	d9002a17 	ldw	r4,168(sp)
    24fc:	20c00044 	addi	r3,r4,1
    2500:	003e0f06 	br	1d40 <___vfprintf_internal_r+0x17b4>
    2504:	01400184 	movi	r5,6
    2508:	d9402a15 	stw	r5,168(sp)
    250c:	003dff06 	br	1d0c <___vfprintf_internal_r+0x1780>
    2510:	d8802104 	addi	r2,sp,132
    2514:	d8800315 	stw	r2,12(sp)
    2518:	d8802504 	addi	r2,sp,148
    251c:	d8800215 	stw	r2,8(sp)
    2520:	d8802604 	addi	r2,sp,152
    2524:	d8800115 	stw	r2,4(sp)
    2528:	d8802a17 	ldw	r2,168(sp)
    252c:	d9403617 	ldw	r5,216(sp)
    2530:	d9002d17 	ldw	r4,180(sp)
    2534:	d8800015 	stw	r2,0(sp)
    2538:	01c000c4 	movi	r7,3
    253c:	980d883a 	mov	r6,r19
    2540:	da003d15 	stw	r8,244(sp)
    2544:	0002cbc0 	call	2cbc <_dtoa_r>
    2548:	d8c02a17 	ldw	r3,168(sp)
    254c:	da003d17 	ldw	r8,244(sp)
    2550:	1021883a 	mov	r16,r2
    2554:	10f9883a 	add	fp,r2,r3
    2558:	81000007 	ldb	r4,0(r16)
    255c:	00800c04 	movi	r2,48
    2560:	20805e26 	beq	r4,r2,26dc <___vfprintf_internal_r+0x2150>
    2564:	d8c02617 	ldw	r3,152(sp)
    2568:	e0f9883a 	add	fp,fp,r3
    256c:	003e0a06 	br	1d98 <___vfprintf_internal_r+0x180c>
    2570:	00c00b44 	movi	r3,45
    2574:	24e0003c 	xorhi	r19,r4,32768
    2578:	d8c02905 	stb	r3,164(sp)
    257c:	003de906 	br	1d24 <___vfprintf_internal_r+0x1798>
    2580:	d8c03217 	ldw	r3,200(sp)
    2584:	00c07a0e 	bge	zero,r3,2770 <___vfprintf_internal_r+0x21e4>
    2588:	00800044 	movi	r2,1
    258c:	d9003317 	ldw	r4,204(sp)
    2590:	1105883a 	add	r2,r2,r4
    2594:	d8802b15 	stw	r2,172(sp)
    2598:	10004e16 	blt	r2,zero,26d4 <___vfprintf_internal_r+0x2148>
    259c:	044019c4 	movi	r17,103
    25a0:	003e2106 	br	1e28 <___vfprintf_internal_r+0x189c>
    25a4:	d9002a17 	ldw	r4,168(sp)
    25a8:	d8802104 	addi	r2,sp,132
    25ac:	d8800315 	stw	r2,12(sp)
    25b0:	d9000015 	stw	r4,0(sp)
    25b4:	d8802504 	addi	r2,sp,148
    25b8:	d9403617 	ldw	r5,216(sp)
    25bc:	d9002d17 	ldw	r4,180(sp)
    25c0:	d8800215 	stw	r2,8(sp)
    25c4:	d8802604 	addi	r2,sp,152
    25c8:	d8800115 	stw	r2,4(sp)
    25cc:	01c000c4 	movi	r7,3
    25d0:	980d883a 	mov	r6,r19
    25d4:	da003d15 	stw	r8,244(sp)
    25d8:	0002cbc0 	call	2cbc <_dtoa_r>
    25dc:	d8c02a17 	ldw	r3,168(sp)
    25e0:	da003d17 	ldw	r8,244(sp)
    25e4:	1021883a 	mov	r16,r2
    25e8:	00801184 	movi	r2,70
    25ec:	80f9883a 	add	fp,r16,r3
    25f0:	88bfd926 	beq	r17,r2,2558 <___vfprintf_internal_r+0x1fcc>
    25f4:	003de806 	br	1d98 <___vfprintf_internal_r+0x180c>
    25f8:	d9002a17 	ldw	r4,168(sp)
    25fc:	00c04d0e 	bge	zero,r3,2734 <___vfprintf_internal_r+0x21a8>
    2600:	2000441e 	bne	r4,zero,2714 <___vfprintf_internal_r+0x2188>
    2604:	9480004c 	andi	r18,r18,1
    2608:	9000421e 	bne	r18,zero,2714 <___vfprintf_internal_r+0x2188>
    260c:	1805883a 	mov	r2,r3
    2610:	18006f16 	blt	r3,zero,27d0 <___vfprintf_internal_r+0x2244>
    2614:	d8c03217 	ldw	r3,200(sp)
    2618:	d8c02b15 	stw	r3,172(sp)
    261c:	003e0206 	br	1e28 <___vfprintf_internal_r+0x189c>
    2620:	df0022c4 	addi	fp,sp,139
    2624:	dc002a15 	stw	r16,168(sp)
    2628:	4027883a 	mov	r19,r8
    262c:	e021883a 	mov	r16,fp
    2630:	b009883a 	mov	r4,r22
    2634:	01400284 	movi	r5,10
    2638:	000a8f80 	call	a8f8 <__modsi3>
    263c:	10800c04 	addi	r2,r2,48
    2640:	843fffc4 	addi	r16,r16,-1
    2644:	b009883a 	mov	r4,r22
    2648:	01400284 	movi	r5,10
    264c:	80800005 	stb	r2,0(r16)
    2650:	000a8740 	call	a874 <__divsi3>
    2654:	102d883a 	mov	r22,r2
    2658:	00800244 	movi	r2,9
    265c:	15bff416 	blt	r2,r22,2630 <___vfprintf_internal_r+0x20a4>
    2660:	9811883a 	mov	r8,r19
    2664:	b0800c04 	addi	r2,r22,48
    2668:	8027883a 	mov	r19,r16
    266c:	997fffc4 	addi	r5,r19,-1
    2670:	98bfffc5 	stb	r2,-1(r19)
    2674:	dc002a17 	ldw	r16,168(sp)
    2678:	2f006d2e 	bgeu	r5,fp,2830 <___vfprintf_internal_r+0x22a4>
    267c:	d9c02384 	addi	r7,sp,142
    2680:	3ccfc83a 	sub	r7,r7,r19
    2684:	d9002344 	addi	r4,sp,141
    2688:	e1cf883a 	add	r7,fp,r7
    268c:	00000106 	br	2694 <___vfprintf_internal_r+0x2108>
    2690:	28800003 	ldbu	r2,0(r5)
    2694:	20800005 	stb	r2,0(r4)
    2698:	21000044 	addi	r4,r4,1
    269c:	29400044 	addi	r5,r5,1
    26a0:	393ffb1e 	bne	r7,r4,2690 <___vfprintf_internal_r+0x2104>
    26a4:	d8802304 	addi	r2,sp,140
    26a8:	14c5c83a 	sub	r2,r2,r19
    26ac:	d8c02344 	addi	r3,sp,141
    26b0:	1885883a 	add	r2,r3,r2
    26b4:	003f7006 	br	2478 <___vfprintf_internal_r+0x1eec>
    26b8:	0005883a 	mov	r2,zero
    26bc:	003f0f06 	br	22fc <___vfprintf_internal_r+0x1d70>
    26c0:	d8c03217 	ldw	r3,200(sp)
    26c4:	18c00044 	addi	r3,r3,1
    26c8:	d8c02b15 	stw	r3,172(sp)
    26cc:	1805883a 	mov	r2,r3
    26d0:	183fb20e 	bge	r3,zero,259c <___vfprintf_internal_r+0x2010>
    26d4:	0005883a 	mov	r2,zero
    26d8:	003fb006 	br	259c <___vfprintf_internal_r+0x2010>
    26dc:	d9003617 	ldw	r4,216(sp)
    26e0:	000d883a 	mov	r6,zero
    26e4:	000f883a 	mov	r7,zero
    26e8:	980b883a 	mov	r5,r19
    26ec:	d8c03c15 	stw	r3,240(sp)
    26f0:	da003d15 	stw	r8,244(sp)
    26f4:	000bccc0 	call	bccc <__eqdf2>
    26f8:	d8c03c17 	ldw	r3,240(sp)
    26fc:	da003d17 	ldw	r8,244(sp)
    2700:	103f9826 	beq	r2,zero,2564 <___vfprintf_internal_r+0x1fd8>
    2704:	00800044 	movi	r2,1
    2708:	10c7c83a 	sub	r3,r2,r3
    270c:	d8c02615 	stw	r3,152(sp)
    2710:	003f9506 	br	2568 <___vfprintf_internal_r+0x1fdc>
    2714:	d9002a17 	ldw	r4,168(sp)
    2718:	d8c03217 	ldw	r3,200(sp)
    271c:	20800044 	addi	r2,r4,1
    2720:	1885883a 	add	r2,r3,r2
    2724:	d8802b15 	stw	r2,172(sp)
    2728:	103dbf0e 	bge	r2,zero,1e28 <___vfprintf_internal_r+0x189c>
    272c:	0005883a 	mov	r2,zero
    2730:	003dbd06 	br	1e28 <___vfprintf_internal_r+0x189c>
    2734:	2000201e 	bne	r4,zero,27b8 <___vfprintf_internal_r+0x222c>
    2738:	9480004c 	andi	r18,r18,1
    273c:	90001e1e 	bne	r18,zero,27b8 <___vfprintf_internal_r+0x222c>
    2740:	00800044 	movi	r2,1
    2744:	d8802b15 	stw	r2,172(sp)
    2748:	003db706 	br	1e28 <___vfprintf_internal_r+0x189c>
    274c:	00800b44 	movi	r2,45
    2750:	05adc83a 	sub	r22,zero,r22
    2754:	d8802305 	stb	r2,140(sp)
    2758:	003f3f06 	br	2458 <___vfprintf_internal_r+0x1ecc>
    275c:	0005883a 	mov	r2,zero
    2760:	003f5206 	br	24ac <___vfprintf_internal_r+0x1f20>
    2764:	90a4703a 	and	r18,r18,r2
    2768:	903f4e26 	beq	r18,zero,24a4 <___vfprintf_internal_r+0x1f18>
    276c:	003f4a06 	br	2498 <___vfprintf_internal_r+0x1f0c>
    2770:	00800084 	movi	r2,2
    2774:	10c5c83a 	sub	r2,r2,r3
    2778:	003f8406 	br	258c <___vfprintf_internal_r+0x2000>
    277c:	d9402e17 	ldw	r5,184(sp)
    2780:	d9002e17 	ldw	r4,184(sp)
    2784:	ac400043 	ldbu	r17,1(r21)
    2788:	29400017 	ldw	r5,0(r5)
    278c:	20800104 	addi	r2,r4,4
    2790:	d8802e15 	stw	r2,184(sp)
    2794:	d9402a15 	stw	r5,168(sp)
    2798:	182b883a 	mov	r21,r3
    279c:	283e7b0e 	bge	r5,zero,218c <___vfprintf_internal_r+0x1c00>
    27a0:	8c403fcc 	andi	r17,r17,255
    27a4:	017fffc4 	movi	r5,-1
    27a8:	8c40201c 	xori	r17,r17,128
    27ac:	d9402a15 	stw	r5,168(sp)
    27b0:	8c7fe004 	addi	r17,r17,-128
    27b4:	0037d706 	br	714 <___vfprintf_internal_r+0x188>
    27b8:	d8c02a17 	ldw	r3,168(sp)
    27bc:	18c00084 	addi	r3,r3,2
    27c0:	d8c02b15 	stw	r3,172(sp)
    27c4:	1805883a 	mov	r2,r3
    27c8:	183d970e 	bge	r3,zero,1e28 <___vfprintf_internal_r+0x189c>
    27cc:	003fd706 	br	272c <___vfprintf_internal_r+0x21a0>
    27d0:	0005883a 	mov	r2,zero
    27d4:	003f8f06 	br	2614 <___vfprintf_internal_r+0x2088>
    27d8:	9080004c 	andi	r2,r18,1
    27dc:	103f821e 	bne	r2,zero,25e8 <___vfprintf_internal_r+0x205c>
    27e0:	d8802117 	ldw	r2,132(sp)
    27e4:	1405c83a 	sub	r2,r2,r16
    27e8:	d8803315 	stw	r2,204(sp)
    27ec:	b47ef426 	beq	r22,r17,23c0 <___vfprintf_internal_r+0x1e34>
    27f0:	dd802617 	ldw	r22,152(sp)
    27f4:	003f1206 	br	2440 <___vfprintf_internal_r+0x1eb4>
    27f8:	d8c02b03 	ldbu	r3,172(sp)
    27fc:	d8c02785 	stb	r3,158(sp)
    2800:	0038df06 	br	b80 <___vfprintf_internal_r+0x5f4>
    2804:	d8c02b03 	ldbu	r3,172(sp)
    2808:	d8c02785 	stb	r3,158(sp)
    280c:	0038aa06 	br	ab8 <___vfprintf_internal_r+0x52c>
    2810:	d8c02b03 	ldbu	r3,172(sp)
    2814:	d8c02785 	stb	r3,158(sp)
    2818:	003a4306 	br	1128 <___vfprintf_internal_r+0xb9c>
    281c:	d8c02b03 	ldbu	r3,172(sp)
    2820:	d8c02785 	stb	r3,158(sp)
    2824:	003af506 	br	13fc <___vfprintf_internal_r+0xe70>
    2828:	0005883a 	mov	r2,zero
    282c:	003d7b06 	br	1e1c <___vfprintf_internal_r+0x1890>
    2830:	d8802344 	addi	r2,sp,141
    2834:	003f1006 	br	2478 <___vfprintf_internal_r+0x1eec>
    2838:	d8c02b03 	ldbu	r3,172(sp)
    283c:	d8c02785 	stb	r3,158(sp)
    2840:	0038fd06 	br	c38 <___vfprintf_internal_r+0x6ac>
    2844:	d8c02b03 	ldbu	r3,172(sp)
    2848:	d8c02785 	stb	r3,158(sp)
    284c:	003a9706 	br	12ac <___vfprintf_internal_r+0xd20>
    2850:	d8c02b03 	ldbu	r3,172(sp)
    2854:	d8c02785 	stb	r3,158(sp)
    2858:	003a1806 	br	10bc <___vfprintf_internal_r+0xb30>
    285c:	d8c02b03 	ldbu	r3,172(sp)
    2860:	d8c02785 	stb	r3,158(sp)
    2864:	003abe06 	br	1360 <___vfprintf_internal_r+0xdd4>

00002868 <__vfprintf_internal>:
    2868:	00800074 	movhi	r2,1
    286c:	10877d04 	addi	r2,r2,7668
    2870:	300f883a 	mov	r7,r6
    2874:	280d883a 	mov	r6,r5
    2878:	200b883a 	mov	r5,r4
    287c:	11000017 	ldw	r4,0(r2)
    2880:	000058c1 	jmpi	58c <___vfprintf_internal_r>

00002884 <__sbprintf>:
    2884:	2880030b 	ldhu	r2,12(r5)
    2888:	2ac01917 	ldw	r11,100(r5)
    288c:	2a80038b 	ldhu	r10,14(r5)
    2890:	2a400717 	ldw	r9,28(r5)
    2894:	2a000917 	ldw	r8,36(r5)
    2898:	defee204 	addi	sp,sp,-1144
    289c:	00c10004 	movi	r3,1024
    28a0:	dc011a15 	stw	r16,1128(sp)
    28a4:	10bfff4c 	andi	r2,r2,65533
    28a8:	2821883a 	mov	r16,r5
    28ac:	d8cb883a 	add	r5,sp,r3
    28b0:	dc811c15 	stw	r18,1136(sp)
    28b4:	dc411b15 	stw	r17,1132(sp)
    28b8:	dfc11d15 	stw	ra,1140(sp)
    28bc:	2025883a 	mov	r18,r4
    28c0:	d881030d 	sth	r2,1036(sp)
    28c4:	dac11915 	stw	r11,1124(sp)
    28c8:	da81038d 	sth	r10,1038(sp)
    28cc:	da410715 	stw	r9,1052(sp)
    28d0:	da010915 	stw	r8,1060(sp)
    28d4:	dec10015 	stw	sp,1024(sp)
    28d8:	dec10415 	stw	sp,1040(sp)
    28dc:	d8c10215 	stw	r3,1032(sp)
    28e0:	d8c10515 	stw	r3,1044(sp)
    28e4:	d8010615 	stw	zero,1048(sp)
    28e8:	000058c0 	call	58c <___vfprintf_internal_r>
    28ec:	1023883a 	mov	r17,r2
    28f0:	10000416 	blt	r2,zero,2904 <__sbprintf+0x80>
    28f4:	d9410004 	addi	r5,sp,1024
    28f8:	9009883a 	mov	r4,r18
    28fc:	00045600 	call	4560 <_fflush_r>
    2900:	10000d1e 	bne	r2,zero,2938 <__sbprintf+0xb4>
    2904:	d881030b 	ldhu	r2,1036(sp)
    2908:	1080100c 	andi	r2,r2,64
    290c:	10000326 	beq	r2,zero,291c <__sbprintf+0x98>
    2910:	8080030b 	ldhu	r2,12(r16)
    2914:	10801014 	ori	r2,r2,64
    2918:	8080030d 	sth	r2,12(r16)
    291c:	8805883a 	mov	r2,r17
    2920:	dfc11d17 	ldw	ra,1140(sp)
    2924:	dc811c17 	ldw	r18,1136(sp)
    2928:	dc411b17 	ldw	r17,1132(sp)
    292c:	dc011a17 	ldw	r16,1128(sp)
    2930:	dec11e04 	addi	sp,sp,1144
    2934:	f800283a 	ret
    2938:	047fffc4 	movi	r17,-1
    293c:	003ff106 	br	2904 <__sbprintf+0x80>

00002940 <__swsetup_r>:
    2940:	00800074 	movhi	r2,1
    2944:	defffd04 	addi	sp,sp,-12
    2948:	10877d04 	addi	r2,r2,7668
    294c:	dc400115 	stw	r17,4(sp)
    2950:	2023883a 	mov	r17,r4
    2954:	11000017 	ldw	r4,0(r2)
    2958:	dc000015 	stw	r16,0(sp)
    295c:	dfc00215 	stw	ra,8(sp)
    2960:	2821883a 	mov	r16,r5
    2964:	20000226 	beq	r4,zero,2970 <__swsetup_r+0x30>
    2968:	20800e17 	ldw	r2,56(r4)
    296c:	10003126 	beq	r2,zero,2a34 <__swsetup_r+0xf4>
    2970:	8080030b 	ldhu	r2,12(r16)
    2974:	10c0020c 	andi	r3,r2,8
    2978:	1009883a 	mov	r4,r2
    297c:	18000f26 	beq	r3,zero,29bc <__swsetup_r+0x7c>
    2980:	80c00417 	ldw	r3,16(r16)
    2984:	18001526 	beq	r3,zero,29dc <__swsetup_r+0x9c>
    2988:	1100004c 	andi	r4,r2,1
    298c:	20001c1e 	bne	r4,zero,2a00 <__swsetup_r+0xc0>
    2990:	1080008c 	andi	r2,r2,2
    2994:	1000291e 	bne	r2,zero,2a3c <__swsetup_r+0xfc>
    2998:	80800517 	ldw	r2,20(r16)
    299c:	80800215 	stw	r2,8(r16)
    29a0:	18001c26 	beq	r3,zero,2a14 <__swsetup_r+0xd4>
    29a4:	0005883a 	mov	r2,zero
    29a8:	dfc00217 	ldw	ra,8(sp)
    29ac:	dc400117 	ldw	r17,4(sp)
    29b0:	dc000017 	ldw	r16,0(sp)
    29b4:	dec00304 	addi	sp,sp,12
    29b8:	f800283a 	ret
    29bc:	2080040c 	andi	r2,r4,16
    29c0:	10002e26 	beq	r2,zero,2a7c <__swsetup_r+0x13c>
    29c4:	2080010c 	andi	r2,r4,4
    29c8:	10001e1e 	bne	r2,zero,2a44 <__swsetup_r+0x104>
    29cc:	80c00417 	ldw	r3,16(r16)
    29d0:	20800214 	ori	r2,r4,8
    29d4:	8080030d 	sth	r2,12(r16)
    29d8:	183feb1e 	bne	r3,zero,2988 <__swsetup_r+0x48>
    29dc:	1100a00c 	andi	r4,r2,640
    29e0:	01408004 	movi	r5,512
    29e4:	217fe826 	beq	r4,r5,2988 <__swsetup_r+0x48>
    29e8:	800b883a 	mov	r5,r16
    29ec:	8809883a 	mov	r4,r17
    29f0:	00054fc0 	call	54fc <__smakebuf_r>
    29f4:	8080030b 	ldhu	r2,12(r16)
    29f8:	80c00417 	ldw	r3,16(r16)
    29fc:	003fe206 	br	2988 <__swsetup_r+0x48>
    2a00:	80800517 	ldw	r2,20(r16)
    2a04:	80000215 	stw	zero,8(r16)
    2a08:	0085c83a 	sub	r2,zero,r2
    2a0c:	80800615 	stw	r2,24(r16)
    2a10:	183fe41e 	bne	r3,zero,29a4 <__swsetup_r+0x64>
    2a14:	80c0030b 	ldhu	r3,12(r16)
    2a18:	0005883a 	mov	r2,zero
    2a1c:	1900200c 	andi	r4,r3,128
    2a20:	203fe126 	beq	r4,zero,29a8 <__swsetup_r+0x68>
    2a24:	18c01014 	ori	r3,r3,64
    2a28:	80c0030d 	sth	r3,12(r16)
    2a2c:	00bfffc4 	movi	r2,-1
    2a30:	003fdd06 	br	29a8 <__swsetup_r+0x68>
    2a34:	000494c0 	call	494c <__sinit>
    2a38:	003fcd06 	br	2970 <__swsetup_r+0x30>
    2a3c:	0005883a 	mov	r2,zero
    2a40:	003fd606 	br	299c <__swsetup_r+0x5c>
    2a44:	81400c17 	ldw	r5,48(r16)
    2a48:	28000626 	beq	r5,zero,2a64 <__swsetup_r+0x124>
    2a4c:	80801004 	addi	r2,r16,64
    2a50:	28800326 	beq	r5,r2,2a60 <__swsetup_r+0x120>
    2a54:	8809883a 	mov	r4,r17
    2a58:	0004ac00 	call	4ac0 <_free_r>
    2a5c:	8100030b 	ldhu	r4,12(r16)
    2a60:	80000c15 	stw	zero,48(r16)
    2a64:	80c00417 	ldw	r3,16(r16)
    2a68:	00bff6c4 	movi	r2,-37
    2a6c:	1108703a 	and	r4,r2,r4
    2a70:	80000115 	stw	zero,4(r16)
    2a74:	80c00015 	stw	r3,0(r16)
    2a78:	003fd506 	br	29d0 <__swsetup_r+0x90>
    2a7c:	00800244 	movi	r2,9
    2a80:	88800015 	stw	r2,0(r17)
    2a84:	20801014 	ori	r2,r4,64
    2a88:	8080030d 	sth	r2,12(r16)
    2a8c:	00bfffc4 	movi	r2,-1
    2a90:	003fc506 	br	29a8 <__swsetup_r+0x68>

00002a94 <quorem>:
    2a94:	defff204 	addi	sp,sp,-56
    2a98:	ddc00b15 	stw	r23,44(sp)
    2a9c:	20800417 	ldw	r2,16(r4)
    2aa0:	2dc00417 	ldw	r23,16(r5)
    2aa4:	dfc00d15 	stw	ra,52(sp)
    2aa8:	df000c15 	stw	fp,48(sp)
    2aac:	dd800a15 	stw	r22,40(sp)
    2ab0:	dd400915 	stw	r21,36(sp)
    2ab4:	dd000815 	stw	r20,32(sp)
    2ab8:	dcc00715 	stw	r19,28(sp)
    2abc:	dc800615 	stw	r18,24(sp)
    2ac0:	dc400515 	stw	r17,20(sp)
    2ac4:	dc000415 	stw	r16,16(sp)
    2ac8:	15c07a16 	blt	r2,r23,2cb4 <quorem+0x220>
    2acc:	bdffffc4 	addi	r23,r23,-1
    2ad0:	bde9883a 	add	r20,r23,r23
    2ad4:	28c00504 	addi	r3,r5,20
    2ad8:	a529883a 	add	r20,r20,r20
    2adc:	1d39883a 	add	fp,r3,r20
    2ae0:	24c00504 	addi	r19,r4,20
    2ae4:	d9400215 	stw	r5,8(sp)
    2ae8:	9d29883a 	add	r20,r19,r20
    2aec:	e1400017 	ldw	r5,0(fp)
    2af0:	d9000015 	stw	r4,0(sp)
    2af4:	a1000017 	ldw	r4,0(r20)
    2af8:	29400044 	addi	r5,r5,1
    2afc:	d8c00115 	stw	r3,4(sp)
    2b00:	dd000315 	stw	r20,12(sp)
    2b04:	000a96c0 	call	a96c <__udivsi3>
    2b08:	1025883a 	mov	r18,r2
    2b0c:	10003026 	beq	r2,zero,2bd0 <quorem+0x13c>
    2b10:	dc400117 	ldw	r17,4(sp)
    2b14:	9829883a 	mov	r20,r19
    2b18:	002d883a 	mov	r22,zero
    2b1c:	0021883a 	mov	r16,zero
    2b20:	8d400017 	ldw	r21,0(r17)
    2b24:	900b883a 	mov	r5,r18
    2b28:	8c400104 	addi	r17,r17,4
    2b2c:	a93fffcc 	andi	r4,r21,65535
    2b30:	000aa280 	call	aa28 <__mulsi3>
    2b34:	a808d43a 	srli	r4,r21,16
    2b38:	900b883a 	mov	r5,r18
    2b3c:	15ad883a 	add	r22,r2,r22
    2b40:	000aa280 	call	aa28 <__mulsi3>
    2b44:	a1000017 	ldw	r4,0(r20)
    2b48:	b00cd43a 	srli	r6,r22,16
    2b4c:	b0ffffcc 	andi	r3,r22,65535
    2b50:	217fffcc 	andi	r5,r4,65535
    2b54:	2c21883a 	add	r16,r5,r16
    2b58:	80c7c83a 	sub	r3,r16,r3
    2b5c:	2008d43a 	srli	r4,r4,16
    2b60:	1185883a 	add	r2,r2,r6
    2b64:	1821d43a 	srai	r16,r3,16
    2b68:	117fffcc 	andi	r5,r2,65535
    2b6c:	2149c83a 	sub	r4,r4,r5
    2b70:	2421883a 	add	r16,r4,r16
    2b74:	8008943a 	slli	r4,r16,16
    2b78:	18ffffcc 	andi	r3,r3,65535
    2b7c:	102cd43a 	srli	r22,r2,16
    2b80:	20c8b03a 	or	r4,r4,r3
    2b84:	a1000015 	stw	r4,0(r20)
    2b88:	8021d43a 	srai	r16,r16,16
    2b8c:	a5000104 	addi	r20,r20,4
    2b90:	e47fe32e 	bgeu	fp,r17,2b20 <quorem+0x8c>
    2b94:	d8c00317 	ldw	r3,12(sp)
    2b98:	18800017 	ldw	r2,0(r3)
    2b9c:	10000c1e 	bne	r2,zero,2bd0 <quorem+0x13c>
    2ba0:	18bfff04 	addi	r2,r3,-4
    2ba4:	9880082e 	bgeu	r19,r2,2bc8 <quorem+0x134>
    2ba8:	18ffff17 	ldw	r3,-4(r3)
    2bac:	18000326 	beq	r3,zero,2bbc <quorem+0x128>
    2bb0:	00000506 	br	2bc8 <quorem+0x134>
    2bb4:	10c00017 	ldw	r3,0(r2)
    2bb8:	1800031e 	bne	r3,zero,2bc8 <quorem+0x134>
    2bbc:	10bfff04 	addi	r2,r2,-4
    2bc0:	bdffffc4 	addi	r23,r23,-1
    2bc4:	98bffb36 	bltu	r19,r2,2bb4 <quorem+0x120>
    2bc8:	d8c00017 	ldw	r3,0(sp)
    2bcc:	1dc00415 	stw	r23,16(r3)
    2bd0:	d9400217 	ldw	r5,8(sp)
    2bd4:	d9000017 	ldw	r4,0(sp)
    2bd8:	0006cf80 	call	6cf8 <__mcmp>
    2bdc:	10002816 	blt	r2,zero,2c80 <quorem+0x1ec>
    2be0:	dc400117 	ldw	r17,4(sp)
    2be4:	94800044 	addi	r18,r18,1
    2be8:	980d883a 	mov	r6,r19
    2bec:	0007883a 	mov	r3,zero
    2bf0:	31000017 	ldw	r4,0(r6)
    2bf4:	89400017 	ldw	r5,0(r17)
    2bf8:	31800104 	addi	r6,r6,4
    2bfc:	20bfffcc 	andi	r2,r4,65535
    2c00:	10c7883a 	add	r3,r2,r3
    2c04:	28bfffcc 	andi	r2,r5,65535
    2c08:	1885c83a 	sub	r2,r3,r2
    2c0c:	280ad43a 	srli	r5,r5,16
    2c10:	2008d43a 	srli	r4,r4,16
    2c14:	1007d43a 	srai	r3,r2,16
    2c18:	10bfffcc 	andi	r2,r2,65535
    2c1c:	2149c83a 	sub	r4,r4,r5
    2c20:	20c9883a 	add	r4,r4,r3
    2c24:	200a943a 	slli	r5,r4,16
    2c28:	8c400104 	addi	r17,r17,4
    2c2c:	2007d43a 	srai	r3,r4,16
    2c30:	2884b03a 	or	r2,r5,r2
    2c34:	30bfff15 	stw	r2,-4(r6)
    2c38:	e47fed2e 	bgeu	fp,r17,2bf0 <quorem+0x15c>
    2c3c:	bdc5883a 	add	r2,r23,r23
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	9887883a 	add	r3,r19,r2
    2c48:	18800017 	ldw	r2,0(r3)
    2c4c:	10000c1e 	bne	r2,zero,2c80 <quorem+0x1ec>
    2c50:	18bfff04 	addi	r2,r3,-4
    2c54:	9880082e 	bgeu	r19,r2,2c78 <quorem+0x1e4>
    2c58:	18ffff17 	ldw	r3,-4(r3)
    2c5c:	18000326 	beq	r3,zero,2c6c <quorem+0x1d8>
    2c60:	00000506 	br	2c78 <quorem+0x1e4>
    2c64:	10c00017 	ldw	r3,0(r2)
    2c68:	1800031e 	bne	r3,zero,2c78 <quorem+0x1e4>
    2c6c:	10bfff04 	addi	r2,r2,-4
    2c70:	bdffffc4 	addi	r23,r23,-1
    2c74:	98bffb36 	bltu	r19,r2,2c64 <quorem+0x1d0>
    2c78:	d8c00017 	ldw	r3,0(sp)
    2c7c:	1dc00415 	stw	r23,16(r3)
    2c80:	9005883a 	mov	r2,r18
    2c84:	dfc00d17 	ldw	ra,52(sp)
    2c88:	df000c17 	ldw	fp,48(sp)
    2c8c:	ddc00b17 	ldw	r23,44(sp)
    2c90:	dd800a17 	ldw	r22,40(sp)
    2c94:	dd400917 	ldw	r21,36(sp)
    2c98:	dd000817 	ldw	r20,32(sp)
    2c9c:	dcc00717 	ldw	r19,28(sp)
    2ca0:	dc800617 	ldw	r18,24(sp)
    2ca4:	dc400517 	ldw	r17,20(sp)
    2ca8:	dc000417 	ldw	r16,16(sp)
    2cac:	dec00e04 	addi	sp,sp,56
    2cb0:	f800283a 	ret
    2cb4:	0005883a 	mov	r2,zero
    2cb8:	003ff206 	br	2c84 <quorem+0x1f0>

00002cbc <_dtoa_r>:
    2cbc:	20801017 	ldw	r2,64(r4)
    2cc0:	deffde04 	addi	sp,sp,-136
    2cc4:	df002015 	stw	fp,128(sp)
    2cc8:	dcc01b15 	stw	r19,108(sp)
    2ccc:	dc801a15 	stw	r18,104(sp)
    2cd0:	dc401915 	stw	r17,100(sp)
    2cd4:	dc001815 	stw	r16,96(sp)
    2cd8:	dfc02115 	stw	ra,132(sp)
    2cdc:	ddc01f15 	stw	r23,124(sp)
    2ce0:	dd801e15 	stw	r22,120(sp)
    2ce4:	dd401d15 	stw	r21,116(sp)
    2ce8:	dd001c15 	stw	r20,112(sp)
    2cec:	d9c00315 	stw	r7,12(sp)
    2cf0:	2039883a 	mov	fp,r4
    2cf4:	3023883a 	mov	r17,r6
    2cf8:	2825883a 	mov	r18,r5
    2cfc:	dc002417 	ldw	r16,144(sp)
    2d00:	3027883a 	mov	r19,r6
    2d04:	10000826 	beq	r2,zero,2d28 <_dtoa_r+0x6c>
    2d08:	21801117 	ldw	r6,68(r4)
    2d0c:	00c00044 	movi	r3,1
    2d10:	100b883a 	mov	r5,r2
    2d14:	1986983a 	sll	r3,r3,r6
    2d18:	11800115 	stw	r6,4(r2)
    2d1c:	10c00215 	stw	r3,8(r2)
    2d20:	000641c0 	call	641c <_Bfree>
    2d24:	e0001015 	stw	zero,64(fp)
    2d28:	88002e16 	blt	r17,zero,2de4 <_dtoa_r+0x128>
    2d2c:	80000015 	stw	zero,0(r16)
    2d30:	889ffc2c 	andhi	r2,r17,32752
    2d34:	00dffc34 	movhi	r3,32752
    2d38:	10c01c26 	beq	r2,r3,2dac <_dtoa_r+0xf0>
    2d3c:	000d883a 	mov	r6,zero
    2d40:	000f883a 	mov	r7,zero
    2d44:	9009883a 	mov	r4,r18
    2d48:	980b883a 	mov	r5,r19
    2d4c:	000bccc0 	call	bccc <__eqdf2>
    2d50:	10002b1e 	bne	r2,zero,2e00 <_dtoa_r+0x144>
    2d54:	d9c02317 	ldw	r7,140(sp)
    2d58:	00800044 	movi	r2,1
    2d5c:	38800015 	stw	r2,0(r7)
    2d60:	d8802517 	ldw	r2,148(sp)
    2d64:	10019e26 	beq	r2,zero,33e0 <_dtoa_r+0x724>
    2d68:	d8c02517 	ldw	r3,148(sp)
    2d6c:	00800074 	movhi	r2,1
    2d70:	10802244 	addi	r2,r2,137
    2d74:	18800015 	stw	r2,0(r3)
    2d78:	10bfffc4 	addi	r2,r2,-1
    2d7c:	dfc02117 	ldw	ra,132(sp)
    2d80:	df002017 	ldw	fp,128(sp)
    2d84:	ddc01f17 	ldw	r23,124(sp)
    2d88:	dd801e17 	ldw	r22,120(sp)
    2d8c:	dd401d17 	ldw	r21,116(sp)
    2d90:	dd001c17 	ldw	r20,112(sp)
    2d94:	dcc01b17 	ldw	r19,108(sp)
    2d98:	dc801a17 	ldw	r18,104(sp)
    2d9c:	dc401917 	ldw	r17,100(sp)
    2da0:	dc001817 	ldw	r16,96(sp)
    2da4:	dec02204 	addi	sp,sp,136
    2da8:	f800283a 	ret
    2dac:	d8c02317 	ldw	r3,140(sp)
    2db0:	0089c3c4 	movi	r2,9999
    2db4:	18800015 	stw	r2,0(r3)
    2db8:	90017726 	beq	r18,zero,3398 <_dtoa_r+0x6dc>
    2dbc:	00800074 	movhi	r2,1
    2dc0:	10802e04 	addi	r2,r2,184
    2dc4:	d9002517 	ldw	r4,148(sp)
    2dc8:	203fec26 	beq	r4,zero,2d7c <_dtoa_r+0xc0>
    2dcc:	10c000c7 	ldb	r3,3(r2)
    2dd0:	1801781e 	bne	r3,zero,33b4 <_dtoa_r+0x6f8>
    2dd4:	10c000c4 	addi	r3,r2,3
    2dd8:	d9802517 	ldw	r6,148(sp)
    2ddc:	30c00015 	stw	r3,0(r6)
    2de0:	003fe606 	br	2d7c <_dtoa_r+0xc0>
    2de4:	04e00034 	movhi	r19,32768
    2de8:	9cffffc4 	addi	r19,r19,-1
    2dec:	00800044 	movi	r2,1
    2df0:	8ce6703a 	and	r19,r17,r19
    2df4:	80800015 	stw	r2,0(r16)
    2df8:	9823883a 	mov	r17,r19
    2dfc:	003fcc06 	br	2d30 <_dtoa_r+0x74>
    2e00:	d8800204 	addi	r2,sp,8
    2e04:	d8800015 	stw	r2,0(sp)
    2e08:	d9c00104 	addi	r7,sp,4
    2e0c:	900b883a 	mov	r5,r18
    2e10:	980d883a 	mov	r6,r19
    2e14:	e009883a 	mov	r4,fp
    2e18:	8820d53a 	srli	r16,r17,20
    2e1c:	00070c40 	call	70c4 <__d2b>
    2e20:	d8800915 	stw	r2,36(sp)
    2e24:	8001651e 	bne	r16,zero,33bc <_dtoa_r+0x700>
    2e28:	dd800217 	ldw	r22,8(sp)
    2e2c:	dc000117 	ldw	r16,4(sp)
    2e30:	00800804 	movi	r2,32
    2e34:	b421883a 	add	r16,r22,r16
    2e38:	80c10c84 	addi	r3,r16,1074
    2e3c:	10c2d10e 	bge	r2,r3,3984 <_dtoa_r+0xcc8>
    2e40:	00801004 	movi	r2,64
    2e44:	81010484 	addi	r4,r16,1042
    2e48:	10c7c83a 	sub	r3,r2,r3
    2e4c:	9108d83a 	srl	r4,r18,r4
    2e50:	88e2983a 	sll	r17,r17,r3
    2e54:	2448b03a 	or	r4,r4,r17
    2e58:	000d1e80 	call	d1e8 <__floatunsidf>
    2e5c:	017f8434 	movhi	r5,65040
    2e60:	01800044 	movi	r6,1
    2e64:	1009883a 	mov	r4,r2
    2e68:	194b883a 	add	r5,r3,r5
    2e6c:	843fffc4 	addi	r16,r16,-1
    2e70:	d9801115 	stw	r6,68(sp)
    2e74:	000d883a 	mov	r6,zero
    2e78:	01cffe34 	movhi	r7,16376
    2e7c:	000c7900 	call	c790 <__subdf3>
    2e80:	0198dbf4 	movhi	r6,25455
    2e84:	01cff4f4 	movhi	r7,16339
    2e88:	3190d844 	addi	r6,r6,17249
    2e8c:	39e1e9c4 	addi	r7,r7,-30809
    2e90:	1009883a 	mov	r4,r2
    2e94:	180b883a 	mov	r5,r3
    2e98:	000bf240 	call	bf24 <__muldf3>
    2e9c:	01a2d874 	movhi	r6,35681
    2ea0:	01cff1f4 	movhi	r7,16327
    2ea4:	31b22cc4 	addi	r6,r6,-14157
    2ea8:	39e28a04 	addi	r7,r7,-30168
    2eac:	180b883a 	mov	r5,r3
    2eb0:	1009883a 	mov	r4,r2
    2eb4:	000aa500 	call	aa50 <__adddf3>
    2eb8:	8009883a 	mov	r4,r16
    2ebc:	1029883a 	mov	r20,r2
    2ec0:	1823883a 	mov	r17,r3
    2ec4:	000d10c0 	call	d10c <__floatsidf>
    2ec8:	019427f4 	movhi	r6,20639
    2ecc:	01cff4f4 	movhi	r7,16339
    2ed0:	319e7ec4 	addi	r6,r6,31227
    2ed4:	39d104c4 	addi	r7,r7,17427
    2ed8:	1009883a 	mov	r4,r2
    2edc:	180b883a 	mov	r5,r3
    2ee0:	000bf240 	call	bf24 <__muldf3>
    2ee4:	100d883a 	mov	r6,r2
    2ee8:	180f883a 	mov	r7,r3
    2eec:	a009883a 	mov	r4,r20
    2ef0:	880b883a 	mov	r5,r17
    2ef4:	000aa500 	call	aa50 <__adddf3>
    2ef8:	1009883a 	mov	r4,r2
    2efc:	180b883a 	mov	r5,r3
    2f00:	1029883a 	mov	r20,r2
    2f04:	1823883a 	mov	r17,r3
    2f08:	000d08c0 	call	d08c <__fixdfsi>
    2f0c:	000d883a 	mov	r6,zero
    2f10:	000f883a 	mov	r7,zero
    2f14:	a009883a 	mov	r4,r20
    2f18:	880b883a 	mov	r5,r17
    2f1c:	d8800515 	stw	r2,20(sp)
    2f20:	000be300 	call	be30 <__ledf2>
    2f24:	10028716 	blt	r2,zero,3944 <_dtoa_r+0xc88>
    2f28:	d8c00517 	ldw	r3,20(sp)
    2f2c:	00800584 	movi	r2,22
    2f30:	10c27536 	bltu	r2,r3,3908 <_dtoa_r+0xc4c>
    2f34:	180490fa 	slli	r2,r3,3
    2f38:	00c00074 	movhi	r3,1
    2f3c:	18c04a04 	addi	r3,r3,296
    2f40:	1885883a 	add	r2,r3,r2
    2f44:	11000017 	ldw	r4,0(r2)
    2f48:	11400117 	ldw	r5,4(r2)
    2f4c:	900d883a 	mov	r6,r18
    2f50:	980f883a 	mov	r7,r19
    2f54:	000bd540 	call	bd54 <__gedf2>
    2f58:	00828d0e 	bge	zero,r2,3990 <_dtoa_r+0xcd4>
    2f5c:	d9000517 	ldw	r4,20(sp)
    2f60:	d8000e15 	stw	zero,56(sp)
    2f64:	213fffc4 	addi	r4,r4,-1
    2f68:	d9000515 	stw	r4,20(sp)
    2f6c:	b42dc83a 	sub	r22,r22,r16
    2f70:	b5bfffc4 	addi	r22,r22,-1
    2f74:	b0026f16 	blt	r22,zero,3934 <_dtoa_r+0xc78>
    2f78:	d8000815 	stw	zero,32(sp)
    2f7c:	d9c00517 	ldw	r7,20(sp)
    2f80:	38026416 	blt	r7,zero,3914 <_dtoa_r+0xc58>
    2f84:	b1ed883a 	add	r22,r22,r7
    2f88:	d9c00d15 	stw	r7,52(sp)
    2f8c:	d8000a15 	stw	zero,40(sp)
    2f90:	d9800317 	ldw	r6,12(sp)
    2f94:	00800244 	movi	r2,9
    2f98:	11811436 	bltu	r2,r6,33ec <_dtoa_r+0x730>
    2f9c:	00800144 	movi	r2,5
    2fa0:	1184e10e 	bge	r2,r6,4328 <_dtoa_r+0x166c>
    2fa4:	31bfff04 	addi	r6,r6,-4
    2fa8:	d9800315 	stw	r6,12(sp)
    2fac:	0023883a 	mov	r17,zero
    2fb0:	d9800317 	ldw	r6,12(sp)
    2fb4:	008000c4 	movi	r2,3
    2fb8:	30836726 	beq	r6,r2,3d58 <_dtoa_r+0x109c>
    2fbc:	1183410e 	bge	r2,r6,3cc4 <_dtoa_r+0x1008>
    2fc0:	d9c00317 	ldw	r7,12(sp)
    2fc4:	00800104 	movi	r2,4
    2fc8:	38827c26 	beq	r7,r2,39bc <_dtoa_r+0xd00>
    2fcc:	00800144 	movi	r2,5
    2fd0:	3884c41e 	bne	r7,r2,42e4 <_dtoa_r+0x1628>
    2fd4:	00800044 	movi	r2,1
    2fd8:	d8800b15 	stw	r2,44(sp)
    2fdc:	d8c00517 	ldw	r3,20(sp)
    2fe0:	d9002217 	ldw	r4,136(sp)
    2fe4:	1907883a 	add	r3,r3,r4
    2fe8:	19800044 	addi	r6,r3,1
    2fec:	d8c00c15 	stw	r3,48(sp)
    2ff0:	d9800615 	stw	r6,24(sp)
    2ff4:	0183a40e 	bge	zero,r6,3e88 <_dtoa_r+0x11cc>
    2ff8:	d9800617 	ldw	r6,24(sp)
    2ffc:	3021883a 	mov	r16,r6
    3000:	e0001115 	stw	zero,68(fp)
    3004:	008005c4 	movi	r2,23
    3008:	1184c92e 	bgeu	r2,r6,4330 <_dtoa_r+0x1674>
    300c:	00c00044 	movi	r3,1
    3010:	00800104 	movi	r2,4
    3014:	1085883a 	add	r2,r2,r2
    3018:	11000504 	addi	r4,r2,20
    301c:	180b883a 	mov	r5,r3
    3020:	18c00044 	addi	r3,r3,1
    3024:	313ffb2e 	bgeu	r6,r4,3014 <_dtoa_r+0x358>
    3028:	e1401115 	stw	r5,68(fp)
    302c:	e009883a 	mov	r4,fp
    3030:	00063740 	call	6374 <_Balloc>
    3034:	d8800715 	stw	r2,28(sp)
    3038:	e0801015 	stw	r2,64(fp)
    303c:	00800384 	movi	r2,14
    3040:	1400f736 	bltu	r2,r16,3420 <_dtoa_r+0x764>
    3044:	8800f626 	beq	r17,zero,3420 <_dtoa_r+0x764>
    3048:	d9c00517 	ldw	r7,20(sp)
    304c:	01c39a0e 	bge	zero,r7,3eb8 <_dtoa_r+0x11fc>
    3050:	388003cc 	andi	r2,r7,15
    3054:	100490fa 	slli	r2,r2,3
    3058:	382bd13a 	srai	r21,r7,4
    305c:	00c00074 	movhi	r3,1
    3060:	18c04a04 	addi	r3,r3,296
    3064:	1885883a 	add	r2,r3,r2
    3068:	a8c0040c 	andi	r3,r21,16
    306c:	12400017 	ldw	r9,0(r2)
    3070:	12000117 	ldw	r8,4(r2)
    3074:	18037926 	beq	r3,zero,3e5c <_dtoa_r+0x11a0>
    3078:	00800074 	movhi	r2,1
    307c:	10804004 	addi	r2,r2,256
    3080:	11800817 	ldw	r6,32(r2)
    3084:	11c00917 	ldw	r7,36(r2)
    3088:	9009883a 	mov	r4,r18
    308c:	980b883a 	mov	r5,r19
    3090:	da001715 	stw	r8,92(sp)
    3094:	da401615 	stw	r9,88(sp)
    3098:	000b2fc0 	call	b2fc <__divdf3>
    309c:	da001717 	ldw	r8,92(sp)
    30a0:	da401617 	ldw	r9,88(sp)
    30a4:	ad4003cc 	andi	r21,r21,15
    30a8:	040000c4 	movi	r16,3
    30ac:	1023883a 	mov	r17,r2
    30b0:	1829883a 	mov	r20,r3
    30b4:	a8001126 	beq	r21,zero,30fc <_dtoa_r+0x440>
    30b8:	05c00074 	movhi	r23,1
    30bc:	bdc04004 	addi	r23,r23,256
    30c0:	4805883a 	mov	r2,r9
    30c4:	4007883a 	mov	r3,r8
    30c8:	a980004c 	andi	r6,r21,1
    30cc:	1009883a 	mov	r4,r2
    30d0:	a82bd07a 	srai	r21,r21,1
    30d4:	180b883a 	mov	r5,r3
    30d8:	30000426 	beq	r6,zero,30ec <_dtoa_r+0x430>
    30dc:	b9800017 	ldw	r6,0(r23)
    30e0:	b9c00117 	ldw	r7,4(r23)
    30e4:	84000044 	addi	r16,r16,1
    30e8:	000bf240 	call	bf24 <__muldf3>
    30ec:	bdc00204 	addi	r23,r23,8
    30f0:	a83ff51e 	bne	r21,zero,30c8 <_dtoa_r+0x40c>
    30f4:	1013883a 	mov	r9,r2
    30f8:	1811883a 	mov	r8,r3
    30fc:	480d883a 	mov	r6,r9
    3100:	400f883a 	mov	r7,r8
    3104:	8809883a 	mov	r4,r17
    3108:	a00b883a 	mov	r5,r20
    310c:	000b2fc0 	call	b2fc <__divdf3>
    3110:	d8800f15 	stw	r2,60(sp)
    3114:	d8c01015 	stw	r3,64(sp)
    3118:	d8c00e17 	ldw	r3,56(sp)
    311c:	18000626 	beq	r3,zero,3138 <_dtoa_r+0x47c>
    3120:	d9000f17 	ldw	r4,60(sp)
    3124:	d9401017 	ldw	r5,64(sp)
    3128:	000d883a 	mov	r6,zero
    312c:	01cffc34 	movhi	r7,16368
    3130:	000be300 	call	be30 <__ledf2>
    3134:	10040b16 	blt	r2,zero,4164 <_dtoa_r+0x14a8>
    3138:	8009883a 	mov	r4,r16
    313c:	000d10c0 	call	d10c <__floatsidf>
    3140:	d9800f17 	ldw	r6,60(sp)
    3144:	d9c01017 	ldw	r7,64(sp)
    3148:	1009883a 	mov	r4,r2
    314c:	180b883a 	mov	r5,r3
    3150:	000bf240 	call	bf24 <__muldf3>
    3154:	000d883a 	mov	r6,zero
    3158:	01d00734 	movhi	r7,16412
    315c:	1009883a 	mov	r4,r2
    3160:	180b883a 	mov	r5,r3
    3164:	000aa500 	call	aa50 <__adddf3>
    3168:	1021883a 	mov	r16,r2
    316c:	d8800617 	ldw	r2,24(sp)
    3170:	047f3034 	movhi	r17,64704
    3174:	1c63883a 	add	r17,r3,r17
    3178:	10031826 	beq	r2,zero,3ddc <_dtoa_r+0x1120>
    317c:	d8c00517 	ldw	r3,20(sp)
    3180:	db000617 	ldw	r12,24(sp)
    3184:	d8c01315 	stw	r3,76(sp)
    3188:	d9000b17 	ldw	r4,44(sp)
    318c:	20038f26 	beq	r4,zero,3fcc <_dtoa_r+0x1310>
    3190:	60bfffc4 	addi	r2,r12,-1
    3194:	100490fa 	slli	r2,r2,3
    3198:	00c00074 	movhi	r3,1
    319c:	18c04a04 	addi	r3,r3,296
    31a0:	1885883a 	add	r2,r3,r2
    31a4:	11800017 	ldw	r6,0(r2)
    31a8:	11c00117 	ldw	r7,4(r2)
    31ac:	d8800717 	ldw	r2,28(sp)
    31b0:	0009883a 	mov	r4,zero
    31b4:	014ff834 	movhi	r5,16352
    31b8:	db001615 	stw	r12,88(sp)
    31bc:	15c00044 	addi	r23,r2,1
    31c0:	000b2fc0 	call	b2fc <__divdf3>
    31c4:	800d883a 	mov	r6,r16
    31c8:	880f883a 	mov	r7,r17
    31cc:	1009883a 	mov	r4,r2
    31d0:	180b883a 	mov	r5,r3
    31d4:	000c7900 	call	c790 <__subdf3>
    31d8:	d9401017 	ldw	r5,64(sp)
    31dc:	d9000f17 	ldw	r4,60(sp)
    31e0:	102b883a 	mov	r21,r2
    31e4:	d8c01215 	stw	r3,72(sp)
    31e8:	000d08c0 	call	d08c <__fixdfsi>
    31ec:	1009883a 	mov	r4,r2
    31f0:	1029883a 	mov	r20,r2
    31f4:	000d10c0 	call	d10c <__floatsidf>
    31f8:	d9000f17 	ldw	r4,60(sp)
    31fc:	d9401017 	ldw	r5,64(sp)
    3200:	100d883a 	mov	r6,r2
    3204:	180f883a 	mov	r7,r3
    3208:	000c7900 	call	c790 <__subdf3>
    320c:	1823883a 	mov	r17,r3
    3210:	d8c00717 	ldw	r3,28(sp)
    3214:	d9401217 	ldw	r5,72(sp)
    3218:	a2000c04 	addi	r8,r20,48
    321c:	1021883a 	mov	r16,r2
    3220:	1a000005 	stb	r8,0(r3)
    3224:	800d883a 	mov	r6,r16
    3228:	880f883a 	mov	r7,r17
    322c:	a809883a 	mov	r4,r21
    3230:	4029883a 	mov	r20,r8
    3234:	000bd540 	call	bd54 <__gedf2>
    3238:	00841d16 	blt	zero,r2,42b0 <_dtoa_r+0x15f4>
    323c:	800d883a 	mov	r6,r16
    3240:	880f883a 	mov	r7,r17
    3244:	0009883a 	mov	r4,zero
    3248:	014ffc34 	movhi	r5,16368
    324c:	000c7900 	call	c790 <__subdf3>
    3250:	d9401217 	ldw	r5,72(sp)
    3254:	100d883a 	mov	r6,r2
    3258:	180f883a 	mov	r7,r3
    325c:	a809883a 	mov	r4,r21
    3260:	000bd540 	call	bd54 <__gedf2>
    3264:	db001617 	ldw	r12,88(sp)
    3268:	00840e16 	blt	zero,r2,42a4 <_dtoa_r+0x15e8>
    326c:	00800044 	movi	r2,1
    3270:	13006b0e 	bge	r2,r12,3420 <_dtoa_r+0x764>
    3274:	d9000717 	ldw	r4,28(sp)
    3278:	dd800f15 	stw	r22,60(sp)
    327c:	dcc01015 	stw	r19,64(sp)
    3280:	2319883a 	add	r12,r4,r12
    3284:	dcc01217 	ldw	r19,72(sp)
    3288:	602d883a 	mov	r22,r12
    328c:	dc801215 	stw	r18,72(sp)
    3290:	b825883a 	mov	r18,r23
    3294:	00000906 	br	32bc <_dtoa_r+0x600>
    3298:	000c7900 	call	c790 <__subdf3>
    329c:	a80d883a 	mov	r6,r21
    32a0:	980f883a 	mov	r7,r19
    32a4:	1009883a 	mov	r4,r2
    32a8:	180b883a 	mov	r5,r3
    32ac:	000be300 	call	be30 <__ledf2>
    32b0:	1003e816 	blt	r2,zero,4254 <_dtoa_r+0x1598>
    32b4:	b825883a 	mov	r18,r23
    32b8:	bd83e926 	beq	r23,r22,4260 <_dtoa_r+0x15a4>
    32bc:	a809883a 	mov	r4,r21
    32c0:	980b883a 	mov	r5,r19
    32c4:	000d883a 	mov	r6,zero
    32c8:	01d00934 	movhi	r7,16420
    32cc:	000bf240 	call	bf24 <__muldf3>
    32d0:	000d883a 	mov	r6,zero
    32d4:	01d00934 	movhi	r7,16420
    32d8:	8009883a 	mov	r4,r16
    32dc:	880b883a 	mov	r5,r17
    32e0:	102b883a 	mov	r21,r2
    32e4:	1827883a 	mov	r19,r3
    32e8:	000bf240 	call	bf24 <__muldf3>
    32ec:	180b883a 	mov	r5,r3
    32f0:	1009883a 	mov	r4,r2
    32f4:	1821883a 	mov	r16,r3
    32f8:	1023883a 	mov	r17,r2
    32fc:	000d08c0 	call	d08c <__fixdfsi>
    3300:	1009883a 	mov	r4,r2
    3304:	1029883a 	mov	r20,r2
    3308:	000d10c0 	call	d10c <__floatsidf>
    330c:	8809883a 	mov	r4,r17
    3310:	800b883a 	mov	r5,r16
    3314:	100d883a 	mov	r6,r2
    3318:	180f883a 	mov	r7,r3
    331c:	000c7900 	call	c790 <__subdf3>
    3320:	a5000c04 	addi	r20,r20,48
    3324:	a80d883a 	mov	r6,r21
    3328:	980f883a 	mov	r7,r19
    332c:	1009883a 	mov	r4,r2
    3330:	180b883a 	mov	r5,r3
    3334:	95000005 	stb	r20,0(r18)
    3338:	1021883a 	mov	r16,r2
    333c:	1823883a 	mov	r17,r3
    3340:	000be300 	call	be30 <__ledf2>
    3344:	bdc00044 	addi	r23,r23,1
    3348:	800d883a 	mov	r6,r16
    334c:	880f883a 	mov	r7,r17
    3350:	0009883a 	mov	r4,zero
    3354:	014ffc34 	movhi	r5,16368
    3358:	103fcf0e 	bge	r2,zero,3298 <_dtoa_r+0x5dc>
    335c:	d8c01317 	ldw	r3,76(sp)
    3360:	d8c00515 	stw	r3,20(sp)
    3364:	d9400917 	ldw	r5,36(sp)
    3368:	e009883a 	mov	r4,fp
    336c:	000641c0 	call	641c <_Bfree>
    3370:	d9000517 	ldw	r4,20(sp)
    3374:	d9802317 	ldw	r6,140(sp)
    3378:	d9c02517 	ldw	r7,148(sp)
    337c:	b8000005 	stb	zero,0(r23)
    3380:	20800044 	addi	r2,r4,1
    3384:	30800015 	stw	r2,0(r6)
    3388:	3802aa26 	beq	r7,zero,3e34 <_dtoa_r+0x1178>
    338c:	3dc00015 	stw	r23,0(r7)
    3390:	d8800717 	ldw	r2,28(sp)
    3394:	003e7906 	br	2d7c <_dtoa_r+0xc0>
    3398:	00800434 	movhi	r2,16
    339c:	10bfffc4 	addi	r2,r2,-1
    33a0:	88a2703a 	and	r17,r17,r2
    33a4:	883e851e 	bne	r17,zero,2dbc <_dtoa_r+0x100>
    33a8:	00800074 	movhi	r2,1
    33ac:	10802b04 	addi	r2,r2,172
    33b0:	003e8406 	br	2dc4 <_dtoa_r+0x108>
    33b4:	10c00204 	addi	r3,r2,8
    33b8:	003e8706 	br	2dd8 <_dtoa_r+0x11c>
    33bc:	01400434 	movhi	r5,16
    33c0:	297fffc4 	addi	r5,r5,-1
    33c4:	994a703a 	and	r5,r19,r5
    33c8:	9009883a 	mov	r4,r18
    33cc:	843f0044 	addi	r16,r16,-1023
    33d0:	294ffc34 	orhi	r5,r5,16368
    33d4:	dd800217 	ldw	r22,8(sp)
    33d8:	d8001115 	stw	zero,68(sp)
    33dc:	003ea506 	br	2e74 <_dtoa_r+0x1b8>
    33e0:	00800074 	movhi	r2,1
    33e4:	10802204 	addi	r2,r2,136
    33e8:	003e6406 	br	2d7c <_dtoa_r+0xc0>
    33ec:	e0001115 	stw	zero,68(fp)
    33f0:	000b883a 	mov	r5,zero
    33f4:	e009883a 	mov	r4,fp
    33f8:	00063740 	call	6374 <_Balloc>
    33fc:	01bfffc4 	movi	r6,-1
    3400:	01c00044 	movi	r7,1
    3404:	d8800715 	stw	r2,28(sp)
    3408:	d9800c15 	stw	r6,48(sp)
    340c:	e0801015 	stw	r2,64(fp)
    3410:	d8000315 	stw	zero,12(sp)
    3414:	d9c00b15 	stw	r7,44(sp)
    3418:	d9800615 	stw	r6,24(sp)
    341c:	d8002215 	stw	zero,136(sp)
    3420:	d8800117 	ldw	r2,4(sp)
    3424:	10008916 	blt	r2,zero,364c <_dtoa_r+0x990>
    3428:	d9000517 	ldw	r4,20(sp)
    342c:	00c00384 	movi	r3,14
    3430:	19008616 	blt	r3,r4,364c <_dtoa_r+0x990>
    3434:	200490fa 	slli	r2,r4,3
    3438:	00c00074 	movhi	r3,1
    343c:	d9802217 	ldw	r6,136(sp)
    3440:	18c04a04 	addi	r3,r3,296
    3444:	1885883a 	add	r2,r3,r2
    3448:	14000017 	ldw	r16,0(r2)
    344c:	14400117 	ldw	r17,4(r2)
    3450:	30016316 	blt	r6,zero,39e0 <_dtoa_r+0xd24>
    3454:	800d883a 	mov	r6,r16
    3458:	880f883a 	mov	r7,r17
    345c:	9009883a 	mov	r4,r18
    3460:	980b883a 	mov	r5,r19
    3464:	000b2fc0 	call	b2fc <__divdf3>
    3468:	180b883a 	mov	r5,r3
    346c:	1009883a 	mov	r4,r2
    3470:	000d08c0 	call	d08c <__fixdfsi>
    3474:	1009883a 	mov	r4,r2
    3478:	102b883a 	mov	r21,r2
    347c:	000d10c0 	call	d10c <__floatsidf>
    3480:	800d883a 	mov	r6,r16
    3484:	880f883a 	mov	r7,r17
    3488:	1009883a 	mov	r4,r2
    348c:	180b883a 	mov	r5,r3
    3490:	000bf240 	call	bf24 <__muldf3>
    3494:	100d883a 	mov	r6,r2
    3498:	180f883a 	mov	r7,r3
    349c:	9009883a 	mov	r4,r18
    34a0:	980b883a 	mov	r5,r19
    34a4:	000c7900 	call	c790 <__subdf3>
    34a8:	d9c00717 	ldw	r7,28(sp)
    34ac:	1009883a 	mov	r4,r2
    34b0:	a8800c04 	addi	r2,r21,48
    34b4:	38800005 	stb	r2,0(r7)
    34b8:	3dc00044 	addi	r23,r7,1
    34bc:	d9c00617 	ldw	r7,24(sp)
    34c0:	01800044 	movi	r6,1
    34c4:	180b883a 	mov	r5,r3
    34c8:	2005883a 	mov	r2,r4
    34cc:	39803826 	beq	r7,r6,35b0 <_dtoa_r+0x8f4>
    34d0:	000d883a 	mov	r6,zero
    34d4:	01d00934 	movhi	r7,16420
    34d8:	000bf240 	call	bf24 <__muldf3>
    34dc:	000d883a 	mov	r6,zero
    34e0:	000f883a 	mov	r7,zero
    34e4:	1009883a 	mov	r4,r2
    34e8:	180b883a 	mov	r5,r3
    34ec:	1025883a 	mov	r18,r2
    34f0:	1827883a 	mov	r19,r3
    34f4:	000bccc0 	call	bccc <__eqdf2>
    34f8:	103f9a26 	beq	r2,zero,3364 <_dtoa_r+0x6a8>
    34fc:	d9c00617 	ldw	r7,24(sp)
    3500:	d8c00717 	ldw	r3,28(sp)
    3504:	b829883a 	mov	r20,r23
    3508:	38bfffc4 	addi	r2,r7,-1
    350c:	18ad883a 	add	r22,r3,r2
    3510:	00000a06 	br	353c <_dtoa_r+0x880>
    3514:	000bf240 	call	bf24 <__muldf3>
    3518:	000d883a 	mov	r6,zero
    351c:	000f883a 	mov	r7,zero
    3520:	1009883a 	mov	r4,r2
    3524:	180b883a 	mov	r5,r3
    3528:	1025883a 	mov	r18,r2
    352c:	1827883a 	mov	r19,r3
    3530:	b829883a 	mov	r20,r23
    3534:	000bccc0 	call	bccc <__eqdf2>
    3538:	103f8a26 	beq	r2,zero,3364 <_dtoa_r+0x6a8>
    353c:	800d883a 	mov	r6,r16
    3540:	880f883a 	mov	r7,r17
    3544:	9009883a 	mov	r4,r18
    3548:	980b883a 	mov	r5,r19
    354c:	000b2fc0 	call	b2fc <__divdf3>
    3550:	180b883a 	mov	r5,r3
    3554:	1009883a 	mov	r4,r2
    3558:	000d08c0 	call	d08c <__fixdfsi>
    355c:	1009883a 	mov	r4,r2
    3560:	102b883a 	mov	r21,r2
    3564:	000d10c0 	call	d10c <__floatsidf>
    3568:	800d883a 	mov	r6,r16
    356c:	880f883a 	mov	r7,r17
    3570:	1009883a 	mov	r4,r2
    3574:	180b883a 	mov	r5,r3
    3578:	000bf240 	call	bf24 <__muldf3>
    357c:	100d883a 	mov	r6,r2
    3580:	180f883a 	mov	r7,r3
    3584:	9009883a 	mov	r4,r18
    3588:	980b883a 	mov	r5,r19
    358c:	000c7900 	call	c790 <__subdf3>
    3590:	aa000c04 	addi	r8,r21,48
    3594:	a2000005 	stb	r8,0(r20)
    3598:	000d883a 	mov	r6,zero
    359c:	01d00934 	movhi	r7,16420
    35a0:	1009883a 	mov	r4,r2
    35a4:	180b883a 	mov	r5,r3
    35a8:	a5c00044 	addi	r23,r20,1
    35ac:	b53fd91e 	bne	r22,r20,3514 <_dtoa_r+0x858>
    35b0:	100d883a 	mov	r6,r2
    35b4:	180f883a 	mov	r7,r3
    35b8:	1009883a 	mov	r4,r2
    35bc:	180b883a 	mov	r5,r3
    35c0:	000aa500 	call	aa50 <__adddf3>
    35c4:	100d883a 	mov	r6,r2
    35c8:	180f883a 	mov	r7,r3
    35cc:	8009883a 	mov	r4,r16
    35d0:	880b883a 	mov	r5,r17
    35d4:	1027883a 	mov	r19,r2
    35d8:	1825883a 	mov	r18,r3
    35dc:	000be300 	call	be30 <__ledf2>
    35e0:	10000816 	blt	r2,zero,3604 <_dtoa_r+0x948>
    35e4:	980d883a 	mov	r6,r19
    35e8:	900f883a 	mov	r7,r18
    35ec:	8009883a 	mov	r4,r16
    35f0:	880b883a 	mov	r5,r17
    35f4:	000bccc0 	call	bccc <__eqdf2>
    35f8:	103f5a1e 	bne	r2,zero,3364 <_dtoa_r+0x6a8>
    35fc:	ad40004c 	andi	r21,r21,1
    3600:	a83f5826 	beq	r21,zero,3364 <_dtoa_r+0x6a8>
    3604:	bd3fffc3 	ldbu	r20,-1(r23)
    3608:	b8bfffc4 	addi	r2,r23,-1
    360c:	1007883a 	mov	r3,r2
    3610:	01400e44 	movi	r5,57
    3614:	d9800717 	ldw	r6,28(sp)
    3618:	00000506 	br	3630 <_dtoa_r+0x974>
    361c:	18ffffc4 	addi	r3,r3,-1
    3620:	11824726 	beq	r2,r6,3f40 <_dtoa_r+0x1284>
    3624:	1d000003 	ldbu	r20,0(r3)
    3628:	102f883a 	mov	r23,r2
    362c:	10bfffc4 	addi	r2,r2,-1
    3630:	a1003fcc 	andi	r4,r20,255
    3634:	2100201c 	xori	r4,r4,128
    3638:	213fe004 	addi	r4,r4,-128
    363c:	217ff726 	beq	r4,r5,361c <_dtoa_r+0x960>
    3640:	a2000044 	addi	r8,r20,1
    3644:	12000005 	stb	r8,0(r2)
    3648:	003f4606 	br	3364 <_dtoa_r+0x6a8>
    364c:	d9000b17 	ldw	r4,44(sp)
    3650:	2000c826 	beq	r4,zero,3974 <_dtoa_r+0xcb8>
    3654:	d9800317 	ldw	r6,12(sp)
    3658:	00c00044 	movi	r3,1
    365c:	1980f90e 	bge	r3,r6,3a44 <_dtoa_r+0xd88>
    3660:	d8800617 	ldw	r2,24(sp)
    3664:	d8c00a17 	ldw	r3,40(sp)
    3668:	157fffc4 	addi	r21,r2,-1
    366c:	1d41f316 	blt	r3,r21,3e3c <_dtoa_r+0x1180>
    3670:	1d6bc83a 	sub	r21,r3,r21
    3674:	d9c00617 	ldw	r7,24(sp)
    3678:	3802aa16 	blt	r7,zero,4124 <_dtoa_r+0x1468>
    367c:	dd000817 	ldw	r20,32(sp)
    3680:	d8800617 	ldw	r2,24(sp)
    3684:	d8c00817 	ldw	r3,32(sp)
    3688:	01400044 	movi	r5,1
    368c:	e009883a 	mov	r4,fp
    3690:	1887883a 	add	r3,r3,r2
    3694:	d8c00815 	stw	r3,32(sp)
    3698:	b0ad883a 	add	r22,r22,r2
    369c:	00067a80 	call	67a8 <__i2b>
    36a0:	1023883a 	mov	r17,r2
    36a4:	a0000826 	beq	r20,zero,36c8 <_dtoa_r+0xa0c>
    36a8:	0580070e 	bge	zero,r22,36c8 <_dtoa_r+0xa0c>
    36ac:	a005883a 	mov	r2,r20
    36b0:	b500b916 	blt	r22,r20,3998 <_dtoa_r+0xcdc>
    36b4:	d9000817 	ldw	r4,32(sp)
    36b8:	a0a9c83a 	sub	r20,r20,r2
    36bc:	b0adc83a 	sub	r22,r22,r2
    36c0:	2089c83a 	sub	r4,r4,r2
    36c4:	d9000815 	stw	r4,32(sp)
    36c8:	d9800a17 	ldw	r6,40(sp)
    36cc:	0181810e 	bge	zero,r6,3cd4 <_dtoa_r+0x1018>
    36d0:	d9c00b17 	ldw	r7,44(sp)
    36d4:	3800b326 	beq	r7,zero,39a4 <_dtoa_r+0xce8>
    36d8:	a800b226 	beq	r21,zero,39a4 <_dtoa_r+0xce8>
    36dc:	880b883a 	mov	r5,r17
    36e0:	a80d883a 	mov	r6,r21
    36e4:	e009883a 	mov	r4,fp
    36e8:	0006a700 	call	6a70 <__pow5mult>
    36ec:	d9800917 	ldw	r6,36(sp)
    36f0:	100b883a 	mov	r5,r2
    36f4:	e009883a 	mov	r4,fp
    36f8:	1023883a 	mov	r17,r2
    36fc:	00067e40 	call	67e4 <__multiply>
    3700:	1021883a 	mov	r16,r2
    3704:	d8800a17 	ldw	r2,40(sp)
    3708:	d9400917 	ldw	r5,36(sp)
    370c:	e009883a 	mov	r4,fp
    3710:	1545c83a 	sub	r2,r2,r21
    3714:	d8800a15 	stw	r2,40(sp)
    3718:	000641c0 	call	641c <_Bfree>
    371c:	d8c00a17 	ldw	r3,40(sp)
    3720:	18009f1e 	bne	r3,zero,39a0 <_dtoa_r+0xce4>
    3724:	05c00044 	movi	r23,1
    3728:	e009883a 	mov	r4,fp
    372c:	b80b883a 	mov	r5,r23
    3730:	00067a80 	call	67a8 <__i2b>
    3734:	d9000d17 	ldw	r4,52(sp)
    3738:	102b883a 	mov	r21,r2
    373c:	2000ce26 	beq	r4,zero,3a78 <_dtoa_r+0xdbc>
    3740:	200d883a 	mov	r6,r4
    3744:	100b883a 	mov	r5,r2
    3748:	e009883a 	mov	r4,fp
    374c:	0006a700 	call	6a70 <__pow5mult>
    3750:	d9800317 	ldw	r6,12(sp)
    3754:	102b883a 	mov	r21,r2
    3758:	b981810e 	bge	r23,r6,3d60 <_dtoa_r+0x10a4>
    375c:	0027883a 	mov	r19,zero
    3760:	a8800417 	ldw	r2,16(r21)
    3764:	05c00804 	movi	r23,32
    3768:	10800104 	addi	r2,r2,4
    376c:	1085883a 	add	r2,r2,r2
    3770:	1085883a 	add	r2,r2,r2
    3774:	a885883a 	add	r2,r21,r2
    3778:	11000017 	ldw	r4,0(r2)
    377c:	00066900 	call	6690 <__hi0bits>
    3780:	b885c83a 	sub	r2,r23,r2
    3784:	1585883a 	add	r2,r2,r22
    3788:	108007cc 	andi	r2,r2,31
    378c:	1000b326 	beq	r2,zero,3a5c <_dtoa_r+0xda0>
    3790:	00c00804 	movi	r3,32
    3794:	1887c83a 	sub	r3,r3,r2
    3798:	01000104 	movi	r4,4
    379c:	20c2cd0e 	bge	r4,r3,42d4 <_dtoa_r+0x1618>
    37a0:	00c00704 	movi	r3,28
    37a4:	1885c83a 	sub	r2,r3,r2
    37a8:	d8c00817 	ldw	r3,32(sp)
    37ac:	a0a9883a 	add	r20,r20,r2
    37b0:	b0ad883a 	add	r22,r22,r2
    37b4:	1887883a 	add	r3,r3,r2
    37b8:	d8c00815 	stw	r3,32(sp)
    37bc:	d9800817 	ldw	r6,32(sp)
    37c0:	0180040e 	bge	zero,r6,37d4 <_dtoa_r+0xb18>
    37c4:	800b883a 	mov	r5,r16
    37c8:	e009883a 	mov	r4,fp
    37cc:	0006bb00 	call	6bb0 <__lshift>
    37d0:	1021883a 	mov	r16,r2
    37d4:	0580050e 	bge	zero,r22,37ec <_dtoa_r+0xb30>
    37d8:	a80b883a 	mov	r5,r21
    37dc:	b00d883a 	mov	r6,r22
    37e0:	e009883a 	mov	r4,fp
    37e4:	0006bb00 	call	6bb0 <__lshift>
    37e8:	102b883a 	mov	r21,r2
    37ec:	d9c00e17 	ldw	r7,56(sp)
    37f0:	3801211e 	bne	r7,zero,3c78 <_dtoa_r+0xfbc>
    37f4:	d9800617 	ldw	r6,24(sp)
    37f8:	0181380e 	bge	zero,r6,3cdc <_dtoa_r+0x1020>
    37fc:	d8c00b17 	ldw	r3,44(sp)
    3800:	1800ab1e 	bne	r3,zero,3ab0 <_dtoa_r+0xdf4>
    3804:	dc800717 	ldw	r18,28(sp)
    3808:	dcc00617 	ldw	r19,24(sp)
    380c:	9029883a 	mov	r20,r18
    3810:	00000206 	br	381c <_dtoa_r+0xb60>
    3814:	00064440 	call	6444 <__multadd>
    3818:	1021883a 	mov	r16,r2
    381c:	a80b883a 	mov	r5,r21
    3820:	8009883a 	mov	r4,r16
    3824:	0002a940 	call	2a94 <quorem>
    3828:	10800c04 	addi	r2,r2,48
    382c:	90800005 	stb	r2,0(r18)
    3830:	94800044 	addi	r18,r18,1
    3834:	9507c83a 	sub	r3,r18,r20
    3838:	000f883a 	mov	r7,zero
    383c:	01800284 	movi	r6,10
    3840:	800b883a 	mov	r5,r16
    3844:	e009883a 	mov	r4,fp
    3848:	1cfff216 	blt	r3,r19,3814 <_dtoa_r+0xb58>
    384c:	1011883a 	mov	r8,r2
    3850:	d8800617 	ldw	r2,24(sp)
    3854:	0082370e 	bge	zero,r2,4134 <_dtoa_r+0x1478>
    3858:	d9000717 	ldw	r4,28(sp)
    385c:	0025883a 	mov	r18,zero
    3860:	20af883a 	add	r23,r4,r2
    3864:	01800044 	movi	r6,1
    3868:	800b883a 	mov	r5,r16
    386c:	e009883a 	mov	r4,fp
    3870:	da001715 	stw	r8,92(sp)
    3874:	0006bb00 	call	6bb0 <__lshift>
    3878:	a80b883a 	mov	r5,r21
    387c:	1009883a 	mov	r4,r2
    3880:	d8800915 	stw	r2,36(sp)
    3884:	0006cf80 	call	6cf8 <__mcmp>
    3888:	da001717 	ldw	r8,92(sp)
    388c:	0081800e 	bge	zero,r2,3e90 <_dtoa_r+0x11d4>
    3890:	b93fffc3 	ldbu	r4,-1(r23)
    3894:	b8bfffc4 	addi	r2,r23,-1
    3898:	1007883a 	mov	r3,r2
    389c:	01800e44 	movi	r6,57
    38a0:	d9c00717 	ldw	r7,28(sp)
    38a4:	00000506 	br	38bc <_dtoa_r+0xc00>
    38a8:	18ffffc4 	addi	r3,r3,-1
    38ac:	11c12326 	beq	r2,r7,3d3c <_dtoa_r+0x1080>
    38b0:	19000003 	ldbu	r4,0(r3)
    38b4:	102f883a 	mov	r23,r2
    38b8:	10bfffc4 	addi	r2,r2,-1
    38bc:	21403fcc 	andi	r5,r4,255
    38c0:	2940201c 	xori	r5,r5,128
    38c4:	297fe004 	addi	r5,r5,-128
    38c8:	29bff726 	beq	r5,r6,38a8 <_dtoa_r+0xbec>
    38cc:	21000044 	addi	r4,r4,1
    38d0:	11000005 	stb	r4,0(r2)
    38d4:	a80b883a 	mov	r5,r21
    38d8:	e009883a 	mov	r4,fp
    38dc:	000641c0 	call	641c <_Bfree>
    38e0:	883ea026 	beq	r17,zero,3364 <_dtoa_r+0x6a8>
    38e4:	90000426 	beq	r18,zero,38f8 <_dtoa_r+0xc3c>
    38e8:	94400326 	beq	r18,r17,38f8 <_dtoa_r+0xc3c>
    38ec:	900b883a 	mov	r5,r18
    38f0:	e009883a 	mov	r4,fp
    38f4:	000641c0 	call	641c <_Bfree>
    38f8:	880b883a 	mov	r5,r17
    38fc:	e009883a 	mov	r4,fp
    3900:	000641c0 	call	641c <_Bfree>
    3904:	003e9706 	br	3364 <_dtoa_r+0x6a8>
    3908:	01800044 	movi	r6,1
    390c:	d9800e15 	stw	r6,56(sp)
    3910:	003d9606 	br	2f6c <_dtoa_r+0x2b0>
    3914:	d8800817 	ldw	r2,32(sp)
    3918:	d8c00517 	ldw	r3,20(sp)
    391c:	d8000d15 	stw	zero,52(sp)
    3920:	10c5c83a 	sub	r2,r2,r3
    3924:	00c9c83a 	sub	r4,zero,r3
    3928:	d8800815 	stw	r2,32(sp)
    392c:	d9000a15 	stw	r4,40(sp)
    3930:	003d9706 	br	2f90 <_dtoa_r+0x2d4>
    3934:	05adc83a 	sub	r22,zero,r22
    3938:	dd800815 	stw	r22,32(sp)
    393c:	002d883a 	mov	r22,zero
    3940:	003d8e06 	br	2f7c <_dtoa_r+0x2c0>
    3944:	d9000517 	ldw	r4,20(sp)
    3948:	000d10c0 	call	d10c <__floatsidf>
    394c:	100d883a 	mov	r6,r2
    3950:	180f883a 	mov	r7,r3
    3954:	a009883a 	mov	r4,r20
    3958:	880b883a 	mov	r5,r17
    395c:	000bccc0 	call	bccc <__eqdf2>
    3960:	103d7126 	beq	r2,zero,2f28 <_dtoa_r+0x26c>
    3964:	d9c00517 	ldw	r7,20(sp)
    3968:	39ffffc4 	addi	r7,r7,-1
    396c:	d9c00515 	stw	r7,20(sp)
    3970:	003d6d06 	br	2f28 <_dtoa_r+0x26c>
    3974:	dd400a17 	ldw	r21,40(sp)
    3978:	dd000817 	ldw	r20,32(sp)
    397c:	0023883a 	mov	r17,zero
    3980:	003f4806 	br	36a4 <_dtoa_r+0x9e8>
    3984:	10e3c83a 	sub	r17,r2,r3
    3988:	9448983a 	sll	r4,r18,r17
    398c:	003d3206 	br	2e58 <_dtoa_r+0x19c>
    3990:	d8000e15 	stw	zero,56(sp)
    3994:	003d7506 	br	2f6c <_dtoa_r+0x2b0>
    3998:	b005883a 	mov	r2,r22
    399c:	003f4506 	br	36b4 <_dtoa_r+0x9f8>
    39a0:	dc000915 	stw	r16,36(sp)
    39a4:	d9800a17 	ldw	r6,40(sp)
    39a8:	d9400917 	ldw	r5,36(sp)
    39ac:	e009883a 	mov	r4,fp
    39b0:	0006a700 	call	6a70 <__pow5mult>
    39b4:	1021883a 	mov	r16,r2
    39b8:	003f5a06 	br	3724 <_dtoa_r+0xa68>
    39bc:	01c00044 	movi	r7,1
    39c0:	d9c00b15 	stw	r7,44(sp)
    39c4:	d8802217 	ldw	r2,136(sp)
    39c8:	0081280e 	bge	zero,r2,3e6c <_dtoa_r+0x11b0>
    39cc:	100d883a 	mov	r6,r2
    39d0:	1021883a 	mov	r16,r2
    39d4:	d8800c15 	stw	r2,48(sp)
    39d8:	d8800615 	stw	r2,24(sp)
    39dc:	003d8806 	br	3000 <_dtoa_r+0x344>
    39e0:	d8800617 	ldw	r2,24(sp)
    39e4:	00be9b16 	blt	zero,r2,3454 <_dtoa_r+0x798>
    39e8:	10010f1e 	bne	r2,zero,3e28 <_dtoa_r+0x116c>
    39ec:	880b883a 	mov	r5,r17
    39f0:	000d883a 	mov	r6,zero
    39f4:	01d00534 	movhi	r7,16404
    39f8:	8009883a 	mov	r4,r16
    39fc:	000bf240 	call	bf24 <__muldf3>
    3a00:	900d883a 	mov	r6,r18
    3a04:	980f883a 	mov	r7,r19
    3a08:	1009883a 	mov	r4,r2
    3a0c:	180b883a 	mov	r5,r3
    3a10:	000bd540 	call	bd54 <__gedf2>
    3a14:	002b883a 	mov	r21,zero
    3a18:	0023883a 	mov	r17,zero
    3a1c:	1000bf16 	blt	r2,zero,3d1c <_dtoa_r+0x1060>
    3a20:	d9802217 	ldw	r6,136(sp)
    3a24:	ddc00717 	ldw	r23,28(sp)
    3a28:	018c303a 	nor	r6,zero,r6
    3a2c:	d9800515 	stw	r6,20(sp)
    3a30:	a80b883a 	mov	r5,r21
    3a34:	e009883a 	mov	r4,fp
    3a38:	000641c0 	call	641c <_Bfree>
    3a3c:	883e4926 	beq	r17,zero,3364 <_dtoa_r+0x6a8>
    3a40:	003fad06 	br	38f8 <_dtoa_r+0xc3c>
    3a44:	d9c01117 	ldw	r7,68(sp)
    3a48:	3801bc26 	beq	r7,zero,413c <_dtoa_r+0x1480>
    3a4c:	10810cc4 	addi	r2,r2,1075
    3a50:	dd400a17 	ldw	r21,40(sp)
    3a54:	dd000817 	ldw	r20,32(sp)
    3a58:	003f0a06 	br	3684 <_dtoa_r+0x9c8>
    3a5c:	00800704 	movi	r2,28
    3a60:	d9000817 	ldw	r4,32(sp)
    3a64:	a0a9883a 	add	r20,r20,r2
    3a68:	b0ad883a 	add	r22,r22,r2
    3a6c:	2089883a 	add	r4,r4,r2
    3a70:	d9000815 	stw	r4,32(sp)
    3a74:	003f5106 	br	37bc <_dtoa_r+0xb00>
    3a78:	d8c00317 	ldw	r3,12(sp)
    3a7c:	b8c1fc0e 	bge	r23,r3,4270 <_dtoa_r+0x15b4>
    3a80:	0027883a 	mov	r19,zero
    3a84:	b805883a 	mov	r2,r23
    3a88:	003f3e06 	br	3784 <_dtoa_r+0xac8>
    3a8c:	880b883a 	mov	r5,r17
    3a90:	e009883a 	mov	r4,fp
    3a94:	000f883a 	mov	r7,zero
    3a98:	01800284 	movi	r6,10
    3a9c:	00064440 	call	6444 <__multadd>
    3aa0:	d9000c17 	ldw	r4,48(sp)
    3aa4:	1023883a 	mov	r17,r2
    3aa8:	0102040e 	bge	zero,r4,42bc <_dtoa_r+0x1600>
    3aac:	d9000615 	stw	r4,24(sp)
    3ab0:	0500050e 	bge	zero,r20,3ac8 <_dtoa_r+0xe0c>
    3ab4:	880b883a 	mov	r5,r17
    3ab8:	a00d883a 	mov	r6,r20
    3abc:	e009883a 	mov	r4,fp
    3ac0:	0006bb00 	call	6bb0 <__lshift>
    3ac4:	1023883a 	mov	r17,r2
    3ac8:	9801241e 	bne	r19,zero,3f5c <_dtoa_r+0x12a0>
    3acc:	8829883a 	mov	r20,r17
    3ad0:	d9000617 	ldw	r4,24(sp)
    3ad4:	dcc00717 	ldw	r19,28(sp)
    3ad8:	9480004c 	andi	r18,r18,1
    3adc:	20bfffc4 	addi	r2,r4,-1
    3ae0:	9885883a 	add	r2,r19,r2
    3ae4:	d8800415 	stw	r2,16(sp)
    3ae8:	dc800615 	stw	r18,24(sp)
    3aec:	a80b883a 	mov	r5,r21
    3af0:	8009883a 	mov	r4,r16
    3af4:	0002a940 	call	2a94 <quorem>
    3af8:	880b883a 	mov	r5,r17
    3afc:	8009883a 	mov	r4,r16
    3b00:	102f883a 	mov	r23,r2
    3b04:	0006cf80 	call	6cf8 <__mcmp>
    3b08:	a80b883a 	mov	r5,r21
    3b0c:	a00d883a 	mov	r6,r20
    3b10:	e009883a 	mov	r4,fp
    3b14:	102d883a 	mov	r22,r2
    3b18:	0006d580 	call	6d58 <__mdiff>
    3b1c:	1007883a 	mov	r3,r2
    3b20:	10800317 	ldw	r2,12(r2)
    3b24:	bc800c04 	addi	r18,r23,48
    3b28:	180b883a 	mov	r5,r3
    3b2c:	10004e1e 	bne	r2,zero,3c68 <_dtoa_r+0xfac>
    3b30:	8009883a 	mov	r4,r16
    3b34:	d8c01615 	stw	r3,88(sp)
    3b38:	0006cf80 	call	6cf8 <__mcmp>
    3b3c:	d8c01617 	ldw	r3,88(sp)
    3b40:	e009883a 	mov	r4,fp
    3b44:	d8801615 	stw	r2,88(sp)
    3b48:	180b883a 	mov	r5,r3
    3b4c:	000641c0 	call	641c <_Bfree>
    3b50:	d8801617 	ldw	r2,88(sp)
    3b54:	1000041e 	bne	r2,zero,3b68 <_dtoa_r+0xeac>
    3b58:	d9800317 	ldw	r6,12(sp)
    3b5c:	3000021e 	bne	r6,zero,3b68 <_dtoa_r+0xeac>
    3b60:	d8c00617 	ldw	r3,24(sp)
    3b64:	18003726 	beq	r3,zero,3c44 <_dtoa_r+0xf88>
    3b68:	b0002016 	blt	r22,zero,3bec <_dtoa_r+0xf30>
    3b6c:	b000041e 	bne	r22,zero,3b80 <_dtoa_r+0xec4>
    3b70:	d9000317 	ldw	r4,12(sp)
    3b74:	2000021e 	bne	r4,zero,3b80 <_dtoa_r+0xec4>
    3b78:	d8c00617 	ldw	r3,24(sp)
    3b7c:	18001b26 	beq	r3,zero,3bec <_dtoa_r+0xf30>
    3b80:	00810716 	blt	zero,r2,3fa0 <_dtoa_r+0x12e4>
    3b84:	d8c00417 	ldw	r3,16(sp)
    3b88:	9d800044 	addi	r22,r19,1
    3b8c:	9c800005 	stb	r18,0(r19)
    3b90:	b02f883a 	mov	r23,r22
    3b94:	98c10626 	beq	r19,r3,3fb0 <_dtoa_r+0x12f4>
    3b98:	800b883a 	mov	r5,r16
    3b9c:	000f883a 	mov	r7,zero
    3ba0:	01800284 	movi	r6,10
    3ba4:	e009883a 	mov	r4,fp
    3ba8:	00064440 	call	6444 <__multadd>
    3bac:	1021883a 	mov	r16,r2
    3bb0:	000f883a 	mov	r7,zero
    3bb4:	01800284 	movi	r6,10
    3bb8:	880b883a 	mov	r5,r17
    3bbc:	e009883a 	mov	r4,fp
    3bc0:	8d002526 	beq	r17,r20,3c58 <_dtoa_r+0xf9c>
    3bc4:	00064440 	call	6444 <__multadd>
    3bc8:	a00b883a 	mov	r5,r20
    3bcc:	000f883a 	mov	r7,zero
    3bd0:	01800284 	movi	r6,10
    3bd4:	e009883a 	mov	r4,fp
    3bd8:	1023883a 	mov	r17,r2
    3bdc:	00064440 	call	6444 <__multadd>
    3be0:	1029883a 	mov	r20,r2
    3be4:	b027883a 	mov	r19,r22
    3be8:	003fc006 	br	3aec <_dtoa_r+0xe30>
    3bec:	9011883a 	mov	r8,r18
    3bf0:	00800e0e 	bge	zero,r2,3c2c <_dtoa_r+0xf70>
    3bf4:	800b883a 	mov	r5,r16
    3bf8:	01800044 	movi	r6,1
    3bfc:	e009883a 	mov	r4,fp
    3c00:	da001715 	stw	r8,92(sp)
    3c04:	0006bb00 	call	6bb0 <__lshift>
    3c08:	a80b883a 	mov	r5,r21
    3c0c:	1009883a 	mov	r4,r2
    3c10:	1021883a 	mov	r16,r2
    3c14:	0006cf80 	call	6cf8 <__mcmp>
    3c18:	da001717 	ldw	r8,92(sp)
    3c1c:	0081960e 	bge	zero,r2,4278 <_dtoa_r+0x15bc>
    3c20:	00800e44 	movi	r2,57
    3c24:	40817026 	beq	r8,r2,41e8 <_dtoa_r+0x152c>
    3c28:	ba000c44 	addi	r8,r23,49
    3c2c:	8825883a 	mov	r18,r17
    3c30:	9dc00044 	addi	r23,r19,1
    3c34:	9a000005 	stb	r8,0(r19)
    3c38:	a023883a 	mov	r17,r20
    3c3c:	dc000915 	stw	r16,36(sp)
    3c40:	003f2406 	br	38d4 <_dtoa_r+0xc18>
    3c44:	00800e44 	movi	r2,57
    3c48:	9011883a 	mov	r8,r18
    3c4c:	90816626 	beq	r18,r2,41e8 <_dtoa_r+0x152c>
    3c50:	05bff516 	blt	zero,r22,3c28 <_dtoa_r+0xf6c>
    3c54:	003ff506 	br	3c2c <_dtoa_r+0xf70>
    3c58:	00064440 	call	6444 <__multadd>
    3c5c:	1023883a 	mov	r17,r2
    3c60:	1029883a 	mov	r20,r2
    3c64:	003fdf06 	br	3be4 <_dtoa_r+0xf28>
    3c68:	e009883a 	mov	r4,fp
    3c6c:	000641c0 	call	641c <_Bfree>
    3c70:	00800044 	movi	r2,1
    3c74:	003fbc06 	br	3b68 <_dtoa_r+0xeac>
    3c78:	a80b883a 	mov	r5,r21
    3c7c:	8009883a 	mov	r4,r16
    3c80:	0006cf80 	call	6cf8 <__mcmp>
    3c84:	103edb0e 	bge	r2,zero,37f4 <_dtoa_r+0xb38>
    3c88:	800b883a 	mov	r5,r16
    3c8c:	000f883a 	mov	r7,zero
    3c90:	01800284 	movi	r6,10
    3c94:	e009883a 	mov	r4,fp
    3c98:	00064440 	call	6444 <__multadd>
    3c9c:	1021883a 	mov	r16,r2
    3ca0:	d8800517 	ldw	r2,20(sp)
    3ca4:	d8c00b17 	ldw	r3,44(sp)
    3ca8:	10bfffc4 	addi	r2,r2,-1
    3cac:	d8800515 	stw	r2,20(sp)
    3cb0:	183f761e 	bne	r3,zero,3a8c <_dtoa_r+0xdd0>
    3cb4:	d9000c17 	ldw	r4,48(sp)
    3cb8:	0101730e 	bge	zero,r4,4288 <_dtoa_r+0x15cc>
    3cbc:	d9000615 	stw	r4,24(sp)
    3cc0:	003ed006 	br	3804 <_dtoa_r+0xb48>
    3cc4:	00800084 	movi	r2,2
    3cc8:	3081861e 	bne	r6,r2,42e4 <_dtoa_r+0x1628>
    3ccc:	d8000b15 	stw	zero,44(sp)
    3cd0:	003f3c06 	br	39c4 <_dtoa_r+0xd08>
    3cd4:	dc000917 	ldw	r16,36(sp)
    3cd8:	003e9206 	br	3724 <_dtoa_r+0xa68>
    3cdc:	d9c00317 	ldw	r7,12(sp)
    3ce0:	00800084 	movi	r2,2
    3ce4:	11fec50e 	bge	r2,r7,37fc <_dtoa_r+0xb40>
    3ce8:	d9000617 	ldw	r4,24(sp)
    3cec:	20013c1e 	bne	r4,zero,41e0 <_dtoa_r+0x1524>
    3cf0:	a80b883a 	mov	r5,r21
    3cf4:	000f883a 	mov	r7,zero
    3cf8:	01800144 	movi	r6,5
    3cfc:	e009883a 	mov	r4,fp
    3d00:	00064440 	call	6444 <__multadd>
    3d04:	100b883a 	mov	r5,r2
    3d08:	8009883a 	mov	r4,r16
    3d0c:	102b883a 	mov	r21,r2
    3d10:	0006cf80 	call	6cf8 <__mcmp>
    3d14:	dc000915 	stw	r16,36(sp)
    3d18:	00bf410e 	bge	zero,r2,3a20 <_dtoa_r+0xd64>
    3d1c:	d9c00717 	ldw	r7,28(sp)
    3d20:	00800c44 	movi	r2,49
    3d24:	38800005 	stb	r2,0(r7)
    3d28:	d8800517 	ldw	r2,20(sp)
    3d2c:	3dc00044 	addi	r23,r7,1
    3d30:	10800044 	addi	r2,r2,1
    3d34:	d8800515 	stw	r2,20(sp)
    3d38:	003f3d06 	br	3a30 <_dtoa_r+0xd74>
    3d3c:	d9800517 	ldw	r6,20(sp)
    3d40:	d9c00717 	ldw	r7,28(sp)
    3d44:	00800c44 	movi	r2,49
    3d48:	31800044 	addi	r6,r6,1
    3d4c:	d9800515 	stw	r6,20(sp)
    3d50:	38800005 	stb	r2,0(r7)
    3d54:	003edf06 	br	38d4 <_dtoa_r+0xc18>
    3d58:	d8000b15 	stw	zero,44(sp)
    3d5c:	003c9f06 	br	2fdc <_dtoa_r+0x320>
    3d60:	903e7e1e 	bne	r18,zero,375c <_dtoa_r+0xaa0>
    3d64:	00800434 	movhi	r2,16
    3d68:	10bfffc4 	addi	r2,r2,-1
    3d6c:	9884703a 	and	r2,r19,r2
    3d70:	1000ea1e 	bne	r2,zero,411c <_dtoa_r+0x1460>
    3d74:	9cdffc2c 	andhi	r19,r19,32752
    3d78:	9800e826 	beq	r19,zero,411c <_dtoa_r+0x1460>
    3d7c:	d9c00817 	ldw	r7,32(sp)
    3d80:	b5800044 	addi	r22,r22,1
    3d84:	04c00044 	movi	r19,1
    3d88:	39c00044 	addi	r7,r7,1
    3d8c:	d9c00815 	stw	r7,32(sp)
    3d90:	d8800d17 	ldw	r2,52(sp)
    3d94:	103e721e 	bne	r2,zero,3760 <_dtoa_r+0xaa4>
    3d98:	00800044 	movi	r2,1
    3d9c:	003e7906 	br	3784 <_dtoa_r+0xac8>
    3da0:	8009883a 	mov	r4,r16
    3da4:	000d10c0 	call	d10c <__floatsidf>
    3da8:	d9800f17 	ldw	r6,60(sp)
    3dac:	d9c01017 	ldw	r7,64(sp)
    3db0:	1009883a 	mov	r4,r2
    3db4:	180b883a 	mov	r5,r3
    3db8:	000bf240 	call	bf24 <__muldf3>
    3dbc:	000d883a 	mov	r6,zero
    3dc0:	01d00734 	movhi	r7,16412
    3dc4:	1009883a 	mov	r4,r2
    3dc8:	180b883a 	mov	r5,r3
    3dcc:	000aa500 	call	aa50 <__adddf3>
    3dd0:	047f3034 	movhi	r17,64704
    3dd4:	1021883a 	mov	r16,r2
    3dd8:	1c63883a 	add	r17,r3,r17
    3ddc:	d9000f17 	ldw	r4,60(sp)
    3de0:	d9401017 	ldw	r5,64(sp)
    3de4:	000d883a 	mov	r6,zero
    3de8:	01d00534 	movhi	r7,16404
    3dec:	000c7900 	call	c790 <__subdf3>
    3df0:	800d883a 	mov	r6,r16
    3df4:	880f883a 	mov	r7,r17
    3df8:	1009883a 	mov	r4,r2
    3dfc:	180b883a 	mov	r5,r3
    3e00:	102b883a 	mov	r21,r2
    3e04:	1829883a 	mov	r20,r3
    3e08:	000bd540 	call	bd54 <__gedf2>
    3e0c:	00806c16 	blt	zero,r2,3fc0 <_dtoa_r+0x1304>
    3e10:	89e0003c 	xorhi	r7,r17,32768
    3e14:	800d883a 	mov	r6,r16
    3e18:	a809883a 	mov	r4,r21
    3e1c:	a00b883a 	mov	r5,r20
    3e20:	000be300 	call	be30 <__ledf2>
    3e24:	103d7e0e 	bge	r2,zero,3420 <_dtoa_r+0x764>
    3e28:	002b883a 	mov	r21,zero
    3e2c:	0023883a 	mov	r17,zero
    3e30:	003efb06 	br	3a20 <_dtoa_r+0xd64>
    3e34:	d8800717 	ldw	r2,28(sp)
    3e38:	003bd006 	br	2d7c <_dtoa_r+0xc0>
    3e3c:	d9000a17 	ldw	r4,40(sp)
    3e40:	d9800d17 	ldw	r6,52(sp)
    3e44:	dd400a15 	stw	r21,40(sp)
    3e48:	a905c83a 	sub	r2,r21,r4
    3e4c:	308d883a 	add	r6,r6,r2
    3e50:	d9800d15 	stw	r6,52(sp)
    3e54:	002b883a 	mov	r21,zero
    3e58:	003e0606 	br	3674 <_dtoa_r+0x9b8>
    3e5c:	9023883a 	mov	r17,r18
    3e60:	9829883a 	mov	r20,r19
    3e64:	04000084 	movi	r16,2
    3e68:	003c9206 	br	30b4 <_dtoa_r+0x3f8>
    3e6c:	04000044 	movi	r16,1
    3e70:	dc000c15 	stw	r16,48(sp)
    3e74:	dc000615 	stw	r16,24(sp)
    3e78:	dc002215 	stw	r16,136(sp)
    3e7c:	e0001115 	stw	zero,68(fp)
    3e80:	000b883a 	mov	r5,zero
    3e84:	003c6906 	br	302c <_dtoa_r+0x370>
    3e88:	3021883a 	mov	r16,r6
    3e8c:	003ffb06 	br	3e7c <_dtoa_r+0x11c0>
    3e90:	1000021e 	bne	r2,zero,3e9c <_dtoa_r+0x11e0>
    3e94:	4200004c 	andi	r8,r8,1
    3e98:	403e7d1e 	bne	r8,zero,3890 <_dtoa_r+0xbd4>
    3e9c:	01000c04 	movi	r4,48
    3ea0:	00000106 	br	3ea8 <_dtoa_r+0x11ec>
    3ea4:	102f883a 	mov	r23,r2
    3ea8:	b8bfffc4 	addi	r2,r23,-1
    3eac:	10c00007 	ldb	r3,0(r2)
    3eb0:	193ffc26 	beq	r3,r4,3ea4 <_dtoa_r+0x11e8>
    3eb4:	003e8706 	br	38d4 <_dtoa_r+0xc18>
    3eb8:	d8800517 	ldw	r2,20(sp)
    3ebc:	00a3c83a 	sub	r17,zero,r2
    3ec0:	8800a426 	beq	r17,zero,4154 <_dtoa_r+0x1498>
    3ec4:	888003cc 	andi	r2,r17,15
    3ec8:	100490fa 	slli	r2,r2,3
    3ecc:	00c00074 	movhi	r3,1
    3ed0:	18c04a04 	addi	r3,r3,296
    3ed4:	1885883a 	add	r2,r3,r2
    3ed8:	11800017 	ldw	r6,0(r2)
    3edc:	11c00117 	ldw	r7,4(r2)
    3ee0:	9009883a 	mov	r4,r18
    3ee4:	980b883a 	mov	r5,r19
    3ee8:	8823d13a 	srai	r17,r17,4
    3eec:	000bf240 	call	bf24 <__muldf3>
    3ef0:	d8800f15 	stw	r2,60(sp)
    3ef4:	d8c01015 	stw	r3,64(sp)
    3ef8:	8800e826 	beq	r17,zero,429c <_dtoa_r+0x15e0>
    3efc:	05000074 	movhi	r20,1
    3f00:	a5004004 	addi	r20,r20,256
    3f04:	04000084 	movi	r16,2
    3f08:	8980004c 	andi	r6,r17,1
    3f0c:	1009883a 	mov	r4,r2
    3f10:	8823d07a 	srai	r17,r17,1
    3f14:	180b883a 	mov	r5,r3
    3f18:	30000426 	beq	r6,zero,3f2c <_dtoa_r+0x1270>
    3f1c:	a1800017 	ldw	r6,0(r20)
    3f20:	a1c00117 	ldw	r7,4(r20)
    3f24:	84000044 	addi	r16,r16,1
    3f28:	000bf240 	call	bf24 <__muldf3>
    3f2c:	a5000204 	addi	r20,r20,8
    3f30:	883ff51e 	bne	r17,zero,3f08 <_dtoa_r+0x124c>
    3f34:	d8800f15 	stw	r2,60(sp)
    3f38:	d8c01015 	stw	r3,64(sp)
    3f3c:	003c7606 	br	3118 <_dtoa_r+0x45c>
    3f40:	00c00c04 	movi	r3,48
    3f44:	10c00005 	stb	r3,0(r2)
    3f48:	d8c00517 	ldw	r3,20(sp)
    3f4c:	bd3fffc3 	ldbu	r20,-1(r23)
    3f50:	18c00044 	addi	r3,r3,1
    3f54:	d8c00515 	stw	r3,20(sp)
    3f58:	003db906 	br	3640 <_dtoa_r+0x984>
    3f5c:	89400117 	ldw	r5,4(r17)
    3f60:	e009883a 	mov	r4,fp
    3f64:	00063740 	call	6374 <_Balloc>
    3f68:	89800417 	ldw	r6,16(r17)
    3f6c:	89400304 	addi	r5,r17,12
    3f70:	11000304 	addi	r4,r2,12
    3f74:	31800084 	addi	r6,r6,2
    3f78:	318d883a 	add	r6,r6,r6
    3f7c:	318d883a 	add	r6,r6,r6
    3f80:	1027883a 	mov	r19,r2
    3f84:	0005fa80 	call	5fa8 <memcpy>
    3f88:	01800044 	movi	r6,1
    3f8c:	980b883a 	mov	r5,r19
    3f90:	e009883a 	mov	r4,fp
    3f94:	0006bb00 	call	6bb0 <__lshift>
    3f98:	1029883a 	mov	r20,r2
    3f9c:	003ecc06 	br	3ad0 <_dtoa_r+0xe14>
    3fa0:	00800e44 	movi	r2,57
    3fa4:	90809026 	beq	r18,r2,41e8 <_dtoa_r+0x152c>
    3fa8:	92000044 	addi	r8,r18,1
    3fac:	003f1f06 	br	3c2c <_dtoa_r+0xf70>
    3fb0:	9011883a 	mov	r8,r18
    3fb4:	8825883a 	mov	r18,r17
    3fb8:	a023883a 	mov	r17,r20
    3fbc:	003e2906 	br	3864 <_dtoa_r+0xba8>
    3fc0:	002b883a 	mov	r21,zero
    3fc4:	0023883a 	mov	r17,zero
    3fc8:	003f5406 	br	3d1c <_dtoa_r+0x1060>
    3fcc:	61bfffc4 	addi	r6,r12,-1
    3fd0:	300490fa 	slli	r2,r6,3
    3fd4:	00c00074 	movhi	r3,1
    3fd8:	18c04a04 	addi	r3,r3,296
    3fdc:	1885883a 	add	r2,r3,r2
    3fe0:	11000017 	ldw	r4,0(r2)
    3fe4:	11400117 	ldw	r5,4(r2)
    3fe8:	d8800717 	ldw	r2,28(sp)
    3fec:	880f883a 	mov	r7,r17
    3ff0:	d9801215 	stw	r6,72(sp)
    3ff4:	800d883a 	mov	r6,r16
    3ff8:	db001615 	stw	r12,88(sp)
    3ffc:	15c00044 	addi	r23,r2,1
    4000:	000bf240 	call	bf24 <__muldf3>
    4004:	d9401017 	ldw	r5,64(sp)
    4008:	d9000f17 	ldw	r4,60(sp)
    400c:	d8c01515 	stw	r3,84(sp)
    4010:	d8801415 	stw	r2,80(sp)
    4014:	000d08c0 	call	d08c <__fixdfsi>
    4018:	1009883a 	mov	r4,r2
    401c:	1021883a 	mov	r16,r2
    4020:	000d10c0 	call	d10c <__floatsidf>
    4024:	d9000f17 	ldw	r4,60(sp)
    4028:	d9401017 	ldw	r5,64(sp)
    402c:	100d883a 	mov	r6,r2
    4030:	180f883a 	mov	r7,r3
    4034:	000c7900 	call	c790 <__subdf3>
    4038:	1829883a 	mov	r20,r3
    403c:	d8c00717 	ldw	r3,28(sp)
    4040:	84000c04 	addi	r16,r16,48
    4044:	1023883a 	mov	r17,r2
    4048:	1c000005 	stb	r16,0(r3)
    404c:	db001617 	ldw	r12,88(sp)
    4050:	00800044 	movi	r2,1
    4054:	60802226 	beq	r12,r2,40e0 <_dtoa_r+0x1424>
    4058:	d9c00717 	ldw	r7,28(sp)
    405c:	8805883a 	mov	r2,r17
    4060:	b82b883a 	mov	r21,r23
    4064:	3b19883a 	add	r12,r7,r12
    4068:	6023883a 	mov	r17,r12
    406c:	a007883a 	mov	r3,r20
    4070:	dc800f15 	stw	r18,60(sp)
    4074:	000d883a 	mov	r6,zero
    4078:	01d00934 	movhi	r7,16420
    407c:	1009883a 	mov	r4,r2
    4080:	180b883a 	mov	r5,r3
    4084:	000bf240 	call	bf24 <__muldf3>
    4088:	180b883a 	mov	r5,r3
    408c:	1009883a 	mov	r4,r2
    4090:	1829883a 	mov	r20,r3
    4094:	1025883a 	mov	r18,r2
    4098:	000d08c0 	call	d08c <__fixdfsi>
    409c:	1009883a 	mov	r4,r2
    40a0:	1021883a 	mov	r16,r2
    40a4:	000d10c0 	call	d10c <__floatsidf>
    40a8:	100d883a 	mov	r6,r2
    40ac:	180f883a 	mov	r7,r3
    40b0:	9009883a 	mov	r4,r18
    40b4:	a00b883a 	mov	r5,r20
    40b8:	84000c04 	addi	r16,r16,48
    40bc:	000c7900 	call	c790 <__subdf3>
    40c0:	ad400044 	addi	r21,r21,1
    40c4:	ac3fffc5 	stb	r16,-1(r21)
    40c8:	ac7fea1e 	bne	r21,r17,4074 <_dtoa_r+0x13b8>
    40cc:	1023883a 	mov	r17,r2
    40d0:	d8801217 	ldw	r2,72(sp)
    40d4:	dc800f17 	ldw	r18,60(sp)
    40d8:	1829883a 	mov	r20,r3
    40dc:	b8af883a 	add	r23,r23,r2
    40e0:	d9001417 	ldw	r4,80(sp)
    40e4:	d9401517 	ldw	r5,84(sp)
    40e8:	000d883a 	mov	r6,zero
    40ec:	01cff834 	movhi	r7,16352
    40f0:	000aa500 	call	aa50 <__adddf3>
    40f4:	880d883a 	mov	r6,r17
    40f8:	a00f883a 	mov	r7,r20
    40fc:	1009883a 	mov	r4,r2
    4100:	180b883a 	mov	r5,r3
    4104:	000be300 	call	be30 <__ledf2>
    4108:	10003e0e 	bge	r2,zero,4204 <_dtoa_r+0x1548>
    410c:	d9001317 	ldw	r4,76(sp)
    4110:	bd3fffc3 	ldbu	r20,-1(r23)
    4114:	d9000515 	stw	r4,20(sp)
    4118:	003d3b06 	br	3608 <_dtoa_r+0x94c>
    411c:	0027883a 	mov	r19,zero
    4120:	003f1b06 	br	3d90 <_dtoa_r+0x10d4>
    4124:	d8800817 	ldw	r2,32(sp)
    4128:	11e9c83a 	sub	r20,r2,r7
    412c:	0005883a 	mov	r2,zero
    4130:	003d5406 	br	3684 <_dtoa_r+0x9c8>
    4134:	00800044 	movi	r2,1
    4138:	003dc706 	br	3858 <_dtoa_r+0xb9c>
    413c:	d8c00217 	ldw	r3,8(sp)
    4140:	00800d84 	movi	r2,54
    4144:	dd400a17 	ldw	r21,40(sp)
    4148:	10c5c83a 	sub	r2,r2,r3
    414c:	dd000817 	ldw	r20,32(sp)
    4150:	003d4c06 	br	3684 <_dtoa_r+0x9c8>
    4154:	dc800f15 	stw	r18,60(sp)
    4158:	dcc01015 	stw	r19,64(sp)
    415c:	04000084 	movi	r16,2
    4160:	003bed06 	br	3118 <_dtoa_r+0x45c>
    4164:	d9000617 	ldw	r4,24(sp)
    4168:	203f0d26 	beq	r4,zero,3da0 <_dtoa_r+0x10e4>
    416c:	d9800c17 	ldw	r6,48(sp)
    4170:	01bcab0e 	bge	zero,r6,3420 <_dtoa_r+0x764>
    4174:	d9401017 	ldw	r5,64(sp)
    4178:	d9000f17 	ldw	r4,60(sp)
    417c:	000d883a 	mov	r6,zero
    4180:	01d00934 	movhi	r7,16420
    4184:	000bf240 	call	bf24 <__muldf3>
    4188:	81000044 	addi	r4,r16,1
    418c:	d8800f15 	stw	r2,60(sp)
    4190:	d8c01015 	stw	r3,64(sp)
    4194:	000d10c0 	call	d10c <__floatsidf>
    4198:	d9800f17 	ldw	r6,60(sp)
    419c:	d9c01017 	ldw	r7,64(sp)
    41a0:	1009883a 	mov	r4,r2
    41a4:	180b883a 	mov	r5,r3
    41a8:	000bf240 	call	bf24 <__muldf3>
    41ac:	01d00734 	movhi	r7,16412
    41b0:	000d883a 	mov	r6,zero
    41b4:	1009883a 	mov	r4,r2
    41b8:	180b883a 	mov	r5,r3
    41bc:	000aa500 	call	aa50 <__adddf3>
    41c0:	d9c00517 	ldw	r7,20(sp)
    41c4:	047f3034 	movhi	r17,64704
    41c8:	1021883a 	mov	r16,r2
    41cc:	39ffffc4 	addi	r7,r7,-1
    41d0:	d9c01315 	stw	r7,76(sp)
    41d4:	1c63883a 	add	r17,r3,r17
    41d8:	db000c17 	ldw	r12,48(sp)
    41dc:	003bea06 	br	3188 <_dtoa_r+0x4cc>
    41e0:	dc000915 	stw	r16,36(sp)
    41e4:	003e0e06 	br	3a20 <_dtoa_r+0xd64>
    41e8:	01000e44 	movi	r4,57
    41ec:	8825883a 	mov	r18,r17
    41f0:	9dc00044 	addi	r23,r19,1
    41f4:	99000005 	stb	r4,0(r19)
    41f8:	a023883a 	mov	r17,r20
    41fc:	dc000915 	stw	r16,36(sp)
    4200:	003da406 	br	3894 <_dtoa_r+0xbd8>
    4204:	d9801417 	ldw	r6,80(sp)
    4208:	d9c01517 	ldw	r7,84(sp)
    420c:	0009883a 	mov	r4,zero
    4210:	014ff834 	movhi	r5,16352
    4214:	000c7900 	call	c790 <__subdf3>
    4218:	880d883a 	mov	r6,r17
    421c:	a00f883a 	mov	r7,r20
    4220:	1009883a 	mov	r4,r2
    4224:	180b883a 	mov	r5,r3
    4228:	000bd540 	call	bd54 <__gedf2>
    422c:	00bc7c0e 	bge	zero,r2,3420 <_dtoa_r+0x764>
    4230:	01000c04 	movi	r4,48
    4234:	00000106 	br	423c <_dtoa_r+0x1580>
    4238:	102f883a 	mov	r23,r2
    423c:	b8bfffc4 	addi	r2,r23,-1
    4240:	10c00007 	ldb	r3,0(r2)
    4244:	193ffc26 	beq	r3,r4,4238 <_dtoa_r+0x157c>
    4248:	d9801317 	ldw	r6,76(sp)
    424c:	d9800515 	stw	r6,20(sp)
    4250:	003c4406 	br	3364 <_dtoa_r+0x6a8>
    4254:	d9801317 	ldw	r6,76(sp)
    4258:	d9800515 	stw	r6,20(sp)
    425c:	003cea06 	br	3608 <_dtoa_r+0x94c>
    4260:	dd800f17 	ldw	r22,60(sp)
    4264:	dcc01017 	ldw	r19,64(sp)
    4268:	dc801217 	ldw	r18,72(sp)
    426c:	003c6c06 	br	3420 <_dtoa_r+0x764>
    4270:	903e031e 	bne	r18,zero,3a80 <_dtoa_r+0xdc4>
    4274:	003ebb06 	br	3d64 <_dtoa_r+0x10a8>
    4278:	103e6c1e 	bne	r2,zero,3c2c <_dtoa_r+0xf70>
    427c:	4080004c 	andi	r2,r8,1
    4280:	103e6a26 	beq	r2,zero,3c2c <_dtoa_r+0xf70>
    4284:	003e6606 	br	3c20 <_dtoa_r+0xf64>
    4288:	d8c00317 	ldw	r3,12(sp)
    428c:	00800084 	movi	r2,2
    4290:	10c02916 	blt	r2,r3,4338 <_dtoa_r+0x167c>
    4294:	d9000c17 	ldw	r4,48(sp)
    4298:	003e8806 	br	3cbc <_dtoa_r+0x1000>
    429c:	04000084 	movi	r16,2
    42a0:	003b9d06 	br	3118 <_dtoa_r+0x45c>
    42a4:	d9001317 	ldw	r4,76(sp)
    42a8:	d9000515 	stw	r4,20(sp)
    42ac:	003cd606 	br	3608 <_dtoa_r+0x94c>
    42b0:	d8801317 	ldw	r2,76(sp)
    42b4:	d8800515 	stw	r2,20(sp)
    42b8:	003c2a06 	br	3364 <_dtoa_r+0x6a8>
    42bc:	d9800317 	ldw	r6,12(sp)
    42c0:	00800084 	movi	r2,2
    42c4:	11801516 	blt	r2,r6,431c <_dtoa_r+0x1660>
    42c8:	d9c00c17 	ldw	r7,48(sp)
    42cc:	d9c00615 	stw	r7,24(sp)
    42d0:	003df706 	br	3ab0 <_dtoa_r+0xdf4>
    42d4:	193d3926 	beq	r3,r4,37bc <_dtoa_r+0xb00>
    42d8:	00c00f04 	movi	r3,60
    42dc:	1885c83a 	sub	r2,r3,r2
    42e0:	003ddf06 	br	3a60 <_dtoa_r+0xda4>
    42e4:	e009883a 	mov	r4,fp
    42e8:	e0001115 	stw	zero,68(fp)
    42ec:	000b883a 	mov	r5,zero
    42f0:	00063740 	call	6374 <_Balloc>
    42f4:	d8800715 	stw	r2,28(sp)
    42f8:	d8c00717 	ldw	r3,28(sp)
    42fc:	00bfffc4 	movi	r2,-1
    4300:	01000044 	movi	r4,1
    4304:	d8800c15 	stw	r2,48(sp)
    4308:	e0c01015 	stw	r3,64(fp)
    430c:	d9000b15 	stw	r4,44(sp)
    4310:	d8800615 	stw	r2,24(sp)
    4314:	d8002215 	stw	zero,136(sp)
    4318:	003c4106 	br	3420 <_dtoa_r+0x764>
    431c:	d8c00c17 	ldw	r3,48(sp)
    4320:	d8c00615 	stw	r3,24(sp)
    4324:	003e7006 	br	3ce8 <_dtoa_r+0x102c>
    4328:	04400044 	movi	r17,1
    432c:	003b2006 	br	2fb0 <_dtoa_r+0x2f4>
    4330:	000b883a 	mov	r5,zero
    4334:	003b3d06 	br	302c <_dtoa_r+0x370>
    4338:	d8800c17 	ldw	r2,48(sp)
    433c:	d8800615 	stw	r2,24(sp)
    4340:	003e6906 	br	3ce8 <_dtoa_r+0x102c>

00004344 <__sflush_r>:
    4344:	2880030b 	ldhu	r2,12(r5)
    4348:	defffb04 	addi	sp,sp,-20
    434c:	dcc00315 	stw	r19,12(sp)
    4350:	dc400115 	stw	r17,4(sp)
    4354:	dfc00415 	stw	ra,16(sp)
    4358:	dc800215 	stw	r18,8(sp)
    435c:	dc000015 	stw	r16,0(sp)
    4360:	10c0020c 	andi	r3,r2,8
    4364:	2823883a 	mov	r17,r5
    4368:	2027883a 	mov	r19,r4
    436c:	1800311e 	bne	r3,zero,4434 <__sflush_r+0xf0>
    4370:	28c00117 	ldw	r3,4(r5)
    4374:	10820014 	ori	r2,r2,2048
    4378:	2880030d 	sth	r2,12(r5)
    437c:	00c04b0e 	bge	zero,r3,44ac <__sflush_r+0x168>
    4380:	8a000a17 	ldw	r8,40(r17)
    4384:	40002326 	beq	r8,zero,4414 <__sflush_r+0xd0>
    4388:	9c000017 	ldw	r16,0(r19)
    438c:	10c4000c 	andi	r3,r2,4096
    4390:	98000015 	stw	zero,0(r19)
    4394:	18004826 	beq	r3,zero,44b8 <__sflush_r+0x174>
    4398:	89801417 	ldw	r6,80(r17)
    439c:	10c0010c 	andi	r3,r2,4
    43a0:	18000626 	beq	r3,zero,43bc <__sflush_r+0x78>
    43a4:	88c00117 	ldw	r3,4(r17)
    43a8:	88800c17 	ldw	r2,48(r17)
    43ac:	30cdc83a 	sub	r6,r6,r3
    43b0:	10000226 	beq	r2,zero,43bc <__sflush_r+0x78>
    43b4:	88800f17 	ldw	r2,60(r17)
    43b8:	308dc83a 	sub	r6,r6,r2
    43bc:	89400717 	ldw	r5,28(r17)
    43c0:	000f883a 	mov	r7,zero
    43c4:	9809883a 	mov	r4,r19
    43c8:	403ee83a 	callr	r8
    43cc:	00ffffc4 	movi	r3,-1
    43d0:	10c04426 	beq	r2,r3,44e4 <__sflush_r+0x1a0>
    43d4:	88c0030b 	ldhu	r3,12(r17)
    43d8:	89000417 	ldw	r4,16(r17)
    43dc:	88000115 	stw	zero,4(r17)
    43e0:	197dffcc 	andi	r5,r3,63487
    43e4:	8940030d 	sth	r5,12(r17)
    43e8:	89000015 	stw	r4,0(r17)
    43ec:	18c4000c 	andi	r3,r3,4096
    43f0:	18002c1e 	bne	r3,zero,44a4 <__sflush_r+0x160>
    43f4:	89400c17 	ldw	r5,48(r17)
    43f8:	9c000015 	stw	r16,0(r19)
    43fc:	28000526 	beq	r5,zero,4414 <__sflush_r+0xd0>
    4400:	88801004 	addi	r2,r17,64
    4404:	28800226 	beq	r5,r2,4410 <__sflush_r+0xcc>
    4408:	9809883a 	mov	r4,r19
    440c:	0004ac00 	call	4ac0 <_free_r>
    4410:	88000c15 	stw	zero,48(r17)
    4414:	0005883a 	mov	r2,zero
    4418:	dfc00417 	ldw	ra,16(sp)
    441c:	dcc00317 	ldw	r19,12(sp)
    4420:	dc800217 	ldw	r18,8(sp)
    4424:	dc400117 	ldw	r17,4(sp)
    4428:	dc000017 	ldw	r16,0(sp)
    442c:	dec00504 	addi	sp,sp,20
    4430:	f800283a 	ret
    4434:	2c800417 	ldw	r18,16(r5)
    4438:	903ff626 	beq	r18,zero,4414 <__sflush_r+0xd0>
    443c:	2c000017 	ldw	r16,0(r5)
    4440:	108000cc 	andi	r2,r2,3
    4444:	2c800015 	stw	r18,0(r5)
    4448:	84a1c83a 	sub	r16,r16,r18
    444c:	1000131e 	bne	r2,zero,449c <__sflush_r+0x158>
    4450:	28800517 	ldw	r2,20(r5)
    4454:	88800215 	stw	r2,8(r17)
    4458:	04000316 	blt	zero,r16,4468 <__sflush_r+0x124>
    445c:	003fed06 	br	4414 <__sflush_r+0xd0>
    4460:	90a5883a 	add	r18,r18,r2
    4464:	043feb0e 	bge	zero,r16,4414 <__sflush_r+0xd0>
    4468:	88800917 	ldw	r2,36(r17)
    446c:	89400717 	ldw	r5,28(r17)
    4470:	800f883a 	mov	r7,r16
    4474:	900d883a 	mov	r6,r18
    4478:	9809883a 	mov	r4,r19
    447c:	103ee83a 	callr	r2
    4480:	80a1c83a 	sub	r16,r16,r2
    4484:	00bff616 	blt	zero,r2,4460 <__sflush_r+0x11c>
    4488:	88c0030b 	ldhu	r3,12(r17)
    448c:	00bfffc4 	movi	r2,-1
    4490:	18c01014 	ori	r3,r3,64
    4494:	88c0030d 	sth	r3,12(r17)
    4498:	003fdf06 	br	4418 <__sflush_r+0xd4>
    449c:	0005883a 	mov	r2,zero
    44a0:	003fec06 	br	4454 <__sflush_r+0x110>
    44a4:	88801415 	stw	r2,80(r17)
    44a8:	003fd206 	br	43f4 <__sflush_r+0xb0>
    44ac:	28c00f17 	ldw	r3,60(r5)
    44b0:	00ffb316 	blt	zero,r3,4380 <__sflush_r+0x3c>
    44b4:	003fd706 	br	4414 <__sflush_r+0xd0>
    44b8:	89400717 	ldw	r5,28(r17)
    44bc:	000d883a 	mov	r6,zero
    44c0:	01c00044 	movi	r7,1
    44c4:	9809883a 	mov	r4,r19
    44c8:	403ee83a 	callr	r8
    44cc:	100d883a 	mov	r6,r2
    44d0:	00bfffc4 	movi	r2,-1
    44d4:	30801426 	beq	r6,r2,4528 <__sflush_r+0x1e4>
    44d8:	8880030b 	ldhu	r2,12(r17)
    44dc:	8a000a17 	ldw	r8,40(r17)
    44e0:	003fae06 	br	439c <__sflush_r+0x58>
    44e4:	98c00017 	ldw	r3,0(r19)
    44e8:	183fba26 	beq	r3,zero,43d4 <__sflush_r+0x90>
    44ec:	01000744 	movi	r4,29
    44f0:	19000626 	beq	r3,r4,450c <__sflush_r+0x1c8>
    44f4:	01000584 	movi	r4,22
    44f8:	19000426 	beq	r3,r4,450c <__sflush_r+0x1c8>
    44fc:	88c0030b 	ldhu	r3,12(r17)
    4500:	18c01014 	ori	r3,r3,64
    4504:	88c0030d 	sth	r3,12(r17)
    4508:	003fc306 	br	4418 <__sflush_r+0xd4>
    450c:	8880030b 	ldhu	r2,12(r17)
    4510:	88c00417 	ldw	r3,16(r17)
    4514:	88000115 	stw	zero,4(r17)
    4518:	10bdffcc 	andi	r2,r2,63487
    451c:	8880030d 	sth	r2,12(r17)
    4520:	88c00015 	stw	r3,0(r17)
    4524:	003fb306 	br	43f4 <__sflush_r+0xb0>
    4528:	98800017 	ldw	r2,0(r19)
    452c:	103fea26 	beq	r2,zero,44d8 <__sflush_r+0x194>
    4530:	00c00744 	movi	r3,29
    4534:	10c00226 	beq	r2,r3,4540 <__sflush_r+0x1fc>
    4538:	00c00584 	movi	r3,22
    453c:	10c0031e 	bne	r2,r3,454c <__sflush_r+0x208>
    4540:	9c000015 	stw	r16,0(r19)
    4544:	0005883a 	mov	r2,zero
    4548:	003fb306 	br	4418 <__sflush_r+0xd4>
    454c:	88c0030b 	ldhu	r3,12(r17)
    4550:	3005883a 	mov	r2,r6
    4554:	18c01014 	ori	r3,r3,64
    4558:	88c0030d 	sth	r3,12(r17)
    455c:	003fae06 	br	4418 <__sflush_r+0xd4>

00004560 <_fflush_r>:
    4560:	defffd04 	addi	sp,sp,-12
    4564:	dc000115 	stw	r16,4(sp)
    4568:	dfc00215 	stw	ra,8(sp)
    456c:	2021883a 	mov	r16,r4
    4570:	20000226 	beq	r4,zero,457c <_fflush_r+0x1c>
    4574:	20800e17 	ldw	r2,56(r4)
    4578:	10000c26 	beq	r2,zero,45ac <_fflush_r+0x4c>
    457c:	2880030f 	ldh	r2,12(r5)
    4580:	1000051e 	bne	r2,zero,4598 <_fflush_r+0x38>
    4584:	0005883a 	mov	r2,zero
    4588:	dfc00217 	ldw	ra,8(sp)
    458c:	dc000117 	ldw	r16,4(sp)
    4590:	dec00304 	addi	sp,sp,12
    4594:	f800283a 	ret
    4598:	8009883a 	mov	r4,r16
    459c:	dfc00217 	ldw	ra,8(sp)
    45a0:	dc000117 	ldw	r16,4(sp)
    45a4:	dec00304 	addi	sp,sp,12
    45a8:	00043441 	jmpi	4344 <__sflush_r>
    45ac:	d9400015 	stw	r5,0(sp)
    45b0:	000494c0 	call	494c <__sinit>
    45b4:	d9400017 	ldw	r5,0(sp)
    45b8:	003ff006 	br	457c <_fflush_r+0x1c>

000045bc <fflush>:
    45bc:	20000526 	beq	r4,zero,45d4 <fflush+0x18>
    45c0:	00800074 	movhi	r2,1
    45c4:	10877d04 	addi	r2,r2,7668
    45c8:	200b883a 	mov	r5,r4
    45cc:	11000017 	ldw	r4,0(r2)
    45d0:	00045601 	jmpi	4560 <_fflush_r>
    45d4:	00800074 	movhi	r2,1
    45d8:	10877c04 	addi	r2,r2,7664
    45dc:	11000017 	ldw	r4,0(r2)
    45e0:	01400034 	movhi	r5,0
    45e4:	29515804 	addi	r5,r5,17760
    45e8:	000535c1 	jmpi	535c <_fwalk_reent>

000045ec <__fp_unlock>:
    45ec:	0005883a 	mov	r2,zero
    45f0:	f800283a 	ret

000045f4 <_cleanup_r>:
    45f4:	01400074 	movhi	r5,1
    45f8:	29653e04 	addi	r5,r5,-27400
    45fc:	000535c1 	jmpi	535c <_fwalk_reent>

00004600 <__sinit.part.1>:
    4600:	defff704 	addi	sp,sp,-36
    4604:	00c00034 	movhi	r3,0
    4608:	dfc00815 	stw	ra,32(sp)
    460c:	ddc00715 	stw	r23,28(sp)
    4610:	dd800615 	stw	r22,24(sp)
    4614:	dd400515 	stw	r21,20(sp)
    4618:	dd000415 	stw	r20,16(sp)
    461c:	dcc00315 	stw	r19,12(sp)
    4620:	dc800215 	stw	r18,8(sp)
    4624:	dc400115 	stw	r17,4(sp)
    4628:	dc000015 	stw	r16,0(sp)
    462c:	18d17d04 	addi	r3,r3,17908
    4630:	24000117 	ldw	r16,4(r4)
    4634:	20c00f15 	stw	r3,60(r4)
    4638:	2080bb04 	addi	r2,r4,748
    463c:	00c000c4 	movi	r3,3
    4640:	20c0b915 	stw	r3,740(r4)
    4644:	2080ba15 	stw	r2,744(r4)
    4648:	2000b815 	stw	zero,736(r4)
    464c:	05c00204 	movi	r23,8
    4650:	00800104 	movi	r2,4
    4654:	2025883a 	mov	r18,r4
    4658:	b80d883a 	mov	r6,r23
    465c:	81001704 	addi	r4,r16,92
    4660:	000b883a 	mov	r5,zero
    4664:	80000015 	stw	zero,0(r16)
    4668:	80000115 	stw	zero,4(r16)
    466c:	80000215 	stw	zero,8(r16)
    4670:	8080030d 	sth	r2,12(r16)
    4674:	80001915 	stw	zero,100(r16)
    4678:	8000038d 	sth	zero,14(r16)
    467c:	80000415 	stw	zero,16(r16)
    4680:	80000515 	stw	zero,20(r16)
    4684:	80000615 	stw	zero,24(r16)
    4688:	000624c0 	call	624c <memset>
    468c:	05800034 	movhi	r22,0
    4690:	94400217 	ldw	r17,8(r18)
    4694:	05400034 	movhi	r21,0
    4698:	05000034 	movhi	r20,0
    469c:	04c00034 	movhi	r19,0
    46a0:	b59e9604 	addi	r22,r22,31320
    46a4:	ad5ead04 	addi	r21,r21,31412
    46a8:	a51ecc04 	addi	r20,r20,31536
    46ac:	9cdee304 	addi	r19,r19,31628
    46b0:	85800815 	stw	r22,32(r16)
    46b4:	85400915 	stw	r21,36(r16)
    46b8:	85000a15 	stw	r20,40(r16)
    46bc:	84c00b15 	stw	r19,44(r16)
    46c0:	84000715 	stw	r16,28(r16)
    46c4:	00800284 	movi	r2,10
    46c8:	8880030d 	sth	r2,12(r17)
    46cc:	00800044 	movi	r2,1
    46d0:	b80d883a 	mov	r6,r23
    46d4:	89001704 	addi	r4,r17,92
    46d8:	000b883a 	mov	r5,zero
    46dc:	88000015 	stw	zero,0(r17)
    46e0:	88000115 	stw	zero,4(r17)
    46e4:	88000215 	stw	zero,8(r17)
    46e8:	88001915 	stw	zero,100(r17)
    46ec:	8880038d 	sth	r2,14(r17)
    46f0:	88000415 	stw	zero,16(r17)
    46f4:	88000515 	stw	zero,20(r17)
    46f8:	88000615 	stw	zero,24(r17)
    46fc:	000624c0 	call	624c <memset>
    4700:	94000317 	ldw	r16,12(r18)
    4704:	00800484 	movi	r2,18
    4708:	8c400715 	stw	r17,28(r17)
    470c:	8d800815 	stw	r22,32(r17)
    4710:	8d400915 	stw	r21,36(r17)
    4714:	8d000a15 	stw	r20,40(r17)
    4718:	8cc00b15 	stw	r19,44(r17)
    471c:	8080030d 	sth	r2,12(r16)
    4720:	00800084 	movi	r2,2
    4724:	80000015 	stw	zero,0(r16)
    4728:	80000115 	stw	zero,4(r16)
    472c:	80000215 	stw	zero,8(r16)
    4730:	80001915 	stw	zero,100(r16)
    4734:	8080038d 	sth	r2,14(r16)
    4738:	80000415 	stw	zero,16(r16)
    473c:	80000515 	stw	zero,20(r16)
    4740:	80000615 	stw	zero,24(r16)
    4744:	b80d883a 	mov	r6,r23
    4748:	000b883a 	mov	r5,zero
    474c:	81001704 	addi	r4,r16,92
    4750:	000624c0 	call	624c <memset>
    4754:	00800044 	movi	r2,1
    4758:	84000715 	stw	r16,28(r16)
    475c:	85800815 	stw	r22,32(r16)
    4760:	85400915 	stw	r21,36(r16)
    4764:	85000a15 	stw	r20,40(r16)
    4768:	84c00b15 	stw	r19,44(r16)
    476c:	90800e15 	stw	r2,56(r18)
    4770:	dfc00817 	ldw	ra,32(sp)
    4774:	ddc00717 	ldw	r23,28(sp)
    4778:	dd800617 	ldw	r22,24(sp)
    477c:	dd400517 	ldw	r21,20(sp)
    4780:	dd000417 	ldw	r20,16(sp)
    4784:	dcc00317 	ldw	r19,12(sp)
    4788:	dc800217 	ldw	r18,8(sp)
    478c:	dc400117 	ldw	r17,4(sp)
    4790:	dc000017 	ldw	r16,0(sp)
    4794:	dec00904 	addi	sp,sp,36
    4798:	f800283a 	ret

0000479c <__fp_lock>:
    479c:	0005883a 	mov	r2,zero
    47a0:	f800283a 	ret

000047a4 <__sfmoreglue>:
    47a4:	defffc04 	addi	sp,sp,-16
    47a8:	dc800215 	stw	r18,8(sp)
    47ac:	2825883a 	mov	r18,r5
    47b0:	dc000015 	stw	r16,0(sp)
    47b4:	01401a04 	movi	r5,104
    47b8:	2021883a 	mov	r16,r4
    47bc:	913fffc4 	addi	r4,r18,-1
    47c0:	dfc00315 	stw	ra,12(sp)
    47c4:	dc400115 	stw	r17,4(sp)
    47c8:	000aa280 	call	aa28 <__mulsi3>
    47cc:	8009883a 	mov	r4,r16
    47d0:	11401d04 	addi	r5,r2,116
    47d4:	1023883a 	mov	r17,r2
    47d8:	00056b80 	call	56b8 <_malloc_r>
    47dc:	1021883a 	mov	r16,r2
    47e0:	10000726 	beq	r2,zero,4800 <__sfmoreglue+0x5c>
    47e4:	11000304 	addi	r4,r2,12
    47e8:	10000015 	stw	zero,0(r2)
    47ec:	14800115 	stw	r18,4(r2)
    47f0:	11000215 	stw	r4,8(r2)
    47f4:	89801a04 	addi	r6,r17,104
    47f8:	000b883a 	mov	r5,zero
    47fc:	000624c0 	call	624c <memset>
    4800:	8005883a 	mov	r2,r16
    4804:	dfc00317 	ldw	ra,12(sp)
    4808:	dc800217 	ldw	r18,8(sp)
    480c:	dc400117 	ldw	r17,4(sp)
    4810:	dc000017 	ldw	r16,0(sp)
    4814:	dec00404 	addi	sp,sp,16
    4818:	f800283a 	ret

0000481c <__sfp>:
    481c:	defffb04 	addi	sp,sp,-20
    4820:	dc000015 	stw	r16,0(sp)
    4824:	04000074 	movhi	r16,1
    4828:	84077c04 	addi	r16,r16,7664
    482c:	dcc00315 	stw	r19,12(sp)
    4830:	2027883a 	mov	r19,r4
    4834:	81000017 	ldw	r4,0(r16)
    4838:	dfc00415 	stw	ra,16(sp)
    483c:	dc800215 	stw	r18,8(sp)
    4840:	20800e17 	ldw	r2,56(r4)
    4844:	dc400115 	stw	r17,4(sp)
    4848:	1000021e 	bne	r2,zero,4854 <__sfp+0x38>
    484c:	00046000 	call	4600 <__sinit.part.1>
    4850:	81000017 	ldw	r4,0(r16)
    4854:	2480b804 	addi	r18,r4,736
    4858:	047fffc4 	movi	r17,-1
    485c:	91000117 	ldw	r4,4(r18)
    4860:	94000217 	ldw	r16,8(r18)
    4864:	213fffc4 	addi	r4,r4,-1
    4868:	20000a16 	blt	r4,zero,4894 <__sfp+0x78>
    486c:	8080030f 	ldh	r2,12(r16)
    4870:	10000c26 	beq	r2,zero,48a4 <__sfp+0x88>
    4874:	80c01d04 	addi	r3,r16,116
    4878:	00000206 	br	4884 <__sfp+0x68>
    487c:	18bfe60f 	ldh	r2,-104(r3)
    4880:	10000826 	beq	r2,zero,48a4 <__sfp+0x88>
    4884:	213fffc4 	addi	r4,r4,-1
    4888:	1c3ffd04 	addi	r16,r3,-12
    488c:	18c01a04 	addi	r3,r3,104
    4890:	247ffa1e 	bne	r4,r17,487c <__sfp+0x60>
    4894:	90800017 	ldw	r2,0(r18)
    4898:	10001d26 	beq	r2,zero,4910 <__sfp+0xf4>
    489c:	1025883a 	mov	r18,r2
    48a0:	003fee06 	br	485c <__sfp+0x40>
    48a4:	00bfffc4 	movi	r2,-1
    48a8:	8080038d 	sth	r2,14(r16)
    48ac:	00800044 	movi	r2,1
    48b0:	8080030d 	sth	r2,12(r16)
    48b4:	80001915 	stw	zero,100(r16)
    48b8:	80000015 	stw	zero,0(r16)
    48bc:	80000215 	stw	zero,8(r16)
    48c0:	80000115 	stw	zero,4(r16)
    48c4:	80000415 	stw	zero,16(r16)
    48c8:	80000515 	stw	zero,20(r16)
    48cc:	80000615 	stw	zero,24(r16)
    48d0:	01800204 	movi	r6,8
    48d4:	000b883a 	mov	r5,zero
    48d8:	81001704 	addi	r4,r16,92
    48dc:	000624c0 	call	624c <memset>
    48e0:	8005883a 	mov	r2,r16
    48e4:	80000c15 	stw	zero,48(r16)
    48e8:	80000d15 	stw	zero,52(r16)
    48ec:	80001115 	stw	zero,68(r16)
    48f0:	80001215 	stw	zero,72(r16)
    48f4:	dfc00417 	ldw	ra,16(sp)
    48f8:	dcc00317 	ldw	r19,12(sp)
    48fc:	dc800217 	ldw	r18,8(sp)
    4900:	dc400117 	ldw	r17,4(sp)
    4904:	dc000017 	ldw	r16,0(sp)
    4908:	dec00504 	addi	sp,sp,20
    490c:	f800283a 	ret
    4910:	01400104 	movi	r5,4
    4914:	9809883a 	mov	r4,r19
    4918:	00047a40 	call	47a4 <__sfmoreglue>
    491c:	90800015 	stw	r2,0(r18)
    4920:	103fde1e 	bne	r2,zero,489c <__sfp+0x80>
    4924:	00800304 	movi	r2,12
    4928:	98800015 	stw	r2,0(r19)
    492c:	0005883a 	mov	r2,zero
    4930:	003ff006 	br	48f4 <__sfp+0xd8>

00004934 <_cleanup>:
    4934:	00800074 	movhi	r2,1
    4938:	10877c04 	addi	r2,r2,7664
    493c:	11000017 	ldw	r4,0(r2)
    4940:	01400074 	movhi	r5,1
    4944:	29653e04 	addi	r5,r5,-27400
    4948:	000535c1 	jmpi	535c <_fwalk_reent>

0000494c <__sinit>:
    494c:	20800e17 	ldw	r2,56(r4)
    4950:	10000126 	beq	r2,zero,4958 <__sinit+0xc>
    4954:	f800283a 	ret
    4958:	00046001 	jmpi	4600 <__sinit.part.1>

0000495c <__sfp_lock_acquire>:
    495c:	f800283a 	ret

00004960 <__sfp_lock_release>:
    4960:	f800283a 	ret

00004964 <__sinit_lock_acquire>:
    4964:	f800283a 	ret

00004968 <__sinit_lock_release>:
    4968:	f800283a 	ret

0000496c <__fp_lock_all>:
    496c:	00800074 	movhi	r2,1
    4970:	10877d04 	addi	r2,r2,7668
    4974:	11000017 	ldw	r4,0(r2)
    4978:	01400034 	movhi	r5,0
    497c:	2951e704 	addi	r5,r5,18332
    4980:	00052981 	jmpi	5298 <_fwalk>

00004984 <__fp_unlock_all>:
    4984:	00800074 	movhi	r2,1
    4988:	10877d04 	addi	r2,r2,7668
    498c:	11000017 	ldw	r4,0(r2)
    4990:	01400034 	movhi	r5,0
    4994:	29517b04 	addi	r5,r5,17900
    4998:	00052981 	jmpi	5298 <_fwalk>

0000499c <_malloc_trim_r>:
    499c:	defffb04 	addi	sp,sp,-20
    49a0:	dcc00315 	stw	r19,12(sp)
    49a4:	04c00074 	movhi	r19,1
    49a8:	dc800215 	stw	r18,8(sp)
    49ac:	dc400115 	stw	r17,4(sp)
    49b0:	dc000015 	stw	r16,0(sp)
    49b4:	dfc00415 	stw	ra,16(sp)
    49b8:	2821883a 	mov	r16,r5
    49bc:	9cc1f804 	addi	r19,r19,2016
    49c0:	2025883a 	mov	r18,r4
    49c4:	000db300 	call	db30 <__malloc_lock>
    49c8:	98800217 	ldw	r2,8(r19)
    49cc:	14400117 	ldw	r17,4(r2)
    49d0:	00bfff04 	movi	r2,-4
    49d4:	88a2703a 	and	r17,r17,r2
    49d8:	8c21c83a 	sub	r16,r17,r16
    49dc:	8403fbc4 	addi	r16,r16,4079
    49e0:	8020d33a 	srli	r16,r16,12
    49e4:	0083ffc4 	movi	r2,4095
    49e8:	843fffc4 	addi	r16,r16,-1
    49ec:	8020933a 	slli	r16,r16,12
    49f0:	1400060e 	bge	r2,r16,4a0c <_malloc_trim_r+0x70>
    49f4:	000b883a 	mov	r5,zero
    49f8:	9009883a 	mov	r4,r18
    49fc:	0007a040 	call	7a04 <_sbrk_r>
    4a00:	98c00217 	ldw	r3,8(r19)
    4a04:	1c47883a 	add	r3,r3,r17
    4a08:	10c00a26 	beq	r2,r3,4a34 <_malloc_trim_r+0x98>
    4a0c:	9009883a 	mov	r4,r18
    4a10:	000db540 	call	db54 <__malloc_unlock>
    4a14:	0005883a 	mov	r2,zero
    4a18:	dfc00417 	ldw	ra,16(sp)
    4a1c:	dcc00317 	ldw	r19,12(sp)
    4a20:	dc800217 	ldw	r18,8(sp)
    4a24:	dc400117 	ldw	r17,4(sp)
    4a28:	dc000017 	ldw	r16,0(sp)
    4a2c:	dec00504 	addi	sp,sp,20
    4a30:	f800283a 	ret
    4a34:	040bc83a 	sub	r5,zero,r16
    4a38:	9009883a 	mov	r4,r18
    4a3c:	0007a040 	call	7a04 <_sbrk_r>
    4a40:	00ffffc4 	movi	r3,-1
    4a44:	10c00d26 	beq	r2,r3,4a7c <_malloc_trim_r+0xe0>
    4a48:	00c00074 	movhi	r3,1
    4a4c:	18ce5504 	addi	r3,r3,14676
    4a50:	18800017 	ldw	r2,0(r3)
    4a54:	99000217 	ldw	r4,8(r19)
    4a58:	8c23c83a 	sub	r17,r17,r16
    4a5c:	8c400054 	ori	r17,r17,1
    4a60:	1421c83a 	sub	r16,r2,r16
    4a64:	24400115 	stw	r17,4(r4)
    4a68:	9009883a 	mov	r4,r18
    4a6c:	1c000015 	stw	r16,0(r3)
    4a70:	000db540 	call	db54 <__malloc_unlock>
    4a74:	00800044 	movi	r2,1
    4a78:	003fe706 	br	4a18 <_malloc_trim_r+0x7c>
    4a7c:	000b883a 	mov	r5,zero
    4a80:	9009883a 	mov	r4,r18
    4a84:	0007a040 	call	7a04 <_sbrk_r>
    4a88:	99000217 	ldw	r4,8(r19)
    4a8c:	014003c4 	movi	r5,15
    4a90:	1107c83a 	sub	r3,r2,r4
    4a94:	28ffdd0e 	bge	r5,r3,4a0c <_malloc_trim_r+0x70>
    4a98:	01400074 	movhi	r5,1
    4a9c:	29477f04 	addi	r5,r5,7676
    4aa0:	29400017 	ldw	r5,0(r5)
    4aa4:	18c00054 	ori	r3,r3,1
    4aa8:	20c00115 	stw	r3,4(r4)
    4aac:	00c00074 	movhi	r3,1
    4ab0:	1145c83a 	sub	r2,r2,r5
    4ab4:	18ce5504 	addi	r3,r3,14676
    4ab8:	18800015 	stw	r2,0(r3)
    4abc:	003fd306 	br	4a0c <_malloc_trim_r+0x70>

00004ac0 <_free_r>:
    4ac0:	28004126 	beq	r5,zero,4bc8 <_free_r+0x108>
    4ac4:	defffd04 	addi	sp,sp,-12
    4ac8:	dc400115 	stw	r17,4(sp)
    4acc:	dc000015 	stw	r16,0(sp)
    4ad0:	2023883a 	mov	r17,r4
    4ad4:	2821883a 	mov	r16,r5
    4ad8:	dfc00215 	stw	ra,8(sp)
    4adc:	000db300 	call	db30 <__malloc_lock>
    4ae0:	81ffff17 	ldw	r7,-4(r16)
    4ae4:	00bfff84 	movi	r2,-2
    4ae8:	01000074 	movhi	r4,1
    4aec:	81bffe04 	addi	r6,r16,-8
    4af0:	3884703a 	and	r2,r7,r2
    4af4:	2101f804 	addi	r4,r4,2016
    4af8:	308b883a 	add	r5,r6,r2
    4afc:	2a400117 	ldw	r9,4(r5)
    4b00:	22000217 	ldw	r8,8(r4)
    4b04:	00ffff04 	movi	r3,-4
    4b08:	48c6703a 	and	r3,r9,r3
    4b0c:	2a005726 	beq	r5,r8,4c6c <_free_r+0x1ac>
    4b10:	28c00115 	stw	r3,4(r5)
    4b14:	39c0004c 	andi	r7,r7,1
    4b18:	3800091e 	bne	r7,zero,4b40 <_free_r+0x80>
    4b1c:	823ffe17 	ldw	r8,-8(r16)
    4b20:	22400204 	addi	r9,r4,8
    4b24:	320dc83a 	sub	r6,r6,r8
    4b28:	31c00217 	ldw	r7,8(r6)
    4b2c:	1205883a 	add	r2,r2,r8
    4b30:	3a406526 	beq	r7,r9,4cc8 <_free_r+0x208>
    4b34:	32000317 	ldw	r8,12(r6)
    4b38:	3a000315 	stw	r8,12(r7)
    4b3c:	41c00215 	stw	r7,8(r8)
    4b40:	28cf883a 	add	r7,r5,r3
    4b44:	39c00117 	ldw	r7,4(r7)
    4b48:	39c0004c 	andi	r7,r7,1
    4b4c:	38003a26 	beq	r7,zero,4c38 <_free_r+0x178>
    4b50:	10c00054 	ori	r3,r2,1
    4b54:	30c00115 	stw	r3,4(r6)
    4b58:	3087883a 	add	r3,r6,r2
    4b5c:	18800015 	stw	r2,0(r3)
    4b60:	00c07fc4 	movi	r3,511
    4b64:	18801936 	bltu	r3,r2,4bcc <_free_r+0x10c>
    4b68:	1004d0fa 	srli	r2,r2,3
    4b6c:	01c00044 	movi	r7,1
    4b70:	21400117 	ldw	r5,4(r4)
    4b74:	10c00044 	addi	r3,r2,1
    4b78:	18c7883a 	add	r3,r3,r3
    4b7c:	1005d0ba 	srai	r2,r2,2
    4b80:	18c7883a 	add	r3,r3,r3
    4b84:	18c7883a 	add	r3,r3,r3
    4b88:	1907883a 	add	r3,r3,r4
    4b8c:	3884983a 	sll	r2,r7,r2
    4b90:	19c00017 	ldw	r7,0(r3)
    4b94:	1a3ffe04 	addi	r8,r3,-8
    4b98:	1144b03a 	or	r2,r2,r5
    4b9c:	32000315 	stw	r8,12(r6)
    4ba0:	31c00215 	stw	r7,8(r6)
    4ba4:	20800115 	stw	r2,4(r4)
    4ba8:	19800015 	stw	r6,0(r3)
    4bac:	39800315 	stw	r6,12(r7)
    4bb0:	8809883a 	mov	r4,r17
    4bb4:	dfc00217 	ldw	ra,8(sp)
    4bb8:	dc400117 	ldw	r17,4(sp)
    4bbc:	dc000017 	ldw	r16,0(sp)
    4bc0:	dec00304 	addi	sp,sp,12
    4bc4:	000db541 	jmpi	db54 <__malloc_unlock>
    4bc8:	f800283a 	ret
    4bcc:	100ad27a 	srli	r5,r2,9
    4bd0:	00c00104 	movi	r3,4
    4bd4:	19404a36 	bltu	r3,r5,4d00 <_free_r+0x240>
    4bd8:	100ad1ba 	srli	r5,r2,6
    4bdc:	28c00e44 	addi	r3,r5,57
    4be0:	18c7883a 	add	r3,r3,r3
    4be4:	29400e04 	addi	r5,r5,56
    4be8:	18c7883a 	add	r3,r3,r3
    4bec:	18c7883a 	add	r3,r3,r3
    4bf0:	1909883a 	add	r4,r3,r4
    4bf4:	20c00017 	ldw	r3,0(r4)
    4bf8:	01c00074 	movhi	r7,1
    4bfc:	213ffe04 	addi	r4,r4,-8
    4c00:	39c1f804 	addi	r7,r7,2016
    4c04:	20c04426 	beq	r4,r3,4d18 <_free_r+0x258>
    4c08:	01ffff04 	movi	r7,-4
    4c0c:	19400117 	ldw	r5,4(r3)
    4c10:	29ca703a 	and	r5,r5,r7
    4c14:	1140022e 	bgeu	r2,r5,4c20 <_free_r+0x160>
    4c18:	18c00217 	ldw	r3,8(r3)
    4c1c:	20fffb1e 	bne	r4,r3,4c0c <_free_r+0x14c>
    4c20:	19000317 	ldw	r4,12(r3)
    4c24:	31000315 	stw	r4,12(r6)
    4c28:	30c00215 	stw	r3,8(r6)
    4c2c:	21800215 	stw	r6,8(r4)
    4c30:	19800315 	stw	r6,12(r3)
    4c34:	003fde06 	br	4bb0 <_free_r+0xf0>
    4c38:	29c00217 	ldw	r7,8(r5)
    4c3c:	10c5883a 	add	r2,r2,r3
    4c40:	00c00074 	movhi	r3,1
    4c44:	18c1fa04 	addi	r3,r3,2024
    4c48:	38c03b26 	beq	r7,r3,4d38 <_free_r+0x278>
    4c4c:	2a000317 	ldw	r8,12(r5)
    4c50:	11400054 	ori	r5,r2,1
    4c54:	3087883a 	add	r3,r6,r2
    4c58:	3a000315 	stw	r8,12(r7)
    4c5c:	41c00215 	stw	r7,8(r8)
    4c60:	31400115 	stw	r5,4(r6)
    4c64:	18800015 	stw	r2,0(r3)
    4c68:	003fbd06 	br	4b60 <_free_r+0xa0>
    4c6c:	39c0004c 	andi	r7,r7,1
    4c70:	10c5883a 	add	r2,r2,r3
    4c74:	3800071e 	bne	r7,zero,4c94 <_free_r+0x1d4>
    4c78:	81fffe17 	ldw	r7,-8(r16)
    4c7c:	31cdc83a 	sub	r6,r6,r7
    4c80:	30c00317 	ldw	r3,12(r6)
    4c84:	31400217 	ldw	r5,8(r6)
    4c88:	11c5883a 	add	r2,r2,r7
    4c8c:	28c00315 	stw	r3,12(r5)
    4c90:	19400215 	stw	r5,8(r3)
    4c94:	10c00054 	ori	r3,r2,1
    4c98:	30c00115 	stw	r3,4(r6)
    4c9c:	00c00074 	movhi	r3,1
    4ca0:	18c78004 	addi	r3,r3,7680
    4ca4:	18c00017 	ldw	r3,0(r3)
    4ca8:	21800215 	stw	r6,8(r4)
    4cac:	10ffc036 	bltu	r2,r3,4bb0 <_free_r+0xf0>
    4cb0:	00800074 	movhi	r2,1
    4cb4:	108e4c04 	addi	r2,r2,14640
    4cb8:	11400017 	ldw	r5,0(r2)
    4cbc:	8809883a 	mov	r4,r17
    4cc0:	000499c0 	call	499c <_malloc_trim_r>
    4cc4:	003fba06 	br	4bb0 <_free_r+0xf0>
    4cc8:	28c9883a 	add	r4,r5,r3
    4ccc:	21000117 	ldw	r4,4(r4)
    4cd0:	2100004c 	andi	r4,r4,1
    4cd4:	2000391e 	bne	r4,zero,4dbc <_free_r+0x2fc>
    4cd8:	29c00217 	ldw	r7,8(r5)
    4cdc:	29000317 	ldw	r4,12(r5)
    4ce0:	1885883a 	add	r2,r3,r2
    4ce4:	10c00054 	ori	r3,r2,1
    4ce8:	39000315 	stw	r4,12(r7)
    4cec:	21c00215 	stw	r7,8(r4)
    4cf0:	30c00115 	stw	r3,4(r6)
    4cf4:	308d883a 	add	r6,r6,r2
    4cf8:	30800015 	stw	r2,0(r6)
    4cfc:	003fac06 	br	4bb0 <_free_r+0xf0>
    4d00:	00c00504 	movi	r3,20
    4d04:	19401536 	bltu	r3,r5,4d5c <_free_r+0x29c>
    4d08:	28c01704 	addi	r3,r5,92
    4d0c:	18c7883a 	add	r3,r3,r3
    4d10:	294016c4 	addi	r5,r5,91
    4d14:	003fb406 	br	4be8 <_free_r+0x128>
    4d18:	280bd0ba 	srai	r5,r5,2
    4d1c:	00c00044 	movi	r3,1
    4d20:	38800117 	ldw	r2,4(r7)
    4d24:	194a983a 	sll	r5,r3,r5
    4d28:	2007883a 	mov	r3,r4
    4d2c:	2884b03a 	or	r2,r5,r2
    4d30:	38800115 	stw	r2,4(r7)
    4d34:	003fbb06 	br	4c24 <_free_r+0x164>
    4d38:	21800515 	stw	r6,20(r4)
    4d3c:	21800415 	stw	r6,16(r4)
    4d40:	10c00054 	ori	r3,r2,1
    4d44:	31c00315 	stw	r7,12(r6)
    4d48:	31c00215 	stw	r7,8(r6)
    4d4c:	30c00115 	stw	r3,4(r6)
    4d50:	308d883a 	add	r6,r6,r2
    4d54:	30800015 	stw	r2,0(r6)
    4d58:	003f9506 	br	4bb0 <_free_r+0xf0>
    4d5c:	00c01504 	movi	r3,84
    4d60:	19400536 	bltu	r3,r5,4d78 <_free_r+0x2b8>
    4d64:	100ad33a 	srli	r5,r2,12
    4d68:	28c01bc4 	addi	r3,r5,111
    4d6c:	18c7883a 	add	r3,r3,r3
    4d70:	29401b84 	addi	r5,r5,110
    4d74:	003f9c06 	br	4be8 <_free_r+0x128>
    4d78:	00c05504 	movi	r3,340
    4d7c:	19400536 	bltu	r3,r5,4d94 <_free_r+0x2d4>
    4d80:	100ad3fa 	srli	r5,r2,15
    4d84:	28c01e04 	addi	r3,r5,120
    4d88:	18c7883a 	add	r3,r3,r3
    4d8c:	29401dc4 	addi	r5,r5,119
    4d90:	003f9506 	br	4be8 <_free_r+0x128>
    4d94:	00c15504 	movi	r3,1364
    4d98:	19400536 	bltu	r3,r5,4db0 <_free_r+0x2f0>
    4d9c:	100ad4ba 	srli	r5,r2,18
    4da0:	28c01f44 	addi	r3,r5,125
    4da4:	18c7883a 	add	r3,r3,r3
    4da8:	29401f04 	addi	r5,r5,124
    4dac:	003f8e06 	br	4be8 <_free_r+0x128>
    4db0:	00c03f84 	movi	r3,254
    4db4:	01401f84 	movi	r5,126
    4db8:	003f8b06 	br	4be8 <_free_r+0x128>
    4dbc:	10c00054 	ori	r3,r2,1
    4dc0:	30c00115 	stw	r3,4(r6)
    4dc4:	308d883a 	add	r6,r6,r2
    4dc8:	30800015 	stw	r2,0(r6)
    4dcc:	003f7806 	br	4bb0 <_free_r+0xf0>

00004dd0 <__sfvwrite_r>:
    4dd0:	30800217 	ldw	r2,8(r6)
    4dd4:	10006726 	beq	r2,zero,4f74 <__sfvwrite_r+0x1a4>
    4dd8:	28c0030b 	ldhu	r3,12(r5)
    4ddc:	defff404 	addi	sp,sp,-48
    4de0:	dd400715 	stw	r21,28(sp)
    4de4:	dd000615 	stw	r20,24(sp)
    4de8:	dc000215 	stw	r16,8(sp)
    4dec:	dfc00b15 	stw	ra,44(sp)
    4df0:	df000a15 	stw	fp,40(sp)
    4df4:	ddc00915 	stw	r23,36(sp)
    4df8:	dd800815 	stw	r22,32(sp)
    4dfc:	dcc00515 	stw	r19,20(sp)
    4e00:	dc800415 	stw	r18,16(sp)
    4e04:	dc400315 	stw	r17,12(sp)
    4e08:	1880020c 	andi	r2,r3,8
    4e0c:	2821883a 	mov	r16,r5
    4e10:	202b883a 	mov	r21,r4
    4e14:	3029883a 	mov	r20,r6
    4e18:	10002726 	beq	r2,zero,4eb8 <__sfvwrite_r+0xe8>
    4e1c:	28800417 	ldw	r2,16(r5)
    4e20:	10002526 	beq	r2,zero,4eb8 <__sfvwrite_r+0xe8>
    4e24:	1880008c 	andi	r2,r3,2
    4e28:	a4400017 	ldw	r17,0(r20)
    4e2c:	10002a26 	beq	r2,zero,4ed8 <__sfvwrite_r+0x108>
    4e30:	05a00034 	movhi	r22,32768
    4e34:	0027883a 	mov	r19,zero
    4e38:	0025883a 	mov	r18,zero
    4e3c:	b5bf0004 	addi	r22,r22,-1024
    4e40:	980d883a 	mov	r6,r19
    4e44:	a809883a 	mov	r4,r21
    4e48:	90004626 	beq	r18,zero,4f64 <__sfvwrite_r+0x194>
    4e4c:	900f883a 	mov	r7,r18
    4e50:	b480022e 	bgeu	r22,r18,4e5c <__sfvwrite_r+0x8c>
    4e54:	01e00034 	movhi	r7,32768
    4e58:	39ff0004 	addi	r7,r7,-1024
    4e5c:	80800917 	ldw	r2,36(r16)
    4e60:	81400717 	ldw	r5,28(r16)
    4e64:	103ee83a 	callr	r2
    4e68:	00805a0e 	bge	zero,r2,4fd4 <__sfvwrite_r+0x204>
    4e6c:	a0c00217 	ldw	r3,8(r20)
    4e70:	98a7883a 	add	r19,r19,r2
    4e74:	90a5c83a 	sub	r18,r18,r2
    4e78:	1885c83a 	sub	r2,r3,r2
    4e7c:	a0800215 	stw	r2,8(r20)
    4e80:	103fef1e 	bne	r2,zero,4e40 <__sfvwrite_r+0x70>
    4e84:	0005883a 	mov	r2,zero
    4e88:	dfc00b17 	ldw	ra,44(sp)
    4e8c:	df000a17 	ldw	fp,40(sp)
    4e90:	ddc00917 	ldw	r23,36(sp)
    4e94:	dd800817 	ldw	r22,32(sp)
    4e98:	dd400717 	ldw	r21,28(sp)
    4e9c:	dd000617 	ldw	r20,24(sp)
    4ea0:	dcc00517 	ldw	r19,20(sp)
    4ea4:	dc800417 	ldw	r18,16(sp)
    4ea8:	dc400317 	ldw	r17,12(sp)
    4eac:	dc000217 	ldw	r16,8(sp)
    4eb0:	dec00c04 	addi	sp,sp,48
    4eb4:	f800283a 	ret
    4eb8:	800b883a 	mov	r5,r16
    4ebc:	a809883a 	mov	r4,r21
    4ec0:	00029400 	call	2940 <__swsetup_r>
    4ec4:	1000ee1e 	bne	r2,zero,5280 <__sfvwrite_r+0x4b0>
    4ec8:	80c0030b 	ldhu	r3,12(r16)
    4ecc:	a4400017 	ldw	r17,0(r20)
    4ed0:	1880008c 	andi	r2,r3,2
    4ed4:	103fd61e 	bne	r2,zero,4e30 <__sfvwrite_r+0x60>
    4ed8:	1880004c 	andi	r2,r3,1
    4edc:	1000421e 	bne	r2,zero,4fe8 <__sfvwrite_r+0x218>
    4ee0:	0039883a 	mov	fp,zero
    4ee4:	0025883a 	mov	r18,zero
    4ee8:	90001a26 	beq	r18,zero,4f54 <__sfvwrite_r+0x184>
    4eec:	1880800c 	andi	r2,r3,512
    4ef0:	84c00217 	ldw	r19,8(r16)
    4ef4:	10002126 	beq	r2,zero,4f7c <__sfvwrite_r+0x1ac>
    4ef8:	982f883a 	mov	r23,r19
    4efc:	94c09636 	bltu	r18,r19,5158 <__sfvwrite_r+0x388>
    4f00:	1881200c 	andi	r2,r3,1152
    4f04:	1000a11e 	bne	r2,zero,518c <__sfvwrite_r+0x3bc>
    4f08:	81000017 	ldw	r4,0(r16)
    4f0c:	b80d883a 	mov	r6,r23
    4f10:	e00b883a 	mov	r5,fp
    4f14:	00060f00 	call	60f0 <memmove>
    4f18:	80c00217 	ldw	r3,8(r16)
    4f1c:	81000017 	ldw	r4,0(r16)
    4f20:	9005883a 	mov	r2,r18
    4f24:	1ce7c83a 	sub	r19,r3,r19
    4f28:	25cf883a 	add	r7,r4,r23
    4f2c:	84c00215 	stw	r19,8(r16)
    4f30:	81c00015 	stw	r7,0(r16)
    4f34:	a0c00217 	ldw	r3,8(r20)
    4f38:	e0b9883a 	add	fp,fp,r2
    4f3c:	90a5c83a 	sub	r18,r18,r2
    4f40:	18a7c83a 	sub	r19,r3,r2
    4f44:	a4c00215 	stw	r19,8(r20)
    4f48:	983fce26 	beq	r19,zero,4e84 <__sfvwrite_r+0xb4>
    4f4c:	80c0030b 	ldhu	r3,12(r16)
    4f50:	903fe61e 	bne	r18,zero,4eec <__sfvwrite_r+0x11c>
    4f54:	8f000017 	ldw	fp,0(r17)
    4f58:	8c800117 	ldw	r18,4(r17)
    4f5c:	8c400204 	addi	r17,r17,8
    4f60:	003fe106 	br	4ee8 <__sfvwrite_r+0x118>
    4f64:	8cc00017 	ldw	r19,0(r17)
    4f68:	8c800117 	ldw	r18,4(r17)
    4f6c:	8c400204 	addi	r17,r17,8
    4f70:	003fb306 	br	4e40 <__sfvwrite_r+0x70>
    4f74:	0005883a 	mov	r2,zero
    4f78:	f800283a 	ret
    4f7c:	81000017 	ldw	r4,0(r16)
    4f80:	80800417 	ldw	r2,16(r16)
    4f84:	11005a36 	bltu	r2,r4,50f0 <__sfvwrite_r+0x320>
    4f88:	85c00517 	ldw	r23,20(r16)
    4f8c:	95c05836 	bltu	r18,r23,50f0 <__sfvwrite_r+0x320>
    4f90:	00a00034 	movhi	r2,32768
    4f94:	10bfffc4 	addi	r2,r2,-1
    4f98:	9009883a 	mov	r4,r18
    4f9c:	1480012e 	bgeu	r2,r18,4fa4 <__sfvwrite_r+0x1d4>
    4fa0:	1009883a 	mov	r4,r2
    4fa4:	b80b883a 	mov	r5,r23
    4fa8:	000a8740 	call	a874 <__divsi3>
    4fac:	b80b883a 	mov	r5,r23
    4fb0:	1009883a 	mov	r4,r2
    4fb4:	000aa280 	call	aa28 <__mulsi3>
    4fb8:	81400717 	ldw	r5,28(r16)
    4fbc:	80c00917 	ldw	r3,36(r16)
    4fc0:	100f883a 	mov	r7,r2
    4fc4:	e00d883a 	mov	r6,fp
    4fc8:	a809883a 	mov	r4,r21
    4fcc:	183ee83a 	callr	r3
    4fd0:	00bfd816 	blt	zero,r2,4f34 <__sfvwrite_r+0x164>
    4fd4:	8080030b 	ldhu	r2,12(r16)
    4fd8:	10801014 	ori	r2,r2,64
    4fdc:	8080030d 	sth	r2,12(r16)
    4fe0:	00bfffc4 	movi	r2,-1
    4fe4:	003fa806 	br	4e88 <__sfvwrite_r+0xb8>
    4fe8:	0027883a 	mov	r19,zero
    4fec:	0011883a 	mov	r8,zero
    4ff0:	0039883a 	mov	fp,zero
    4ff4:	0025883a 	mov	r18,zero
    4ff8:	90001f26 	beq	r18,zero,5078 <__sfvwrite_r+0x2a8>
    4ffc:	40005a26 	beq	r8,zero,5168 <__sfvwrite_r+0x398>
    5000:	982d883a 	mov	r22,r19
    5004:	94c0012e 	bgeu	r18,r19,500c <__sfvwrite_r+0x23c>
    5008:	902d883a 	mov	r22,r18
    500c:	81000017 	ldw	r4,0(r16)
    5010:	80800417 	ldw	r2,16(r16)
    5014:	b02f883a 	mov	r23,r22
    5018:	81c00517 	ldw	r7,20(r16)
    501c:	1100032e 	bgeu	r2,r4,502c <__sfvwrite_r+0x25c>
    5020:	80c00217 	ldw	r3,8(r16)
    5024:	38c7883a 	add	r3,r7,r3
    5028:	1d801816 	blt	r3,r22,508c <__sfvwrite_r+0x2bc>
    502c:	b1c03e16 	blt	r22,r7,5128 <__sfvwrite_r+0x358>
    5030:	80800917 	ldw	r2,36(r16)
    5034:	81400717 	ldw	r5,28(r16)
    5038:	e00d883a 	mov	r6,fp
    503c:	da000115 	stw	r8,4(sp)
    5040:	a809883a 	mov	r4,r21
    5044:	103ee83a 	callr	r2
    5048:	102f883a 	mov	r23,r2
    504c:	da000117 	ldw	r8,4(sp)
    5050:	00bfe00e 	bge	zero,r2,4fd4 <__sfvwrite_r+0x204>
    5054:	9de7c83a 	sub	r19,r19,r23
    5058:	98001f26 	beq	r19,zero,50d8 <__sfvwrite_r+0x308>
    505c:	a0800217 	ldw	r2,8(r20)
    5060:	e5f9883a 	add	fp,fp,r23
    5064:	95e5c83a 	sub	r18,r18,r23
    5068:	15efc83a 	sub	r23,r2,r23
    506c:	a5c00215 	stw	r23,8(r20)
    5070:	b83f8426 	beq	r23,zero,4e84 <__sfvwrite_r+0xb4>
    5074:	903fe11e 	bne	r18,zero,4ffc <__sfvwrite_r+0x22c>
    5078:	8f000017 	ldw	fp,0(r17)
    507c:	8c800117 	ldw	r18,4(r17)
    5080:	0011883a 	mov	r8,zero
    5084:	8c400204 	addi	r17,r17,8
    5088:	003fdb06 	br	4ff8 <__sfvwrite_r+0x228>
    508c:	180d883a 	mov	r6,r3
    5090:	e00b883a 	mov	r5,fp
    5094:	da000115 	stw	r8,4(sp)
    5098:	d8c00015 	stw	r3,0(sp)
    509c:	00060f00 	call	60f0 <memmove>
    50a0:	d8c00017 	ldw	r3,0(sp)
    50a4:	80800017 	ldw	r2,0(r16)
    50a8:	800b883a 	mov	r5,r16
    50ac:	a809883a 	mov	r4,r21
    50b0:	10c5883a 	add	r2,r2,r3
    50b4:	80800015 	stw	r2,0(r16)
    50b8:	d8c00015 	stw	r3,0(sp)
    50bc:	00045600 	call	4560 <_fflush_r>
    50c0:	d8c00017 	ldw	r3,0(sp)
    50c4:	da000117 	ldw	r8,4(sp)
    50c8:	103fc21e 	bne	r2,zero,4fd4 <__sfvwrite_r+0x204>
    50cc:	182f883a 	mov	r23,r3
    50d0:	9de7c83a 	sub	r19,r19,r23
    50d4:	983fe11e 	bne	r19,zero,505c <__sfvwrite_r+0x28c>
    50d8:	800b883a 	mov	r5,r16
    50dc:	a809883a 	mov	r4,r21
    50e0:	00045600 	call	4560 <_fflush_r>
    50e4:	103fbb1e 	bne	r2,zero,4fd4 <__sfvwrite_r+0x204>
    50e8:	0011883a 	mov	r8,zero
    50ec:	003fdb06 	br	505c <__sfvwrite_r+0x28c>
    50f0:	94c0012e 	bgeu	r18,r19,50f8 <__sfvwrite_r+0x328>
    50f4:	9027883a 	mov	r19,r18
    50f8:	980d883a 	mov	r6,r19
    50fc:	e00b883a 	mov	r5,fp
    5100:	00060f00 	call	60f0 <memmove>
    5104:	80800217 	ldw	r2,8(r16)
    5108:	80c00017 	ldw	r3,0(r16)
    510c:	14c5c83a 	sub	r2,r2,r19
    5110:	1cc7883a 	add	r3,r3,r19
    5114:	80800215 	stw	r2,8(r16)
    5118:	80c00015 	stw	r3,0(r16)
    511c:	10004326 	beq	r2,zero,522c <__sfvwrite_r+0x45c>
    5120:	9805883a 	mov	r2,r19
    5124:	003f8306 	br	4f34 <__sfvwrite_r+0x164>
    5128:	b00d883a 	mov	r6,r22
    512c:	e00b883a 	mov	r5,fp
    5130:	da000115 	stw	r8,4(sp)
    5134:	00060f00 	call	60f0 <memmove>
    5138:	80800217 	ldw	r2,8(r16)
    513c:	80c00017 	ldw	r3,0(r16)
    5140:	da000117 	ldw	r8,4(sp)
    5144:	1585c83a 	sub	r2,r2,r22
    5148:	1dad883a 	add	r22,r3,r22
    514c:	80800215 	stw	r2,8(r16)
    5150:	85800015 	stw	r22,0(r16)
    5154:	003fbf06 	br	5054 <__sfvwrite_r+0x284>
    5158:	81000017 	ldw	r4,0(r16)
    515c:	9027883a 	mov	r19,r18
    5160:	902f883a 	mov	r23,r18
    5164:	003f6906 	br	4f0c <__sfvwrite_r+0x13c>
    5168:	900d883a 	mov	r6,r18
    516c:	01400284 	movi	r5,10
    5170:	e009883a 	mov	r4,fp
    5174:	0005ec40 	call	5ec4 <memchr>
    5178:	10003e26 	beq	r2,zero,5274 <__sfvwrite_r+0x4a4>
    517c:	10800044 	addi	r2,r2,1
    5180:	1727c83a 	sub	r19,r2,fp
    5184:	02000044 	movi	r8,1
    5188:	003f9d06 	br	5000 <__sfvwrite_r+0x230>
    518c:	80800517 	ldw	r2,20(r16)
    5190:	81400417 	ldw	r5,16(r16)
    5194:	81c00017 	ldw	r7,0(r16)
    5198:	10a7883a 	add	r19,r2,r2
    519c:	9885883a 	add	r2,r19,r2
    51a0:	1026d7fa 	srli	r19,r2,31
    51a4:	396dc83a 	sub	r22,r7,r5
    51a8:	b1000044 	addi	r4,r22,1
    51ac:	9885883a 	add	r2,r19,r2
    51b0:	1027d07a 	srai	r19,r2,1
    51b4:	2485883a 	add	r2,r4,r18
    51b8:	980d883a 	mov	r6,r19
    51bc:	9880022e 	bgeu	r19,r2,51c8 <__sfvwrite_r+0x3f8>
    51c0:	1027883a 	mov	r19,r2
    51c4:	100d883a 	mov	r6,r2
    51c8:	18c1000c 	andi	r3,r3,1024
    51cc:	18001c26 	beq	r3,zero,5240 <__sfvwrite_r+0x470>
    51d0:	300b883a 	mov	r5,r6
    51d4:	a809883a 	mov	r4,r21
    51d8:	00056b80 	call	56b8 <_malloc_r>
    51dc:	102f883a 	mov	r23,r2
    51e0:	10002926 	beq	r2,zero,5288 <__sfvwrite_r+0x4b8>
    51e4:	81400417 	ldw	r5,16(r16)
    51e8:	b00d883a 	mov	r6,r22
    51ec:	1009883a 	mov	r4,r2
    51f0:	0005fa80 	call	5fa8 <memcpy>
    51f4:	8080030b 	ldhu	r2,12(r16)
    51f8:	00fedfc4 	movi	r3,-1153
    51fc:	10c4703a 	and	r2,r2,r3
    5200:	10802014 	ori	r2,r2,128
    5204:	8080030d 	sth	r2,12(r16)
    5208:	bd89883a 	add	r4,r23,r22
    520c:	9d8fc83a 	sub	r7,r19,r22
    5210:	85c00415 	stw	r23,16(r16)
    5214:	84c00515 	stw	r19,20(r16)
    5218:	81000015 	stw	r4,0(r16)
    521c:	9027883a 	mov	r19,r18
    5220:	81c00215 	stw	r7,8(r16)
    5224:	902f883a 	mov	r23,r18
    5228:	003f3806 	br	4f0c <__sfvwrite_r+0x13c>
    522c:	800b883a 	mov	r5,r16
    5230:	a809883a 	mov	r4,r21
    5234:	00045600 	call	4560 <_fflush_r>
    5238:	103fb926 	beq	r2,zero,5120 <__sfvwrite_r+0x350>
    523c:	003f6506 	br	4fd4 <__sfvwrite_r+0x204>
    5240:	a809883a 	mov	r4,r21
    5244:	000742c0 	call	742c <_realloc_r>
    5248:	102f883a 	mov	r23,r2
    524c:	103fee1e 	bne	r2,zero,5208 <__sfvwrite_r+0x438>
    5250:	81400417 	ldw	r5,16(r16)
    5254:	a809883a 	mov	r4,r21
    5258:	0004ac00 	call	4ac0 <_free_r>
    525c:	8080030b 	ldhu	r2,12(r16)
    5260:	00ffdfc4 	movi	r3,-129
    5264:	1884703a 	and	r2,r3,r2
    5268:	00c00304 	movi	r3,12
    526c:	a8c00015 	stw	r3,0(r21)
    5270:	003f5906 	br	4fd8 <__sfvwrite_r+0x208>
    5274:	94c00044 	addi	r19,r18,1
    5278:	02000044 	movi	r8,1
    527c:	003f6006 	br	5000 <__sfvwrite_r+0x230>
    5280:	00bfffc4 	movi	r2,-1
    5284:	003f0006 	br	4e88 <__sfvwrite_r+0xb8>
    5288:	00800304 	movi	r2,12
    528c:	a8800015 	stw	r2,0(r21)
    5290:	8080030b 	ldhu	r2,12(r16)
    5294:	003f5006 	br	4fd8 <__sfvwrite_r+0x208>

00005298 <_fwalk>:
    5298:	defff704 	addi	sp,sp,-36
    529c:	dd000415 	stw	r20,16(sp)
    52a0:	dfc00815 	stw	ra,32(sp)
    52a4:	ddc00715 	stw	r23,28(sp)
    52a8:	dd800615 	stw	r22,24(sp)
    52ac:	dd400515 	stw	r21,20(sp)
    52b0:	dcc00315 	stw	r19,12(sp)
    52b4:	dc800215 	stw	r18,8(sp)
    52b8:	dc400115 	stw	r17,4(sp)
    52bc:	dc000015 	stw	r16,0(sp)
    52c0:	2500b804 	addi	r20,r4,736
    52c4:	a0002326 	beq	r20,zero,5354 <_fwalk+0xbc>
    52c8:	282b883a 	mov	r21,r5
    52cc:	002f883a 	mov	r23,zero
    52d0:	05800044 	movi	r22,1
    52d4:	04ffffc4 	movi	r19,-1
    52d8:	a4400117 	ldw	r17,4(r20)
    52dc:	a4800217 	ldw	r18,8(r20)
    52e0:	8c7fffc4 	addi	r17,r17,-1
    52e4:	88000d16 	blt	r17,zero,531c <_fwalk+0x84>
    52e8:	94000304 	addi	r16,r18,12
    52ec:	94800384 	addi	r18,r18,14
    52f0:	8080000b 	ldhu	r2,0(r16)
    52f4:	8c7fffc4 	addi	r17,r17,-1
    52f8:	813ffd04 	addi	r4,r16,-12
    52fc:	b080042e 	bgeu	r22,r2,5310 <_fwalk+0x78>
    5300:	9080000f 	ldh	r2,0(r18)
    5304:	14c00226 	beq	r2,r19,5310 <_fwalk+0x78>
    5308:	a83ee83a 	callr	r21
    530c:	b8aeb03a 	or	r23,r23,r2
    5310:	84001a04 	addi	r16,r16,104
    5314:	94801a04 	addi	r18,r18,104
    5318:	8cfff51e 	bne	r17,r19,52f0 <_fwalk+0x58>
    531c:	a5000017 	ldw	r20,0(r20)
    5320:	a03fed1e 	bne	r20,zero,52d8 <_fwalk+0x40>
    5324:	b805883a 	mov	r2,r23
    5328:	dfc00817 	ldw	ra,32(sp)
    532c:	ddc00717 	ldw	r23,28(sp)
    5330:	dd800617 	ldw	r22,24(sp)
    5334:	dd400517 	ldw	r21,20(sp)
    5338:	dd000417 	ldw	r20,16(sp)
    533c:	dcc00317 	ldw	r19,12(sp)
    5340:	dc800217 	ldw	r18,8(sp)
    5344:	dc400117 	ldw	r17,4(sp)
    5348:	dc000017 	ldw	r16,0(sp)
    534c:	dec00904 	addi	sp,sp,36
    5350:	f800283a 	ret
    5354:	002f883a 	mov	r23,zero
    5358:	003ff206 	br	5324 <_fwalk+0x8c>

0000535c <_fwalk_reent>:
    535c:	defff704 	addi	sp,sp,-36
    5360:	dd000415 	stw	r20,16(sp)
    5364:	dfc00815 	stw	ra,32(sp)
    5368:	ddc00715 	stw	r23,28(sp)
    536c:	dd800615 	stw	r22,24(sp)
    5370:	dd400515 	stw	r21,20(sp)
    5374:	dcc00315 	stw	r19,12(sp)
    5378:	dc800215 	stw	r18,8(sp)
    537c:	dc400115 	stw	r17,4(sp)
    5380:	dc000015 	stw	r16,0(sp)
    5384:	2500b804 	addi	r20,r4,736
    5388:	a0002326 	beq	r20,zero,5418 <_fwalk_reent+0xbc>
    538c:	282b883a 	mov	r21,r5
    5390:	2027883a 	mov	r19,r4
    5394:	002f883a 	mov	r23,zero
    5398:	05800044 	movi	r22,1
    539c:	04bfffc4 	movi	r18,-1
    53a0:	a4400117 	ldw	r17,4(r20)
    53a4:	a4000217 	ldw	r16,8(r20)
    53a8:	8c7fffc4 	addi	r17,r17,-1
    53ac:	88000c16 	blt	r17,zero,53e0 <_fwalk_reent+0x84>
    53b0:	84000304 	addi	r16,r16,12
    53b4:	8080000b 	ldhu	r2,0(r16)
    53b8:	8c7fffc4 	addi	r17,r17,-1
    53bc:	817ffd04 	addi	r5,r16,-12
    53c0:	b080052e 	bgeu	r22,r2,53d8 <_fwalk_reent+0x7c>
    53c4:	8080008f 	ldh	r2,2(r16)
    53c8:	9809883a 	mov	r4,r19
    53cc:	14800226 	beq	r2,r18,53d8 <_fwalk_reent+0x7c>
    53d0:	a83ee83a 	callr	r21
    53d4:	b8aeb03a 	or	r23,r23,r2
    53d8:	84001a04 	addi	r16,r16,104
    53dc:	8cbff51e 	bne	r17,r18,53b4 <_fwalk_reent+0x58>
    53e0:	a5000017 	ldw	r20,0(r20)
    53e4:	a03fee1e 	bne	r20,zero,53a0 <_fwalk_reent+0x44>
    53e8:	b805883a 	mov	r2,r23
    53ec:	dfc00817 	ldw	ra,32(sp)
    53f0:	ddc00717 	ldw	r23,28(sp)
    53f4:	dd800617 	ldw	r22,24(sp)
    53f8:	dd400517 	ldw	r21,20(sp)
    53fc:	dd000417 	ldw	r20,16(sp)
    5400:	dcc00317 	ldw	r19,12(sp)
    5404:	dc800217 	ldw	r18,8(sp)
    5408:	dc400117 	ldw	r17,4(sp)
    540c:	dc000017 	ldw	r16,0(sp)
    5410:	dec00904 	addi	sp,sp,36
    5414:	f800283a 	ret
    5418:	002f883a 	mov	r23,zero
    541c:	003ff206 	br	53e8 <_fwalk_reent+0x8c>

00005420 <_setlocale_r>:
    5420:	30001b26 	beq	r6,zero,5490 <_setlocale_r+0x70>
    5424:	01400074 	movhi	r5,1
    5428:	defffe04 	addi	sp,sp,-8
    542c:	29403004 	addi	r5,r5,192
    5430:	3009883a 	mov	r4,r6
    5434:	dc000015 	stw	r16,0(sp)
    5438:	dfc00115 	stw	ra,4(sp)
    543c:	3021883a 	mov	r16,r6
    5440:	0007b940 	call	7b94 <strcmp>
    5444:	1000061e 	bne	r2,zero,5460 <_setlocale_r+0x40>
    5448:	00800074 	movhi	r2,1
    544c:	10802f04 	addi	r2,r2,188
    5450:	dfc00117 	ldw	ra,4(sp)
    5454:	dc000017 	ldw	r16,0(sp)
    5458:	dec00204 	addi	sp,sp,8
    545c:	f800283a 	ret
    5460:	01400074 	movhi	r5,1
    5464:	29402f04 	addi	r5,r5,188
    5468:	8009883a 	mov	r4,r16
    546c:	0007b940 	call	7b94 <strcmp>
    5470:	103ff526 	beq	r2,zero,5448 <_setlocale_r+0x28>
    5474:	01400074 	movhi	r5,1
    5478:	29401a04 	addi	r5,r5,104
    547c:	8009883a 	mov	r4,r16
    5480:	0007b940 	call	7b94 <strcmp>
    5484:	103ff026 	beq	r2,zero,5448 <_setlocale_r+0x28>
    5488:	0005883a 	mov	r2,zero
    548c:	003ff006 	br	5450 <_setlocale_r+0x30>
    5490:	00800074 	movhi	r2,1
    5494:	10802f04 	addi	r2,r2,188
    5498:	f800283a 	ret

0000549c <__locale_charset>:
    549c:	00800074 	movhi	r2,1
    54a0:	1081e204 	addi	r2,r2,1928
    54a4:	f800283a 	ret

000054a8 <__locale_mb_cur_max>:
    54a8:	00800074 	movhi	r2,1
    54ac:	10877e04 	addi	r2,r2,7672
    54b0:	10800017 	ldw	r2,0(r2)
    54b4:	f800283a 	ret

000054b8 <__locale_msgcharset>:
    54b8:	00800074 	movhi	r2,1
    54bc:	1081da04 	addi	r2,r2,1896
    54c0:	f800283a 	ret

000054c4 <__locale_cjk_lang>:
    54c4:	0005883a 	mov	r2,zero
    54c8:	f800283a 	ret

000054cc <_localeconv_r>:
    54cc:	00800074 	movhi	r2,1
    54d0:	1081ea04 	addi	r2,r2,1960
    54d4:	f800283a 	ret

000054d8 <setlocale>:
    54d8:	00800074 	movhi	r2,1
    54dc:	10877d04 	addi	r2,r2,7668
    54e0:	280d883a 	mov	r6,r5
    54e4:	200b883a 	mov	r5,r4
    54e8:	11000017 	ldw	r4,0(r2)
    54ec:	00054201 	jmpi	5420 <_setlocale_r>

000054f0 <localeconv>:
    54f0:	00800074 	movhi	r2,1
    54f4:	1081ea04 	addi	r2,r2,1960
    54f8:	f800283a 	ret

000054fc <__smakebuf_r>:
    54fc:	2880030b 	ldhu	r2,12(r5)
    5500:	10c0008c 	andi	r3,r2,2
    5504:	1800411e 	bne	r3,zero,560c <__smakebuf_r+0x110>
    5508:	deffec04 	addi	sp,sp,-80
    550c:	dc000f15 	stw	r16,60(sp)
    5510:	2821883a 	mov	r16,r5
    5514:	2940038f 	ldh	r5,14(r5)
    5518:	dc401015 	stw	r17,64(sp)
    551c:	dfc01315 	stw	ra,76(sp)
    5520:	dcc01215 	stw	r19,72(sp)
    5524:	dc801115 	stw	r18,68(sp)
    5528:	2023883a 	mov	r17,r4
    552c:	28001c16 	blt	r5,zero,55a0 <__smakebuf_r+0xa4>
    5530:	d80d883a 	mov	r6,sp
    5534:	00098040 	call	9804 <_fstat_r>
    5538:	10001816 	blt	r2,zero,559c <__smakebuf_r+0xa0>
    553c:	d8800117 	ldw	r2,4(sp)
    5540:	00e00014 	movui	r3,32768
    5544:	10bc000c 	andi	r2,r2,61440
    5548:	14c80020 	cmpeqi	r19,r2,8192
    554c:	10c03726 	beq	r2,r3,562c <__smakebuf_r+0x130>
    5550:	80c0030b 	ldhu	r3,12(r16)
    5554:	18c20014 	ori	r3,r3,2048
    5558:	80c0030d 	sth	r3,12(r16)
    555c:	00c80004 	movi	r3,8192
    5560:	10c0521e 	bne	r2,r3,56ac <__smakebuf_r+0x1b0>
    5564:	8140038f 	ldh	r5,14(r16)
    5568:	8809883a 	mov	r4,r17
    556c:	00098600 	call	9860 <_isatty_r>
    5570:	10004c26 	beq	r2,zero,56a4 <__smakebuf_r+0x1a8>
    5574:	8080030b 	ldhu	r2,12(r16)
    5578:	80c010c4 	addi	r3,r16,67
    557c:	80c00015 	stw	r3,0(r16)
    5580:	10800054 	ori	r2,r2,1
    5584:	8080030d 	sth	r2,12(r16)
    5588:	00800044 	movi	r2,1
    558c:	80c00415 	stw	r3,16(r16)
    5590:	80800515 	stw	r2,20(r16)
    5594:	04810004 	movi	r18,1024
    5598:	00000706 	br	55b8 <__smakebuf_r+0xbc>
    559c:	8080030b 	ldhu	r2,12(r16)
    55a0:	10c0200c 	andi	r3,r2,128
    55a4:	18001f1e 	bne	r3,zero,5624 <__smakebuf_r+0x128>
    55a8:	04810004 	movi	r18,1024
    55ac:	10820014 	ori	r2,r2,2048
    55b0:	8080030d 	sth	r2,12(r16)
    55b4:	0027883a 	mov	r19,zero
    55b8:	900b883a 	mov	r5,r18
    55bc:	8809883a 	mov	r4,r17
    55c0:	00056b80 	call	56b8 <_malloc_r>
    55c4:	10002c26 	beq	r2,zero,5678 <__smakebuf_r+0x17c>
    55c8:	80c0030b 	ldhu	r3,12(r16)
    55cc:	01000034 	movhi	r4,0
    55d0:	21117d04 	addi	r4,r4,17908
    55d4:	89000f15 	stw	r4,60(r17)
    55d8:	18c02014 	ori	r3,r3,128
    55dc:	80c0030d 	sth	r3,12(r16)
    55e0:	80800015 	stw	r2,0(r16)
    55e4:	80800415 	stw	r2,16(r16)
    55e8:	84800515 	stw	r18,20(r16)
    55ec:	98001a1e 	bne	r19,zero,5658 <__smakebuf_r+0x15c>
    55f0:	dfc01317 	ldw	ra,76(sp)
    55f4:	dcc01217 	ldw	r19,72(sp)
    55f8:	dc801117 	ldw	r18,68(sp)
    55fc:	dc401017 	ldw	r17,64(sp)
    5600:	dc000f17 	ldw	r16,60(sp)
    5604:	dec01404 	addi	sp,sp,80
    5608:	f800283a 	ret
    560c:	288010c4 	addi	r2,r5,67
    5610:	28800015 	stw	r2,0(r5)
    5614:	28800415 	stw	r2,16(r5)
    5618:	00800044 	movi	r2,1
    561c:	28800515 	stw	r2,20(r5)
    5620:	f800283a 	ret
    5624:	04801004 	movi	r18,64
    5628:	003fe006 	br	55ac <__smakebuf_r+0xb0>
    562c:	81000a17 	ldw	r4,40(r16)
    5630:	00c00034 	movhi	r3,0
    5634:	18decc04 	addi	r3,r3,31536
    5638:	20ffc51e 	bne	r4,r3,5550 <__smakebuf_r+0x54>
    563c:	8080030b 	ldhu	r2,12(r16)
    5640:	04810004 	movi	r18,1024
    5644:	84801315 	stw	r18,76(r16)
    5648:	1484b03a 	or	r2,r2,r18
    564c:	8080030d 	sth	r2,12(r16)
    5650:	0027883a 	mov	r19,zero
    5654:	003fd806 	br	55b8 <__smakebuf_r+0xbc>
    5658:	8140038f 	ldh	r5,14(r16)
    565c:	8809883a 	mov	r4,r17
    5660:	00098600 	call	9860 <_isatty_r>
    5664:	103fe226 	beq	r2,zero,55f0 <__smakebuf_r+0xf4>
    5668:	8080030b 	ldhu	r2,12(r16)
    566c:	10800054 	ori	r2,r2,1
    5670:	8080030d 	sth	r2,12(r16)
    5674:	003fde06 	br	55f0 <__smakebuf_r+0xf4>
    5678:	8080030b 	ldhu	r2,12(r16)
    567c:	10c0800c 	andi	r3,r2,512
    5680:	183fdb1e 	bne	r3,zero,55f0 <__smakebuf_r+0xf4>
    5684:	10800094 	ori	r2,r2,2
    5688:	80c010c4 	addi	r3,r16,67
    568c:	8080030d 	sth	r2,12(r16)
    5690:	00800044 	movi	r2,1
    5694:	80c00015 	stw	r3,0(r16)
    5698:	80c00415 	stw	r3,16(r16)
    569c:	80800515 	stw	r2,20(r16)
    56a0:	003fd306 	br	55f0 <__smakebuf_r+0xf4>
    56a4:	04810004 	movi	r18,1024
    56a8:	003fc306 	br	55b8 <__smakebuf_r+0xbc>
    56ac:	0027883a 	mov	r19,zero
    56b0:	04810004 	movi	r18,1024
    56b4:	003fc006 	br	55b8 <__smakebuf_r+0xbc>

000056b8 <_malloc_r>:
    56b8:	defff504 	addi	sp,sp,-44
    56bc:	dc800315 	stw	r18,12(sp)
    56c0:	dfc00a15 	stw	ra,40(sp)
    56c4:	df000915 	stw	fp,36(sp)
    56c8:	ddc00815 	stw	r23,32(sp)
    56cc:	dd800715 	stw	r22,28(sp)
    56d0:	dd400615 	stw	r21,24(sp)
    56d4:	dd000515 	stw	r20,20(sp)
    56d8:	dcc00415 	stw	r19,16(sp)
    56dc:	dc400215 	stw	r17,8(sp)
    56e0:	dc000115 	stw	r16,4(sp)
    56e4:	288002c4 	addi	r2,r5,11
    56e8:	00c00584 	movi	r3,22
    56ec:	2025883a 	mov	r18,r4
    56f0:	18807f2e 	bgeu	r3,r2,58f0 <_malloc_r+0x238>
    56f4:	047ffe04 	movi	r17,-8
    56f8:	1462703a 	and	r17,r2,r17
    56fc:	8800a316 	blt	r17,zero,598c <_malloc_r+0x2d4>
    5700:	8940a236 	bltu	r17,r5,598c <_malloc_r+0x2d4>
    5704:	000db300 	call	db30 <__malloc_lock>
    5708:	00807dc4 	movi	r2,503
    570c:	1441e92e 	bgeu	r2,r17,5eb4 <_malloc_r+0x7fc>
    5710:	8804d27a 	srli	r2,r17,9
    5714:	1000a126 	beq	r2,zero,599c <_malloc_r+0x2e4>
    5718:	00c00104 	movi	r3,4
    571c:	18811e36 	bltu	r3,r2,5b98 <_malloc_r+0x4e0>
    5720:	8804d1ba 	srli	r2,r17,6
    5724:	12000e44 	addi	r8,r2,57
    5728:	11c00e04 	addi	r7,r2,56
    572c:	4209883a 	add	r4,r8,r8
    5730:	04c00074 	movhi	r19,1
    5734:	2109883a 	add	r4,r4,r4
    5738:	9cc1f804 	addi	r19,r19,2016
    573c:	2109883a 	add	r4,r4,r4
    5740:	9909883a 	add	r4,r19,r4
    5744:	24000117 	ldw	r16,4(r4)
    5748:	213ffe04 	addi	r4,r4,-8
    574c:	24009726 	beq	r4,r16,59ac <_malloc_r+0x2f4>
    5750:	80800117 	ldw	r2,4(r16)
    5754:	01bfff04 	movi	r6,-4
    5758:	014003c4 	movi	r5,15
    575c:	1184703a 	and	r2,r2,r6
    5760:	1447c83a 	sub	r3,r2,r17
    5764:	28c00716 	blt	r5,r3,5784 <_malloc_r+0xcc>
    5768:	1800920e 	bge	r3,zero,59b4 <_malloc_r+0x2fc>
    576c:	84000317 	ldw	r16,12(r16)
    5770:	24008e26 	beq	r4,r16,59ac <_malloc_r+0x2f4>
    5774:	80800117 	ldw	r2,4(r16)
    5778:	1184703a 	and	r2,r2,r6
    577c:	1447c83a 	sub	r3,r2,r17
    5780:	28fff90e 	bge	r5,r3,5768 <_malloc_r+0xb0>
    5784:	3809883a 	mov	r4,r7
    5788:	01800074 	movhi	r6,1
    578c:	9c000417 	ldw	r16,16(r19)
    5790:	3181f804 	addi	r6,r6,2016
    5794:	32000204 	addi	r8,r6,8
    5798:	82013426 	beq	r16,r8,5c6c <_malloc_r+0x5b4>
    579c:	80c00117 	ldw	r3,4(r16)
    57a0:	00bfff04 	movi	r2,-4
    57a4:	188e703a 	and	r7,r3,r2
    57a8:	3c45c83a 	sub	r2,r7,r17
    57ac:	00c003c4 	movi	r3,15
    57b0:	18811f16 	blt	r3,r2,5c30 <_malloc_r+0x578>
    57b4:	32000515 	stw	r8,20(r6)
    57b8:	32000415 	stw	r8,16(r6)
    57bc:	10007f0e 	bge	r2,zero,59bc <_malloc_r+0x304>
    57c0:	00807fc4 	movi	r2,511
    57c4:	11c0fd36 	bltu	r2,r7,5bbc <_malloc_r+0x504>
    57c8:	3806d0fa 	srli	r3,r7,3
    57cc:	01c00044 	movi	r7,1
    57d0:	30800117 	ldw	r2,4(r6)
    57d4:	19400044 	addi	r5,r3,1
    57d8:	294b883a 	add	r5,r5,r5
    57dc:	1807d0ba 	srai	r3,r3,2
    57e0:	294b883a 	add	r5,r5,r5
    57e4:	294b883a 	add	r5,r5,r5
    57e8:	298b883a 	add	r5,r5,r6
    57ec:	38c6983a 	sll	r3,r7,r3
    57f0:	29c00017 	ldw	r7,0(r5)
    57f4:	2a7ffe04 	addi	r9,r5,-8
    57f8:	1886b03a 	or	r3,r3,r2
    57fc:	82400315 	stw	r9,12(r16)
    5800:	81c00215 	stw	r7,8(r16)
    5804:	30c00115 	stw	r3,4(r6)
    5808:	2c000015 	stw	r16,0(r5)
    580c:	3c000315 	stw	r16,12(r7)
    5810:	2005d0ba 	srai	r2,r4,2
    5814:	01400044 	movi	r5,1
    5818:	288a983a 	sll	r5,r5,r2
    581c:	19406f36 	bltu	r3,r5,59dc <_malloc_r+0x324>
    5820:	28c4703a 	and	r2,r5,r3
    5824:	10000a1e 	bne	r2,zero,5850 <_malloc_r+0x198>
    5828:	00bfff04 	movi	r2,-4
    582c:	294b883a 	add	r5,r5,r5
    5830:	2088703a 	and	r4,r4,r2
    5834:	28c4703a 	and	r2,r5,r3
    5838:	21000104 	addi	r4,r4,4
    583c:	1000041e 	bne	r2,zero,5850 <_malloc_r+0x198>
    5840:	294b883a 	add	r5,r5,r5
    5844:	28c4703a 	and	r2,r5,r3
    5848:	21000104 	addi	r4,r4,4
    584c:	103ffc26 	beq	r2,zero,5840 <_malloc_r+0x188>
    5850:	02bfff04 	movi	r10,-4
    5854:	024003c4 	movi	r9,15
    5858:	21800044 	addi	r6,r4,1
    585c:	318d883a 	add	r6,r6,r6
    5860:	318d883a 	add	r6,r6,r6
    5864:	318d883a 	add	r6,r6,r6
    5868:	998d883a 	add	r6,r19,r6
    586c:	333ffe04 	addi	r12,r6,-8
    5870:	2017883a 	mov	r11,r4
    5874:	31800104 	addi	r6,r6,4
    5878:	34000017 	ldw	r16,0(r6)
    587c:	31fffd04 	addi	r7,r6,-12
    5880:	81c0041e 	bne	r16,r7,5894 <_malloc_r+0x1dc>
    5884:	0000fb06 	br	5c74 <_malloc_r+0x5bc>
    5888:	1801030e 	bge	r3,zero,5c98 <_malloc_r+0x5e0>
    588c:	84000317 	ldw	r16,12(r16)
    5890:	81c0f826 	beq	r16,r7,5c74 <_malloc_r+0x5bc>
    5894:	80800117 	ldw	r2,4(r16)
    5898:	1284703a 	and	r2,r2,r10
    589c:	1447c83a 	sub	r3,r2,r17
    58a0:	48fff90e 	bge	r9,r3,5888 <_malloc_r+0x1d0>
    58a4:	80800317 	ldw	r2,12(r16)
    58a8:	81000217 	ldw	r4,8(r16)
    58ac:	89400054 	ori	r5,r17,1
    58b0:	81400115 	stw	r5,4(r16)
    58b4:	20800315 	stw	r2,12(r4)
    58b8:	11000215 	stw	r4,8(r2)
    58bc:	8463883a 	add	r17,r16,r17
    58c0:	9c400515 	stw	r17,20(r19)
    58c4:	9c400415 	stw	r17,16(r19)
    58c8:	18800054 	ori	r2,r3,1
    58cc:	88800115 	stw	r2,4(r17)
    58d0:	8a000315 	stw	r8,12(r17)
    58d4:	8a000215 	stw	r8,8(r17)
    58d8:	88e3883a 	add	r17,r17,r3
    58dc:	88c00015 	stw	r3,0(r17)
    58e0:	9009883a 	mov	r4,r18
    58e4:	000db540 	call	db54 <__malloc_unlock>
    58e8:	80800204 	addi	r2,r16,8
    58ec:	00001b06 	br	595c <_malloc_r+0x2a4>
    58f0:	04400404 	movi	r17,16
    58f4:	89402536 	bltu	r17,r5,598c <_malloc_r+0x2d4>
    58f8:	000db300 	call	db30 <__malloc_lock>
    58fc:	00800184 	movi	r2,6
    5900:	01000084 	movi	r4,2
    5904:	04c00074 	movhi	r19,1
    5908:	1085883a 	add	r2,r2,r2
    590c:	9cc1f804 	addi	r19,r19,2016
    5910:	1085883a 	add	r2,r2,r2
    5914:	9885883a 	add	r2,r19,r2
    5918:	14000117 	ldw	r16,4(r2)
    591c:	10fffe04 	addi	r3,r2,-8
    5920:	80c0d926 	beq	r16,r3,5c88 <_malloc_r+0x5d0>
    5924:	80c00117 	ldw	r3,4(r16)
    5928:	81000317 	ldw	r4,12(r16)
    592c:	00bfff04 	movi	r2,-4
    5930:	1884703a 	and	r2,r3,r2
    5934:	81400217 	ldw	r5,8(r16)
    5938:	8085883a 	add	r2,r16,r2
    593c:	10c00117 	ldw	r3,4(r2)
    5940:	29000315 	stw	r4,12(r5)
    5944:	21400215 	stw	r5,8(r4)
    5948:	18c00054 	ori	r3,r3,1
    594c:	10c00115 	stw	r3,4(r2)
    5950:	9009883a 	mov	r4,r18
    5954:	000db540 	call	db54 <__malloc_unlock>
    5958:	80800204 	addi	r2,r16,8
    595c:	dfc00a17 	ldw	ra,40(sp)
    5960:	df000917 	ldw	fp,36(sp)
    5964:	ddc00817 	ldw	r23,32(sp)
    5968:	dd800717 	ldw	r22,28(sp)
    596c:	dd400617 	ldw	r21,24(sp)
    5970:	dd000517 	ldw	r20,20(sp)
    5974:	dcc00417 	ldw	r19,16(sp)
    5978:	dc800317 	ldw	r18,12(sp)
    597c:	dc400217 	ldw	r17,8(sp)
    5980:	dc000117 	ldw	r16,4(sp)
    5984:	dec00b04 	addi	sp,sp,44
    5988:	f800283a 	ret
    598c:	00800304 	movi	r2,12
    5990:	90800015 	stw	r2,0(r18)
    5994:	0005883a 	mov	r2,zero
    5998:	003ff006 	br	595c <_malloc_r+0x2a4>
    599c:	01002004 	movi	r4,128
    59a0:	02001004 	movi	r8,64
    59a4:	01c00fc4 	movi	r7,63
    59a8:	003f6106 	br	5730 <_malloc_r+0x78>
    59ac:	4009883a 	mov	r4,r8
    59b0:	003f7506 	br	5788 <_malloc_r+0xd0>
    59b4:	81000317 	ldw	r4,12(r16)
    59b8:	003fde06 	br	5934 <_malloc_r+0x27c>
    59bc:	81c5883a 	add	r2,r16,r7
    59c0:	11400117 	ldw	r5,4(r2)
    59c4:	9009883a 	mov	r4,r18
    59c8:	29400054 	ori	r5,r5,1
    59cc:	11400115 	stw	r5,4(r2)
    59d0:	000db540 	call	db54 <__malloc_unlock>
    59d4:	80800204 	addi	r2,r16,8
    59d8:	003fe006 	br	595c <_malloc_r+0x2a4>
    59dc:	9c000217 	ldw	r16,8(r19)
    59e0:	00bfff04 	movi	r2,-4
    59e4:	85800117 	ldw	r22,4(r16)
    59e8:	b0ac703a 	and	r22,r22,r2
    59ec:	b4400336 	bltu	r22,r17,59fc <_malloc_r+0x344>
    59f0:	b445c83a 	sub	r2,r22,r17
    59f4:	00c003c4 	movi	r3,15
    59f8:	18805d16 	blt	r3,r2,5b70 <_malloc_r+0x4b8>
    59fc:	05c00074 	movhi	r23,1
    5a00:	00800074 	movhi	r2,1
    5a04:	108e4c04 	addi	r2,r2,14640
    5a08:	bdc77f04 	addi	r23,r23,7676
    5a0c:	15400017 	ldw	r21,0(r2)
    5a10:	b8c00017 	ldw	r3,0(r23)
    5a14:	00bfffc4 	movi	r2,-1
    5a18:	858d883a 	add	r6,r16,r22
    5a1c:	8d6b883a 	add	r21,r17,r21
    5a20:	1880ea26 	beq	r3,r2,5dcc <_malloc_r+0x714>
    5a24:	ad4403c4 	addi	r21,r21,4111
    5a28:	00bc0004 	movi	r2,-4096
    5a2c:	a8aa703a 	and	r21,r21,r2
    5a30:	a80b883a 	mov	r5,r21
    5a34:	9009883a 	mov	r4,r18
    5a38:	d9800015 	stw	r6,0(sp)
    5a3c:	0007a040 	call	7a04 <_sbrk_r>
    5a40:	1029883a 	mov	r20,r2
    5a44:	00bfffc4 	movi	r2,-1
    5a48:	d9800017 	ldw	r6,0(sp)
    5a4c:	a080e826 	beq	r20,r2,5df0 <_malloc_r+0x738>
    5a50:	a180a636 	bltu	r20,r6,5cec <_malloc_r+0x634>
    5a54:	07000074 	movhi	fp,1
    5a58:	e70e5504 	addi	fp,fp,14676
    5a5c:	e0800017 	ldw	r2,0(fp)
    5a60:	a887883a 	add	r3,r21,r2
    5a64:	e0c00015 	stw	r3,0(fp)
    5a68:	3500e626 	beq	r6,r20,5e04 <_malloc_r+0x74c>
    5a6c:	b9000017 	ldw	r4,0(r23)
    5a70:	00bfffc4 	movi	r2,-1
    5a74:	2080ee26 	beq	r4,r2,5e30 <_malloc_r+0x778>
    5a78:	a185c83a 	sub	r2,r20,r6
    5a7c:	10c5883a 	add	r2,r2,r3
    5a80:	e0800015 	stw	r2,0(fp)
    5a84:	a0c001cc 	andi	r3,r20,7
    5a88:	1800bc26 	beq	r3,zero,5d7c <_malloc_r+0x6c4>
    5a8c:	a0e9c83a 	sub	r20,r20,r3
    5a90:	00840204 	movi	r2,4104
    5a94:	a5000204 	addi	r20,r20,8
    5a98:	10c7c83a 	sub	r3,r2,r3
    5a9c:	a545883a 	add	r2,r20,r21
    5aa0:	1083ffcc 	andi	r2,r2,4095
    5aa4:	18abc83a 	sub	r21,r3,r2
    5aa8:	a80b883a 	mov	r5,r21
    5aac:	9009883a 	mov	r4,r18
    5ab0:	0007a040 	call	7a04 <_sbrk_r>
    5ab4:	00ffffc4 	movi	r3,-1
    5ab8:	10c0e126 	beq	r2,r3,5e40 <_malloc_r+0x788>
    5abc:	1505c83a 	sub	r2,r2,r20
    5ac0:	1545883a 	add	r2,r2,r21
    5ac4:	10800054 	ori	r2,r2,1
    5ac8:	e0c00017 	ldw	r3,0(fp)
    5acc:	9d000215 	stw	r20,8(r19)
    5ad0:	a0800115 	stw	r2,4(r20)
    5ad4:	a8c7883a 	add	r3,r21,r3
    5ad8:	e0c00015 	stw	r3,0(fp)
    5adc:	84c00e26 	beq	r16,r19,5b18 <_malloc_r+0x460>
    5ae0:	018003c4 	movi	r6,15
    5ae4:	3580a72e 	bgeu	r6,r22,5d84 <_malloc_r+0x6cc>
    5ae8:	81400117 	ldw	r5,4(r16)
    5aec:	013ffe04 	movi	r4,-8
    5af0:	b0bffd04 	addi	r2,r22,-12
    5af4:	1104703a 	and	r2,r2,r4
    5af8:	2900004c 	andi	r4,r5,1
    5afc:	2088b03a 	or	r4,r4,r2
    5b00:	81000115 	stw	r4,4(r16)
    5b04:	01400144 	movi	r5,5
    5b08:	8089883a 	add	r4,r16,r2
    5b0c:	21400115 	stw	r5,4(r4)
    5b10:	21400215 	stw	r5,8(r4)
    5b14:	3080cd36 	bltu	r6,r2,5e4c <_malloc_r+0x794>
    5b18:	00800074 	movhi	r2,1
    5b1c:	108e4b04 	addi	r2,r2,14636
    5b20:	11000017 	ldw	r4,0(r2)
    5b24:	20c0012e 	bgeu	r4,r3,5b2c <_malloc_r+0x474>
    5b28:	10c00015 	stw	r3,0(r2)
    5b2c:	00800074 	movhi	r2,1
    5b30:	108e4a04 	addi	r2,r2,14632
    5b34:	11000017 	ldw	r4,0(r2)
    5b38:	9c000217 	ldw	r16,8(r19)
    5b3c:	20c0012e 	bgeu	r4,r3,5b44 <_malloc_r+0x48c>
    5b40:	10c00015 	stw	r3,0(r2)
    5b44:	80c00117 	ldw	r3,4(r16)
    5b48:	00bfff04 	movi	r2,-4
    5b4c:	1886703a 	and	r3,r3,r2
    5b50:	1c45c83a 	sub	r2,r3,r17
    5b54:	1c400236 	bltu	r3,r17,5b60 <_malloc_r+0x4a8>
    5b58:	00c003c4 	movi	r3,15
    5b5c:	18800416 	blt	r3,r2,5b70 <_malloc_r+0x4b8>
    5b60:	9009883a 	mov	r4,r18
    5b64:	000db540 	call	db54 <__malloc_unlock>
    5b68:	0005883a 	mov	r2,zero
    5b6c:	003f7b06 	br	595c <_malloc_r+0x2a4>
    5b70:	88c00054 	ori	r3,r17,1
    5b74:	80c00115 	stw	r3,4(r16)
    5b78:	8463883a 	add	r17,r16,r17
    5b7c:	10800054 	ori	r2,r2,1
    5b80:	9c400215 	stw	r17,8(r19)
    5b84:	88800115 	stw	r2,4(r17)
    5b88:	9009883a 	mov	r4,r18
    5b8c:	000db540 	call	db54 <__malloc_unlock>
    5b90:	80800204 	addi	r2,r16,8
    5b94:	003f7106 	br	595c <_malloc_r+0x2a4>
    5b98:	00c00504 	movi	r3,20
    5b9c:	18804a2e 	bgeu	r3,r2,5cc8 <_malloc_r+0x610>
    5ba0:	00c01504 	movi	r3,84
    5ba4:	18806e36 	bltu	r3,r2,5d60 <_malloc_r+0x6a8>
    5ba8:	8804d33a 	srli	r2,r17,12
    5bac:	12001bc4 	addi	r8,r2,111
    5bb0:	11c01b84 	addi	r7,r2,110
    5bb4:	4209883a 	add	r4,r8,r8
    5bb8:	003edd06 	br	5730 <_malloc_r+0x78>
    5bbc:	3804d27a 	srli	r2,r7,9
    5bc0:	00c00104 	movi	r3,4
    5bc4:	1880442e 	bgeu	r3,r2,5cd8 <_malloc_r+0x620>
    5bc8:	00c00504 	movi	r3,20
    5bcc:	18808136 	bltu	r3,r2,5dd4 <_malloc_r+0x71c>
    5bd0:	11401704 	addi	r5,r2,92
    5bd4:	10c016c4 	addi	r3,r2,91
    5bd8:	294b883a 	add	r5,r5,r5
    5bdc:	294b883a 	add	r5,r5,r5
    5be0:	294b883a 	add	r5,r5,r5
    5be4:	994b883a 	add	r5,r19,r5
    5be8:	28800017 	ldw	r2,0(r5)
    5bec:	01800074 	movhi	r6,1
    5bf0:	297ffe04 	addi	r5,r5,-8
    5bf4:	3181f804 	addi	r6,r6,2016
    5bf8:	28806526 	beq	r5,r2,5d90 <_malloc_r+0x6d8>
    5bfc:	01bfff04 	movi	r6,-4
    5c00:	10c00117 	ldw	r3,4(r2)
    5c04:	1986703a 	and	r3,r3,r6
    5c08:	38c0022e 	bgeu	r7,r3,5c14 <_malloc_r+0x55c>
    5c0c:	10800217 	ldw	r2,8(r2)
    5c10:	28bffb1e 	bne	r5,r2,5c00 <_malloc_r+0x548>
    5c14:	11400317 	ldw	r5,12(r2)
    5c18:	98c00117 	ldw	r3,4(r19)
    5c1c:	81400315 	stw	r5,12(r16)
    5c20:	80800215 	stw	r2,8(r16)
    5c24:	2c000215 	stw	r16,8(r5)
    5c28:	14000315 	stw	r16,12(r2)
    5c2c:	003ef806 	br	5810 <_malloc_r+0x158>
    5c30:	88c00054 	ori	r3,r17,1
    5c34:	80c00115 	stw	r3,4(r16)
    5c38:	8463883a 	add	r17,r16,r17
    5c3c:	34400515 	stw	r17,20(r6)
    5c40:	34400415 	stw	r17,16(r6)
    5c44:	10c00054 	ori	r3,r2,1
    5c48:	8a000315 	stw	r8,12(r17)
    5c4c:	8a000215 	stw	r8,8(r17)
    5c50:	88c00115 	stw	r3,4(r17)
    5c54:	88a3883a 	add	r17,r17,r2
    5c58:	88800015 	stw	r2,0(r17)
    5c5c:	9009883a 	mov	r4,r18
    5c60:	000db540 	call	db54 <__malloc_unlock>
    5c64:	80800204 	addi	r2,r16,8
    5c68:	003f3c06 	br	595c <_malloc_r+0x2a4>
    5c6c:	30c00117 	ldw	r3,4(r6)
    5c70:	003ee706 	br	5810 <_malloc_r+0x158>
    5c74:	5ac00044 	addi	r11,r11,1
    5c78:	588000cc 	andi	r2,r11,3
    5c7c:	31800204 	addi	r6,r6,8
    5c80:	103efd1e 	bne	r2,zero,5878 <_malloc_r+0x1c0>
    5c84:	00002406 	br	5d18 <_malloc_r+0x660>
    5c88:	14000317 	ldw	r16,12(r2)
    5c8c:	143f251e 	bne	r2,r16,5924 <_malloc_r+0x26c>
    5c90:	21000084 	addi	r4,r4,2
    5c94:	003ebc06 	br	5788 <_malloc_r+0xd0>
    5c98:	8085883a 	add	r2,r16,r2
    5c9c:	10c00117 	ldw	r3,4(r2)
    5ca0:	81000317 	ldw	r4,12(r16)
    5ca4:	81400217 	ldw	r5,8(r16)
    5ca8:	18c00054 	ori	r3,r3,1
    5cac:	10c00115 	stw	r3,4(r2)
    5cb0:	29000315 	stw	r4,12(r5)
    5cb4:	21400215 	stw	r5,8(r4)
    5cb8:	9009883a 	mov	r4,r18
    5cbc:	000db540 	call	db54 <__malloc_unlock>
    5cc0:	80800204 	addi	r2,r16,8
    5cc4:	003f2506 	br	595c <_malloc_r+0x2a4>
    5cc8:	12001704 	addi	r8,r2,92
    5ccc:	11c016c4 	addi	r7,r2,91
    5cd0:	4209883a 	add	r4,r8,r8
    5cd4:	003e9606 	br	5730 <_malloc_r+0x78>
    5cd8:	3804d1ba 	srli	r2,r7,6
    5cdc:	11400e44 	addi	r5,r2,57
    5ce0:	10c00e04 	addi	r3,r2,56
    5ce4:	294b883a 	add	r5,r5,r5
    5ce8:	003fbc06 	br	5bdc <_malloc_r+0x524>
    5cec:	84ff5926 	beq	r16,r19,5a54 <_malloc_r+0x39c>
    5cf0:	00800074 	movhi	r2,1
    5cf4:	1081f804 	addi	r2,r2,2016
    5cf8:	14000217 	ldw	r16,8(r2)
    5cfc:	00bfff04 	movi	r2,-4
    5d00:	80c00117 	ldw	r3,4(r16)
    5d04:	1886703a 	and	r3,r3,r2
    5d08:	003f9106 	br	5b50 <_malloc_r+0x498>
    5d0c:	60800217 	ldw	r2,8(r12)
    5d10:	213fffc4 	addi	r4,r4,-1
    5d14:	1300651e 	bne	r2,r12,5eac <_malloc_r+0x7f4>
    5d18:	208000cc 	andi	r2,r4,3
    5d1c:	633ffe04 	addi	r12,r12,-8
    5d20:	103ffa1e 	bne	r2,zero,5d0c <_malloc_r+0x654>
    5d24:	98800117 	ldw	r2,4(r19)
    5d28:	0146303a 	nor	r3,zero,r5
    5d2c:	1884703a 	and	r2,r3,r2
    5d30:	98800115 	stw	r2,4(r19)
    5d34:	294b883a 	add	r5,r5,r5
    5d38:	117f2836 	bltu	r2,r5,59dc <_malloc_r+0x324>
    5d3c:	283f2726 	beq	r5,zero,59dc <_malloc_r+0x324>
    5d40:	2886703a 	and	r3,r5,r2
    5d44:	5809883a 	mov	r4,r11
    5d48:	183ec31e 	bne	r3,zero,5858 <_malloc_r+0x1a0>
    5d4c:	294b883a 	add	r5,r5,r5
    5d50:	2886703a 	and	r3,r5,r2
    5d54:	21000104 	addi	r4,r4,4
    5d58:	183ffc26 	beq	r3,zero,5d4c <_malloc_r+0x694>
    5d5c:	003ebe06 	br	5858 <_malloc_r+0x1a0>
    5d60:	00c05504 	movi	r3,340
    5d64:	18801236 	bltu	r3,r2,5db0 <_malloc_r+0x6f8>
    5d68:	8804d3fa 	srli	r2,r17,15
    5d6c:	12001e04 	addi	r8,r2,120
    5d70:	11c01dc4 	addi	r7,r2,119
    5d74:	4209883a 	add	r4,r8,r8
    5d78:	003e6d06 	br	5730 <_malloc_r+0x78>
    5d7c:	00c40004 	movi	r3,4096
    5d80:	003f4606 	br	5a9c <_malloc_r+0x3e4>
    5d84:	00800044 	movi	r2,1
    5d88:	a0800115 	stw	r2,4(r20)
    5d8c:	003f7406 	br	5b60 <_malloc_r+0x4a8>
    5d90:	1805d0ba 	srai	r2,r3,2
    5d94:	01c00044 	movi	r7,1
    5d98:	30c00117 	ldw	r3,4(r6)
    5d9c:	388e983a 	sll	r7,r7,r2
    5da0:	2805883a 	mov	r2,r5
    5da4:	38c6b03a 	or	r3,r7,r3
    5da8:	30c00115 	stw	r3,4(r6)
    5dac:	003f9b06 	br	5c1c <_malloc_r+0x564>
    5db0:	00c15504 	movi	r3,1364
    5db4:	18801a36 	bltu	r3,r2,5e20 <_malloc_r+0x768>
    5db8:	8804d4ba 	srli	r2,r17,18
    5dbc:	12001f44 	addi	r8,r2,125
    5dc0:	11c01f04 	addi	r7,r2,124
    5dc4:	4209883a 	add	r4,r8,r8
    5dc8:	003e5906 	br	5730 <_malloc_r+0x78>
    5dcc:	ad400404 	addi	r21,r21,16
    5dd0:	003f1706 	br	5a30 <_malloc_r+0x378>
    5dd4:	00c01504 	movi	r3,84
    5dd8:	18802336 	bltu	r3,r2,5e68 <_malloc_r+0x7b0>
    5ddc:	3804d33a 	srli	r2,r7,12
    5de0:	11401bc4 	addi	r5,r2,111
    5de4:	10c01b84 	addi	r3,r2,110
    5de8:	294b883a 	add	r5,r5,r5
    5dec:	003f7b06 	br	5bdc <_malloc_r+0x524>
    5df0:	9c000217 	ldw	r16,8(r19)
    5df4:	00bfff04 	movi	r2,-4
    5df8:	80c00117 	ldw	r3,4(r16)
    5dfc:	1886703a 	and	r3,r3,r2
    5e00:	003f5306 	br	5b50 <_malloc_r+0x498>
    5e04:	3083ffcc 	andi	r2,r6,4095
    5e08:	103f181e 	bne	r2,zero,5a6c <_malloc_r+0x3b4>
    5e0c:	99000217 	ldw	r4,8(r19)
    5e10:	b545883a 	add	r2,r22,r21
    5e14:	10800054 	ori	r2,r2,1
    5e18:	20800115 	stw	r2,4(r4)
    5e1c:	003f3e06 	br	5b18 <_malloc_r+0x460>
    5e20:	01003f84 	movi	r4,254
    5e24:	02001fc4 	movi	r8,127
    5e28:	01c01f84 	movi	r7,126
    5e2c:	003e4006 	br	5730 <_malloc_r+0x78>
    5e30:	00800074 	movhi	r2,1
    5e34:	10877f04 	addi	r2,r2,7676
    5e38:	15000015 	stw	r20,0(r2)
    5e3c:	003f1106 	br	5a84 <_malloc_r+0x3cc>
    5e40:	00800044 	movi	r2,1
    5e44:	002b883a 	mov	r21,zero
    5e48:	003f1f06 	br	5ac8 <_malloc_r+0x410>
    5e4c:	81400204 	addi	r5,r16,8
    5e50:	9009883a 	mov	r4,r18
    5e54:	0004ac00 	call	4ac0 <_free_r>
    5e58:	00800074 	movhi	r2,1
    5e5c:	108e5504 	addi	r2,r2,14676
    5e60:	10c00017 	ldw	r3,0(r2)
    5e64:	003f2c06 	br	5b18 <_malloc_r+0x460>
    5e68:	00c05504 	movi	r3,340
    5e6c:	18800536 	bltu	r3,r2,5e84 <_malloc_r+0x7cc>
    5e70:	3804d3fa 	srli	r2,r7,15
    5e74:	11401e04 	addi	r5,r2,120
    5e78:	10c01dc4 	addi	r3,r2,119
    5e7c:	294b883a 	add	r5,r5,r5
    5e80:	003f5606 	br	5bdc <_malloc_r+0x524>
    5e84:	00c15504 	movi	r3,1364
    5e88:	18800536 	bltu	r3,r2,5ea0 <_malloc_r+0x7e8>
    5e8c:	3804d4ba 	srli	r2,r7,18
    5e90:	11401f44 	addi	r5,r2,125
    5e94:	10c01f04 	addi	r3,r2,124
    5e98:	294b883a 	add	r5,r5,r5
    5e9c:	003f4f06 	br	5bdc <_malloc_r+0x524>
    5ea0:	01403f84 	movi	r5,254
    5ea4:	00c01f84 	movi	r3,126
    5ea8:	003f4c06 	br	5bdc <_malloc_r+0x524>
    5eac:	98800117 	ldw	r2,4(r19)
    5eb0:	003fa006 	br	5d34 <_malloc_r+0x67c>
    5eb4:	8808d0fa 	srli	r4,r17,3
    5eb8:	20800044 	addi	r2,r4,1
    5ebc:	1085883a 	add	r2,r2,r2
    5ec0:	003e9006 	br	5904 <_malloc_r+0x24c>

00005ec4 <memchr>:
    5ec4:	208000cc 	andi	r2,r4,3
    5ec8:	280f883a 	mov	r7,r5
    5ecc:	10003426 	beq	r2,zero,5fa0 <memchr+0xdc>
    5ed0:	30bfffc4 	addi	r2,r6,-1
    5ed4:	30001a26 	beq	r6,zero,5f40 <memchr+0x7c>
    5ed8:	20c00003 	ldbu	r3,0(r4)
    5edc:	29803fcc 	andi	r6,r5,255
    5ee0:	30c0051e 	bne	r6,r3,5ef8 <memchr+0x34>
    5ee4:	00001806 	br	5f48 <memchr+0x84>
    5ee8:	10001526 	beq	r2,zero,5f40 <memchr+0x7c>
    5eec:	20c00003 	ldbu	r3,0(r4)
    5ef0:	10bfffc4 	addi	r2,r2,-1
    5ef4:	30c01426 	beq	r6,r3,5f48 <memchr+0x84>
    5ef8:	21000044 	addi	r4,r4,1
    5efc:	20c000cc 	andi	r3,r4,3
    5f00:	183ff91e 	bne	r3,zero,5ee8 <memchr+0x24>
    5f04:	020000c4 	movi	r8,3
    5f08:	40801136 	bltu	r8,r2,5f50 <memchr+0x8c>
    5f0c:	10000c26 	beq	r2,zero,5f40 <memchr+0x7c>
    5f10:	20c00003 	ldbu	r3,0(r4)
    5f14:	29403fcc 	andi	r5,r5,255
    5f18:	28c00b26 	beq	r5,r3,5f48 <memchr+0x84>
    5f1c:	20c00044 	addi	r3,r4,1
    5f20:	39803fcc 	andi	r6,r7,255
    5f24:	2089883a 	add	r4,r4,r2
    5f28:	00000306 	br	5f38 <memchr+0x74>
    5f2c:	18c00044 	addi	r3,r3,1
    5f30:	197fffc3 	ldbu	r5,-1(r3)
    5f34:	31400526 	beq	r6,r5,5f4c <memchr+0x88>
    5f38:	1805883a 	mov	r2,r3
    5f3c:	20fffb1e 	bne	r4,r3,5f2c <memchr+0x68>
    5f40:	0005883a 	mov	r2,zero
    5f44:	f800283a 	ret
    5f48:	2005883a 	mov	r2,r4
    5f4c:	f800283a 	ret
    5f50:	28c03fcc 	andi	r3,r5,255
    5f54:	1812923a 	slli	r9,r3,8
    5f58:	02ffbff4 	movhi	r11,65279
    5f5c:	02a02074 	movhi	r10,32897
    5f60:	48d2b03a 	or	r9,r9,r3
    5f64:	4806943a 	slli	r3,r9,16
    5f68:	5affbfc4 	addi	r11,r11,-257
    5f6c:	52a02004 	addi	r10,r10,-32640
    5f70:	48d2b03a 	or	r9,r9,r3
    5f74:	20c00017 	ldw	r3,0(r4)
    5f78:	48c6f03a 	xor	r3,r9,r3
    5f7c:	1acd883a 	add	r6,r3,r11
    5f80:	00c6303a 	nor	r3,zero,r3
    5f84:	30c6703a 	and	r3,r6,r3
    5f88:	1a86703a 	and	r3,r3,r10
    5f8c:	183fe01e 	bne	r3,zero,5f10 <memchr+0x4c>
    5f90:	10bfff04 	addi	r2,r2,-4
    5f94:	21000104 	addi	r4,r4,4
    5f98:	40bff636 	bltu	r8,r2,5f74 <memchr+0xb0>
    5f9c:	003fdb06 	br	5f0c <memchr+0x48>
    5fa0:	3005883a 	mov	r2,r6
    5fa4:	003fd706 	br	5f04 <memchr+0x40>

00005fa8 <memcpy>:
    5fa8:	defffd04 	addi	sp,sp,-12
    5fac:	dfc00215 	stw	ra,8(sp)
    5fb0:	dc400115 	stw	r17,4(sp)
    5fb4:	dc000015 	stw	r16,0(sp)
    5fb8:	00c003c4 	movi	r3,15
    5fbc:	2005883a 	mov	r2,r4
    5fc0:	1980452e 	bgeu	r3,r6,60d8 <memcpy+0x130>
    5fc4:	2906b03a 	or	r3,r5,r4
    5fc8:	18c000cc 	andi	r3,r3,3
    5fcc:	1800441e 	bne	r3,zero,60e0 <memcpy+0x138>
    5fd0:	347ffc04 	addi	r17,r6,-16
    5fd4:	8822d13a 	srli	r17,r17,4
    5fd8:	28c00104 	addi	r3,r5,4
    5fdc:	23400104 	addi	r13,r4,4
    5fe0:	8820913a 	slli	r16,r17,4
    5fe4:	2b000204 	addi	r12,r5,8
    5fe8:	22c00204 	addi	r11,r4,8
    5fec:	84000504 	addi	r16,r16,20
    5ff0:	2a800304 	addi	r10,r5,12
    5ff4:	22400304 	addi	r9,r4,12
    5ff8:	2c21883a 	add	r16,r5,r16
    5ffc:	2811883a 	mov	r8,r5
    6000:	200f883a 	mov	r7,r4
    6004:	41000017 	ldw	r4,0(r8)
    6008:	1fc00017 	ldw	ra,0(r3)
    600c:	63c00017 	ldw	r15,0(r12)
    6010:	39000015 	stw	r4,0(r7)
    6014:	53800017 	ldw	r14,0(r10)
    6018:	6fc00015 	stw	ra,0(r13)
    601c:	5bc00015 	stw	r15,0(r11)
    6020:	4b800015 	stw	r14,0(r9)
    6024:	18c00404 	addi	r3,r3,16
    6028:	39c00404 	addi	r7,r7,16
    602c:	42000404 	addi	r8,r8,16
    6030:	6b400404 	addi	r13,r13,16
    6034:	63000404 	addi	r12,r12,16
    6038:	5ac00404 	addi	r11,r11,16
    603c:	52800404 	addi	r10,r10,16
    6040:	4a400404 	addi	r9,r9,16
    6044:	1c3fef1e 	bne	r3,r16,6004 <memcpy+0x5c>
    6048:	89c00044 	addi	r7,r17,1
    604c:	380e913a 	slli	r7,r7,4
    6050:	310003cc 	andi	r4,r6,15
    6054:	02c000c4 	movi	r11,3
    6058:	11c7883a 	add	r3,r2,r7
    605c:	29cb883a 	add	r5,r5,r7
    6060:	5900212e 	bgeu	r11,r4,60e8 <memcpy+0x140>
    6064:	1813883a 	mov	r9,r3
    6068:	2811883a 	mov	r8,r5
    606c:	200f883a 	mov	r7,r4
    6070:	42800017 	ldw	r10,0(r8)
    6074:	4a400104 	addi	r9,r9,4
    6078:	39ffff04 	addi	r7,r7,-4
    607c:	4abfff15 	stw	r10,-4(r9)
    6080:	42000104 	addi	r8,r8,4
    6084:	59fffa36 	bltu	r11,r7,6070 <memcpy+0xc8>
    6088:	213fff04 	addi	r4,r4,-4
    608c:	2008d0ba 	srli	r4,r4,2
    6090:	318000cc 	andi	r6,r6,3
    6094:	21000044 	addi	r4,r4,1
    6098:	2109883a 	add	r4,r4,r4
    609c:	2109883a 	add	r4,r4,r4
    60a0:	1907883a 	add	r3,r3,r4
    60a4:	290b883a 	add	r5,r5,r4
    60a8:	30000626 	beq	r6,zero,60c4 <memcpy+0x11c>
    60ac:	198d883a 	add	r6,r3,r6
    60b0:	29c00003 	ldbu	r7,0(r5)
    60b4:	18c00044 	addi	r3,r3,1
    60b8:	29400044 	addi	r5,r5,1
    60bc:	19ffffc5 	stb	r7,-1(r3)
    60c0:	19bffb1e 	bne	r3,r6,60b0 <memcpy+0x108>
    60c4:	dfc00217 	ldw	ra,8(sp)
    60c8:	dc400117 	ldw	r17,4(sp)
    60cc:	dc000017 	ldw	r16,0(sp)
    60d0:	dec00304 	addi	sp,sp,12
    60d4:	f800283a 	ret
    60d8:	2007883a 	mov	r3,r4
    60dc:	003ff206 	br	60a8 <memcpy+0x100>
    60e0:	2007883a 	mov	r3,r4
    60e4:	003ff106 	br	60ac <memcpy+0x104>
    60e8:	200d883a 	mov	r6,r4
    60ec:	003fee06 	br	60a8 <memcpy+0x100>

000060f0 <memmove>:
    60f0:	2005883a 	mov	r2,r4
    60f4:	29000b2e 	bgeu	r5,r4,6124 <memmove+0x34>
    60f8:	298f883a 	add	r7,r5,r6
    60fc:	21c0092e 	bgeu	r4,r7,6124 <memmove+0x34>
    6100:	2187883a 	add	r3,r4,r6
    6104:	198bc83a 	sub	r5,r3,r6
    6108:	30004826 	beq	r6,zero,622c <memmove+0x13c>
    610c:	39ffffc4 	addi	r7,r7,-1
    6110:	39000003 	ldbu	r4,0(r7)
    6114:	18ffffc4 	addi	r3,r3,-1
    6118:	19000005 	stb	r4,0(r3)
    611c:	28fffb1e 	bne	r5,r3,610c <memmove+0x1c>
    6120:	f800283a 	ret
    6124:	00c003c4 	movi	r3,15
    6128:	1980412e 	bgeu	r3,r6,6230 <memmove+0x140>
    612c:	2886b03a 	or	r3,r5,r2
    6130:	18c000cc 	andi	r3,r3,3
    6134:	1800401e 	bne	r3,zero,6238 <memmove+0x148>
    6138:	33fffc04 	addi	r15,r6,-16
    613c:	781ed13a 	srli	r15,r15,4
    6140:	28c00104 	addi	r3,r5,4
    6144:	13400104 	addi	r13,r2,4
    6148:	781c913a 	slli	r14,r15,4
    614c:	2b000204 	addi	r12,r5,8
    6150:	12c00204 	addi	r11,r2,8
    6154:	73800504 	addi	r14,r14,20
    6158:	2a800304 	addi	r10,r5,12
    615c:	12400304 	addi	r9,r2,12
    6160:	2b9d883a 	add	r14,r5,r14
    6164:	2811883a 	mov	r8,r5
    6168:	100f883a 	mov	r7,r2
    616c:	41000017 	ldw	r4,0(r8)
    6170:	39c00404 	addi	r7,r7,16
    6174:	18c00404 	addi	r3,r3,16
    6178:	393ffc15 	stw	r4,-16(r7)
    617c:	193ffc17 	ldw	r4,-16(r3)
    6180:	6b400404 	addi	r13,r13,16
    6184:	5ac00404 	addi	r11,r11,16
    6188:	693ffc15 	stw	r4,-16(r13)
    618c:	61000017 	ldw	r4,0(r12)
    6190:	4a400404 	addi	r9,r9,16
    6194:	42000404 	addi	r8,r8,16
    6198:	593ffc15 	stw	r4,-16(r11)
    619c:	51000017 	ldw	r4,0(r10)
    61a0:	63000404 	addi	r12,r12,16
    61a4:	52800404 	addi	r10,r10,16
    61a8:	493ffc15 	stw	r4,-16(r9)
    61ac:	1bbfef1e 	bne	r3,r14,616c <memmove+0x7c>
    61b0:	79000044 	addi	r4,r15,1
    61b4:	2008913a 	slli	r4,r4,4
    61b8:	328003cc 	andi	r10,r6,15
    61bc:	02c000c4 	movi	r11,3
    61c0:	1107883a 	add	r3,r2,r4
    61c4:	290b883a 	add	r5,r5,r4
    61c8:	5a801e2e 	bgeu	r11,r10,6244 <memmove+0x154>
    61cc:	1813883a 	mov	r9,r3
    61d0:	2811883a 	mov	r8,r5
    61d4:	500f883a 	mov	r7,r10
    61d8:	41000017 	ldw	r4,0(r8)
    61dc:	4a400104 	addi	r9,r9,4
    61e0:	39ffff04 	addi	r7,r7,-4
    61e4:	493fff15 	stw	r4,-4(r9)
    61e8:	42000104 	addi	r8,r8,4
    61ec:	59fffa36 	bltu	r11,r7,61d8 <memmove+0xe8>
    61f0:	513fff04 	addi	r4,r10,-4
    61f4:	2008d0ba 	srli	r4,r4,2
    61f8:	318000cc 	andi	r6,r6,3
    61fc:	21000044 	addi	r4,r4,1
    6200:	2109883a 	add	r4,r4,r4
    6204:	2109883a 	add	r4,r4,r4
    6208:	1907883a 	add	r3,r3,r4
    620c:	290b883a 	add	r5,r5,r4
    6210:	30000b26 	beq	r6,zero,6240 <memmove+0x150>
    6214:	198d883a 	add	r6,r3,r6
    6218:	29c00003 	ldbu	r7,0(r5)
    621c:	18c00044 	addi	r3,r3,1
    6220:	29400044 	addi	r5,r5,1
    6224:	19ffffc5 	stb	r7,-1(r3)
    6228:	19bffb1e 	bne	r3,r6,6218 <memmove+0x128>
    622c:	f800283a 	ret
    6230:	1007883a 	mov	r3,r2
    6234:	003ff606 	br	6210 <memmove+0x120>
    6238:	1007883a 	mov	r3,r2
    623c:	003ff506 	br	6214 <memmove+0x124>
    6240:	f800283a 	ret
    6244:	500d883a 	mov	r6,r10
    6248:	003ff106 	br	6210 <memmove+0x120>

0000624c <memset>:
    624c:	20c000cc 	andi	r3,r4,3
    6250:	2005883a 	mov	r2,r4
    6254:	18004426 	beq	r3,zero,6368 <memset+0x11c>
    6258:	31ffffc4 	addi	r7,r6,-1
    625c:	30004026 	beq	r6,zero,6360 <memset+0x114>
    6260:	2813883a 	mov	r9,r5
    6264:	200d883a 	mov	r6,r4
    6268:	2007883a 	mov	r3,r4
    626c:	00000406 	br	6280 <memset+0x34>
    6270:	3a3fffc4 	addi	r8,r7,-1
    6274:	31800044 	addi	r6,r6,1
    6278:	38003926 	beq	r7,zero,6360 <memset+0x114>
    627c:	400f883a 	mov	r7,r8
    6280:	18c00044 	addi	r3,r3,1
    6284:	32400005 	stb	r9,0(r6)
    6288:	1a0000cc 	andi	r8,r3,3
    628c:	403ff81e 	bne	r8,zero,6270 <memset+0x24>
    6290:	010000c4 	movi	r4,3
    6294:	21c02d2e 	bgeu	r4,r7,634c <memset+0x100>
    6298:	29003fcc 	andi	r4,r5,255
    629c:	200c923a 	slli	r6,r4,8
    62a0:	3108b03a 	or	r4,r6,r4
    62a4:	200c943a 	slli	r6,r4,16
    62a8:	218cb03a 	or	r6,r4,r6
    62ac:	010003c4 	movi	r4,15
    62b0:	21c0182e 	bgeu	r4,r7,6314 <memset+0xc8>
    62b4:	3b3ffc04 	addi	r12,r7,-16
    62b8:	6018d13a 	srli	r12,r12,4
    62bc:	1a000104 	addi	r8,r3,4
    62c0:	1ac00204 	addi	r11,r3,8
    62c4:	6008913a 	slli	r4,r12,4
    62c8:	1a800304 	addi	r10,r3,12
    62cc:	1813883a 	mov	r9,r3
    62d0:	21000504 	addi	r4,r4,20
    62d4:	1909883a 	add	r4,r3,r4
    62d8:	49800015 	stw	r6,0(r9)
    62dc:	41800015 	stw	r6,0(r8)
    62e0:	59800015 	stw	r6,0(r11)
    62e4:	51800015 	stw	r6,0(r10)
    62e8:	42000404 	addi	r8,r8,16
    62ec:	4a400404 	addi	r9,r9,16
    62f0:	5ac00404 	addi	r11,r11,16
    62f4:	52800404 	addi	r10,r10,16
    62f8:	413ff71e 	bne	r8,r4,62d8 <memset+0x8c>
    62fc:	63000044 	addi	r12,r12,1
    6300:	6018913a 	slli	r12,r12,4
    6304:	39c003cc 	andi	r7,r7,15
    6308:	010000c4 	movi	r4,3
    630c:	1b07883a 	add	r3,r3,r12
    6310:	21c00e2e 	bgeu	r4,r7,634c <memset+0x100>
    6314:	1813883a 	mov	r9,r3
    6318:	3811883a 	mov	r8,r7
    631c:	010000c4 	movi	r4,3
    6320:	49800015 	stw	r6,0(r9)
    6324:	423fff04 	addi	r8,r8,-4
    6328:	4a400104 	addi	r9,r9,4
    632c:	223ffc36 	bltu	r4,r8,6320 <memset+0xd4>
    6330:	393fff04 	addi	r4,r7,-4
    6334:	2008d0ba 	srli	r4,r4,2
    6338:	39c000cc 	andi	r7,r7,3
    633c:	21000044 	addi	r4,r4,1
    6340:	2109883a 	add	r4,r4,r4
    6344:	2109883a 	add	r4,r4,r4
    6348:	1907883a 	add	r3,r3,r4
    634c:	38000526 	beq	r7,zero,6364 <memset+0x118>
    6350:	19cf883a 	add	r7,r3,r7
    6354:	19400005 	stb	r5,0(r3)
    6358:	18c00044 	addi	r3,r3,1
    635c:	38fffd1e 	bne	r7,r3,6354 <memset+0x108>
    6360:	f800283a 	ret
    6364:	f800283a 	ret
    6368:	2007883a 	mov	r3,r4
    636c:	300f883a 	mov	r7,r6
    6370:	003fc706 	br	6290 <memset+0x44>

00006374 <_Balloc>:
    6374:	20801317 	ldw	r2,76(r4)
    6378:	defffc04 	addi	sp,sp,-16
    637c:	dc400115 	stw	r17,4(sp)
    6380:	dc000015 	stw	r16,0(sp)
    6384:	dfc00315 	stw	ra,12(sp)
    6388:	dc800215 	stw	r18,8(sp)
    638c:	2023883a 	mov	r17,r4
    6390:	2821883a 	mov	r16,r5
    6394:	10000f26 	beq	r2,zero,63d4 <_Balloc+0x60>
    6398:	8407883a 	add	r3,r16,r16
    639c:	18c7883a 	add	r3,r3,r3
    63a0:	10c7883a 	add	r3,r2,r3
    63a4:	18800017 	ldw	r2,0(r3)
    63a8:	10001126 	beq	r2,zero,63f0 <_Balloc+0x7c>
    63ac:	11000017 	ldw	r4,0(r2)
    63b0:	19000015 	stw	r4,0(r3)
    63b4:	10000415 	stw	zero,16(r2)
    63b8:	10000315 	stw	zero,12(r2)
    63bc:	dfc00317 	ldw	ra,12(sp)
    63c0:	dc800217 	ldw	r18,8(sp)
    63c4:	dc400117 	ldw	r17,4(sp)
    63c8:	dc000017 	ldw	r16,0(sp)
    63cc:	dec00404 	addi	sp,sp,16
    63d0:	f800283a 	ret
    63d4:	01800844 	movi	r6,33
    63d8:	01400104 	movi	r5,4
    63dc:	000941c0 	call	941c <_calloc_r>
    63e0:	88801315 	stw	r2,76(r17)
    63e4:	103fec1e 	bne	r2,zero,6398 <_Balloc+0x24>
    63e8:	0005883a 	mov	r2,zero
    63ec:	003ff306 	br	63bc <_Balloc+0x48>
    63f0:	01400044 	movi	r5,1
    63f4:	2c24983a 	sll	r18,r5,r16
    63f8:	8809883a 	mov	r4,r17
    63fc:	91800144 	addi	r6,r18,5
    6400:	318d883a 	add	r6,r6,r6
    6404:	318d883a 	add	r6,r6,r6
    6408:	000941c0 	call	941c <_calloc_r>
    640c:	103ff626 	beq	r2,zero,63e8 <_Balloc+0x74>
    6410:	14000115 	stw	r16,4(r2)
    6414:	14800215 	stw	r18,8(r2)
    6418:	003fe606 	br	63b4 <_Balloc+0x40>

0000641c <_Bfree>:
    641c:	28000826 	beq	r5,zero,6440 <_Bfree+0x24>
    6420:	28c00117 	ldw	r3,4(r5)
    6424:	20801317 	ldw	r2,76(r4)
    6428:	18c7883a 	add	r3,r3,r3
    642c:	18c7883a 	add	r3,r3,r3
    6430:	10c5883a 	add	r2,r2,r3
    6434:	10c00017 	ldw	r3,0(r2)
    6438:	28c00015 	stw	r3,0(r5)
    643c:	11400015 	stw	r5,0(r2)
    6440:	f800283a 	ret

00006444 <__multadd>:
    6444:	defff704 	addi	sp,sp,-36
    6448:	dc800215 	stw	r18,8(sp)
    644c:	2c800417 	ldw	r18,16(r5)
    6450:	dd800615 	stw	r22,24(sp)
    6454:	dd400515 	stw	r21,20(sp)
    6458:	dd000415 	stw	r20,16(sp)
    645c:	dcc00315 	stw	r19,12(sp)
    6460:	dc400115 	stw	r17,4(sp)
    6464:	dc000015 	stw	r16,0(sp)
    6468:	dfc00815 	stw	ra,32(sp)
    646c:	ddc00715 	stw	r23,28(sp)
    6470:	2827883a 	mov	r19,r5
    6474:	2029883a 	mov	r20,r4
    6478:	3023883a 	mov	r17,r6
    647c:	3821883a 	mov	r16,r7
    6480:	2d400504 	addi	r21,r5,20
    6484:	002d883a 	mov	r22,zero
    6488:	adc00017 	ldw	r23,0(r21)
    648c:	880b883a 	mov	r5,r17
    6490:	ad400104 	addi	r21,r21,4
    6494:	b93fffcc 	andi	r4,r23,65535
    6498:	000aa280 	call	aa28 <__mulsi3>
    649c:	b808d43a 	srli	r4,r23,16
    64a0:	880b883a 	mov	r5,r17
    64a4:	1421883a 	add	r16,r2,r16
    64a8:	000aa280 	call	aa28 <__mulsi3>
    64ac:	800ed43a 	srli	r7,r16,16
    64b0:	80ffffcc 	andi	r3,r16,65535
    64b4:	b5800044 	addi	r22,r22,1
    64b8:	11c5883a 	add	r2,r2,r7
    64bc:	100e943a 	slli	r7,r2,16
    64c0:	1020d43a 	srli	r16,r2,16
    64c4:	38c7883a 	add	r3,r7,r3
    64c8:	a8ffff15 	stw	r3,-4(r21)
    64cc:	b4bfee16 	blt	r22,r18,6488 <__multadd+0x44>
    64d0:	80000926 	beq	r16,zero,64f8 <__multadd+0xb4>
    64d4:	98800217 	ldw	r2,8(r19)
    64d8:	9080130e 	bge	r18,r2,6528 <__multadd+0xe4>
    64dc:	90800144 	addi	r2,r18,5
    64e0:	1085883a 	add	r2,r2,r2
    64e4:	1085883a 	add	r2,r2,r2
    64e8:	9885883a 	add	r2,r19,r2
    64ec:	14000015 	stw	r16,0(r2)
    64f0:	94800044 	addi	r18,r18,1
    64f4:	9c800415 	stw	r18,16(r19)
    64f8:	9805883a 	mov	r2,r19
    64fc:	dfc00817 	ldw	ra,32(sp)
    6500:	ddc00717 	ldw	r23,28(sp)
    6504:	dd800617 	ldw	r22,24(sp)
    6508:	dd400517 	ldw	r21,20(sp)
    650c:	dd000417 	ldw	r20,16(sp)
    6510:	dcc00317 	ldw	r19,12(sp)
    6514:	dc800217 	ldw	r18,8(sp)
    6518:	dc400117 	ldw	r17,4(sp)
    651c:	dc000017 	ldw	r16,0(sp)
    6520:	dec00904 	addi	sp,sp,36
    6524:	f800283a 	ret
    6528:	99400117 	ldw	r5,4(r19)
    652c:	a009883a 	mov	r4,r20
    6530:	29400044 	addi	r5,r5,1
    6534:	00063740 	call	6374 <_Balloc>
    6538:	99800417 	ldw	r6,16(r19)
    653c:	99400304 	addi	r5,r19,12
    6540:	11000304 	addi	r4,r2,12
    6544:	31800084 	addi	r6,r6,2
    6548:	318d883a 	add	r6,r6,r6
    654c:	318d883a 	add	r6,r6,r6
    6550:	1023883a 	mov	r17,r2
    6554:	0005fa80 	call	5fa8 <memcpy>
    6558:	98000a26 	beq	r19,zero,6584 <__multadd+0x140>
    655c:	98c00117 	ldw	r3,4(r19)
    6560:	a0801317 	ldw	r2,76(r20)
    6564:	18c7883a 	add	r3,r3,r3
    6568:	18c7883a 	add	r3,r3,r3
    656c:	10c5883a 	add	r2,r2,r3
    6570:	10c00017 	ldw	r3,0(r2)
    6574:	98c00015 	stw	r3,0(r19)
    6578:	14c00015 	stw	r19,0(r2)
    657c:	8827883a 	mov	r19,r17
    6580:	003fd606 	br	64dc <__multadd+0x98>
    6584:	8827883a 	mov	r19,r17
    6588:	003fd406 	br	64dc <__multadd+0x98>

0000658c <__s2b>:
    658c:	defff904 	addi	sp,sp,-28
    6590:	dc400115 	stw	r17,4(sp)
    6594:	dc000015 	stw	r16,0(sp)
    6598:	2023883a 	mov	r17,r4
    659c:	2821883a 	mov	r16,r5
    65a0:	39000204 	addi	r4,r7,8
    65a4:	01400244 	movi	r5,9
    65a8:	dcc00315 	stw	r19,12(sp)
    65ac:	dc800215 	stw	r18,8(sp)
    65b0:	dfc00615 	stw	ra,24(sp)
    65b4:	dd400515 	stw	r21,20(sp)
    65b8:	dd000415 	stw	r20,16(sp)
    65bc:	3825883a 	mov	r18,r7
    65c0:	3027883a 	mov	r19,r6
    65c4:	000a8740 	call	a874 <__divsi3>
    65c8:	00c00044 	movi	r3,1
    65cc:	000b883a 	mov	r5,zero
    65d0:	1880030e 	bge	r3,r2,65e0 <__s2b+0x54>
    65d4:	18c7883a 	add	r3,r3,r3
    65d8:	29400044 	addi	r5,r5,1
    65dc:	18bffd16 	blt	r3,r2,65d4 <__s2b+0x48>
    65e0:	8809883a 	mov	r4,r17
    65e4:	00063740 	call	6374 <_Balloc>
    65e8:	d8c00717 	ldw	r3,28(sp)
    65ec:	10c00515 	stw	r3,20(r2)
    65f0:	00c00044 	movi	r3,1
    65f4:	10c00415 	stw	r3,16(r2)
    65f8:	00c00244 	movi	r3,9
    65fc:	1cc0210e 	bge	r3,r19,6684 <__s2b+0xf8>
    6600:	80eb883a 	add	r21,r16,r3
    6604:	a829883a 	mov	r20,r21
    6608:	84e1883a 	add	r16,r16,r19
    660c:	a1c00007 	ldb	r7,0(r20)
    6610:	01800284 	movi	r6,10
    6614:	a5000044 	addi	r20,r20,1
    6618:	100b883a 	mov	r5,r2
    661c:	39fff404 	addi	r7,r7,-48
    6620:	8809883a 	mov	r4,r17
    6624:	00064440 	call	6444 <__multadd>
    6628:	a43ff81e 	bne	r20,r16,660c <__s2b+0x80>
    662c:	ace1883a 	add	r16,r21,r19
    6630:	843ffe04 	addi	r16,r16,-8
    6634:	9c800a0e 	bge	r19,r18,6660 <__s2b+0xd4>
    6638:	94e5c83a 	sub	r18,r18,r19
    663c:	84a5883a 	add	r18,r16,r18
    6640:	81c00007 	ldb	r7,0(r16)
    6644:	01800284 	movi	r6,10
    6648:	84000044 	addi	r16,r16,1
    664c:	100b883a 	mov	r5,r2
    6650:	39fff404 	addi	r7,r7,-48
    6654:	8809883a 	mov	r4,r17
    6658:	00064440 	call	6444 <__multadd>
    665c:	84bff81e 	bne	r16,r18,6640 <__s2b+0xb4>
    6660:	dfc00617 	ldw	ra,24(sp)
    6664:	dd400517 	ldw	r21,20(sp)
    6668:	dd000417 	ldw	r20,16(sp)
    666c:	dcc00317 	ldw	r19,12(sp)
    6670:	dc800217 	ldw	r18,8(sp)
    6674:	dc400117 	ldw	r17,4(sp)
    6678:	dc000017 	ldw	r16,0(sp)
    667c:	dec00704 	addi	sp,sp,28
    6680:	f800283a 	ret
    6684:	84000284 	addi	r16,r16,10
    6688:	1827883a 	mov	r19,r3
    668c:	003fe906 	br	6634 <__s2b+0xa8>

00006690 <__hi0bits>:
    6690:	20bfffec 	andhi	r2,r4,65535
    6694:	1000141e 	bne	r2,zero,66e8 <__hi0bits+0x58>
    6698:	2008943a 	slli	r4,r4,16
    669c:	00800404 	movi	r2,16
    66a0:	20ffc02c 	andhi	r3,r4,65280
    66a4:	1800021e 	bne	r3,zero,66b0 <__hi0bits+0x20>
    66a8:	2008923a 	slli	r4,r4,8
    66ac:	10800204 	addi	r2,r2,8
    66b0:	20fc002c 	andhi	r3,r4,61440
    66b4:	1800021e 	bne	r3,zero,66c0 <__hi0bits+0x30>
    66b8:	2008913a 	slli	r4,r4,4
    66bc:	10800104 	addi	r2,r2,4
    66c0:	20f0002c 	andhi	r3,r4,49152
    66c4:	1800031e 	bne	r3,zero,66d4 <__hi0bits+0x44>
    66c8:	2109883a 	add	r4,r4,r4
    66cc:	10800084 	addi	r2,r2,2
    66d0:	2109883a 	add	r4,r4,r4
    66d4:	20000316 	blt	r4,zero,66e4 <__hi0bits+0x54>
    66d8:	2110002c 	andhi	r4,r4,16384
    66dc:	2000041e 	bne	r4,zero,66f0 <__hi0bits+0x60>
    66e0:	00800804 	movi	r2,32
    66e4:	f800283a 	ret
    66e8:	0005883a 	mov	r2,zero
    66ec:	003fec06 	br	66a0 <__hi0bits+0x10>
    66f0:	10800044 	addi	r2,r2,1
    66f4:	f800283a 	ret

000066f8 <__lo0bits>:
    66f8:	20c00017 	ldw	r3,0(r4)
    66fc:	188001cc 	andi	r2,r3,7
    6700:	10000826 	beq	r2,zero,6724 <__lo0bits+0x2c>
    6704:	1880004c 	andi	r2,r3,1
    6708:	1000211e 	bne	r2,zero,6790 <__lo0bits+0x98>
    670c:	1880008c 	andi	r2,r3,2
    6710:	1000211e 	bne	r2,zero,6798 <__lo0bits+0xa0>
    6714:	1806d0ba 	srli	r3,r3,2
    6718:	00800084 	movi	r2,2
    671c:	20c00015 	stw	r3,0(r4)
    6720:	f800283a 	ret
    6724:	18bfffcc 	andi	r2,r3,65535
    6728:	10001326 	beq	r2,zero,6778 <__lo0bits+0x80>
    672c:	0005883a 	mov	r2,zero
    6730:	19403fcc 	andi	r5,r3,255
    6734:	2800021e 	bne	r5,zero,6740 <__lo0bits+0x48>
    6738:	1806d23a 	srli	r3,r3,8
    673c:	10800204 	addi	r2,r2,8
    6740:	194003cc 	andi	r5,r3,15
    6744:	2800021e 	bne	r5,zero,6750 <__lo0bits+0x58>
    6748:	1806d13a 	srli	r3,r3,4
    674c:	10800104 	addi	r2,r2,4
    6750:	194000cc 	andi	r5,r3,3
    6754:	2800021e 	bne	r5,zero,6760 <__lo0bits+0x68>
    6758:	1806d0ba 	srli	r3,r3,2
    675c:	10800084 	addi	r2,r2,2
    6760:	1940004c 	andi	r5,r3,1
    6764:	2800081e 	bne	r5,zero,6788 <__lo0bits+0x90>
    6768:	1806d07a 	srli	r3,r3,1
    676c:	1800051e 	bne	r3,zero,6784 <__lo0bits+0x8c>
    6770:	00800804 	movi	r2,32
    6774:	f800283a 	ret
    6778:	1806d43a 	srli	r3,r3,16
    677c:	00800404 	movi	r2,16
    6780:	003feb06 	br	6730 <__lo0bits+0x38>
    6784:	10800044 	addi	r2,r2,1
    6788:	20c00015 	stw	r3,0(r4)
    678c:	f800283a 	ret
    6790:	0005883a 	mov	r2,zero
    6794:	f800283a 	ret
    6798:	1806d07a 	srli	r3,r3,1
    679c:	00800044 	movi	r2,1
    67a0:	20c00015 	stw	r3,0(r4)
    67a4:	f800283a 	ret

000067a8 <__i2b>:
    67a8:	defffd04 	addi	sp,sp,-12
    67ac:	dc000015 	stw	r16,0(sp)
    67b0:	04000044 	movi	r16,1
    67b4:	dc400115 	stw	r17,4(sp)
    67b8:	2823883a 	mov	r17,r5
    67bc:	800b883a 	mov	r5,r16
    67c0:	dfc00215 	stw	ra,8(sp)
    67c4:	00063740 	call	6374 <_Balloc>
    67c8:	14400515 	stw	r17,20(r2)
    67cc:	14000415 	stw	r16,16(r2)
    67d0:	dfc00217 	ldw	ra,8(sp)
    67d4:	dc400117 	ldw	r17,4(sp)
    67d8:	dc000017 	ldw	r16,0(sp)
    67dc:	dec00304 	addi	sp,sp,12
    67e0:	f800283a 	ret

000067e4 <__multiply>:
    67e4:	deffef04 	addi	sp,sp,-68
    67e8:	dc400815 	stw	r17,32(sp)
    67ec:	dc000715 	stw	r16,28(sp)
    67f0:	34400417 	ldw	r17,16(r6)
    67f4:	2c000417 	ldw	r16,16(r5)
    67f8:	dd800d15 	stw	r22,52(sp)
    67fc:	dc800915 	stw	r18,36(sp)
    6800:	dfc01015 	stw	ra,64(sp)
    6804:	df000f15 	stw	fp,60(sp)
    6808:	ddc00e15 	stw	r23,56(sp)
    680c:	dd400c15 	stw	r21,48(sp)
    6810:	dd000b15 	stw	r20,44(sp)
    6814:	dcc00a15 	stw	r19,40(sp)
    6818:	2825883a 	mov	r18,r5
    681c:	302d883a 	mov	r22,r6
    6820:	8440050e 	bge	r16,r17,6838 <__multiply+0x54>
    6824:	8007883a 	mov	r3,r16
    6828:	3025883a 	mov	r18,r6
    682c:	8821883a 	mov	r16,r17
    6830:	282d883a 	mov	r22,r5
    6834:	1823883a 	mov	r17,r3
    6838:	90800217 	ldw	r2,8(r18)
    683c:	8447883a 	add	r3,r16,r17
    6840:	d8c00215 	stw	r3,8(sp)
    6844:	91400117 	ldw	r5,4(r18)
    6848:	10c0010e 	bge	r2,r3,6850 <__multiply+0x6c>
    684c:	29400044 	addi	r5,r5,1
    6850:	00063740 	call	6374 <_Balloc>
    6854:	d8c00217 	ldw	r3,8(sp)
    6858:	d8800615 	stw	r2,24(sp)
    685c:	18eb883a 	add	r21,r3,r3
    6860:	ad6b883a 	add	r21,r21,r21
    6864:	10c00504 	addi	r3,r2,20
    6868:	1d6b883a 	add	r21,r3,r21
    686c:	d8c00115 	stw	r3,4(sp)
    6870:	dd400315 	stw	r21,12(sp)
    6874:	1805883a 	mov	r2,r3
    6878:	1d40042e 	bgeu	r3,r21,688c <__multiply+0xa8>
    687c:	d8c00317 	ldw	r3,12(sp)
    6880:	10000015 	stw	zero,0(r2)
    6884:	10800104 	addi	r2,r2,4
    6888:	10fffc36 	bltu	r2,r3,687c <__multiply+0x98>
    688c:	8c63883a 	add	r17,r17,r17
    6890:	b5800504 	addi	r22,r22,20
    6894:	8c63883a 	add	r17,r17,r17
    6898:	94800504 	addi	r18,r18,20
    689c:	8421883a 	add	r16,r16,r16
    68a0:	b463883a 	add	r17,r22,r17
    68a4:	8421883a 	add	r16,r16,r16
    68a8:	dd800015 	stw	r22,0(sp)
    68ac:	dc800415 	stw	r18,16(sp)
    68b0:	dc400515 	stw	r17,20(sp)
    68b4:	9429883a 	add	r20,r18,r16
    68b8:	b4404f2e 	bgeu	r22,r17,69f8 <__multiply+0x214>
    68bc:	d8c00017 	ldw	r3,0(sp)
    68c0:	1c800017 	ldw	r18,0(r3)
    68c4:	947fffcc 	andi	r17,r18,65535
    68c8:	88001e26 	beq	r17,zero,6944 <__multiply+0x160>
    68cc:	dd800117 	ldw	r22,4(sp)
    68d0:	dd400417 	ldw	r21,16(sp)
    68d4:	0027883a 	mov	r19,zero
    68d8:	ac800017 	ldw	r18,0(r21)
    68dc:	b4000017 	ldw	r16,0(r22)
    68e0:	880b883a 	mov	r5,r17
    68e4:	913fffcc 	andi	r4,r18,65535
    68e8:	000aa280 	call	aa28 <__mulsi3>
    68ec:	9008d43a 	srli	r4,r18,16
    68f0:	84bfffcc 	andi	r18,r16,65535
    68f4:	1485883a 	add	r2,r2,r18
    68f8:	14e5883a 	add	r18,r2,r19
    68fc:	8020d43a 	srli	r16,r16,16
    6900:	9026d43a 	srli	r19,r18,16
    6904:	880b883a 	mov	r5,r17
    6908:	000aa280 	call	aa28 <__mulsi3>
    690c:	1405883a 	add	r2,r2,r16
    6910:	14e1883a 	add	r16,r2,r19
    6914:	90ffffcc 	andi	r3,r18,65535
    6918:	8024943a 	slli	r18,r16,16
    691c:	ad400104 	addi	r21,r21,4
    6920:	b005883a 	mov	r2,r22
    6924:	90c6b03a 	or	r3,r18,r3
    6928:	b0c00015 	stw	r3,0(r22)
    692c:	8026d43a 	srli	r19,r16,16
    6930:	b5800104 	addi	r22,r22,4
    6934:	ad3fe836 	bltu	r21,r20,68d8 <__multiply+0xf4>
    6938:	d8c00017 	ldw	r3,0(sp)
    693c:	14c00115 	stw	r19,4(r2)
    6940:	1c800017 	ldw	r18,0(r3)
    6944:	9024d43a 	srli	r18,r18,16
    6948:	90002226 	beq	r18,zero,69d4 <__multiply+0x1f0>
    694c:	d8c00117 	ldw	r3,4(sp)
    6950:	dd800417 	ldw	r22,16(sp)
    6954:	002f883a 	mov	r23,zero
    6958:	1f000017 	ldw	fp,0(r3)
    695c:	1823883a 	mov	r17,r3
    6960:	182b883a 	mov	r21,r3
    6964:	e021883a 	mov	r16,fp
    6968:	00000106 	br	6970 <__multiply+0x18c>
    696c:	982b883a 	mov	r21,r19
    6970:	b100000b 	ldhu	r4,0(r22)
    6974:	8020d43a 	srli	r16,r16,16
    6978:	900b883a 	mov	r5,r18
    697c:	000aa280 	call	aa28 <__mulsi3>
    6980:	1405883a 	add	r2,r2,r16
    6984:	15ef883a 	add	r23,r2,r23
    6988:	b804943a 	slli	r2,r23,16
    698c:	e0ffffcc 	andi	r3,fp,65535
    6990:	8c400104 	addi	r17,r17,4
    6994:	10c6b03a 	or	r3,r2,r3
    6998:	88ffff15 	stw	r3,-4(r17)
    699c:	b5800104 	addi	r22,r22,4
    69a0:	b13fff17 	ldw	r4,-4(r22)
    69a4:	acc00104 	addi	r19,r21,4
    69a8:	900b883a 	mov	r5,r18
    69ac:	2008d43a 	srli	r4,r4,16
    69b0:	9c000017 	ldw	r16,0(r19)
    69b4:	000aa280 	call	aa28 <__mulsi3>
    69b8:	b806d43a 	srli	r3,r23,16
    69bc:	813fffcc 	andi	r4,r16,65535
    69c0:	1105883a 	add	r2,r2,r4
    69c4:	10f9883a 	add	fp,r2,r3
    69c8:	e02ed43a 	srli	r23,fp,16
    69cc:	b53fe736 	bltu	r22,r20,696c <__multiply+0x188>
    69d0:	af000115 	stw	fp,4(r21)
    69d4:	d8c00017 	ldw	r3,0(sp)
    69d8:	d9000517 	ldw	r4,20(sp)
    69dc:	18c00104 	addi	r3,r3,4
    69e0:	d8c00015 	stw	r3,0(sp)
    69e4:	d8c00117 	ldw	r3,4(sp)
    69e8:	18c00104 	addi	r3,r3,4
    69ec:	d8c00115 	stw	r3,4(sp)
    69f0:	d8c00017 	ldw	r3,0(sp)
    69f4:	193fb136 	bltu	r3,r4,68bc <__multiply+0xd8>
    69f8:	d8c00217 	ldw	r3,8(sp)
    69fc:	00c00c0e 	bge	zero,r3,6a30 <__multiply+0x24c>
    6a00:	d8c00317 	ldw	r3,12(sp)
    6a04:	18bfff17 	ldw	r2,-4(r3)
    6a08:	1d7fff04 	addi	r21,r3,-4
    6a0c:	10000326 	beq	r2,zero,6a1c <__multiply+0x238>
    6a10:	00000706 	br	6a30 <__multiply+0x24c>
    6a14:	a8800017 	ldw	r2,0(r21)
    6a18:	1000051e 	bne	r2,zero,6a30 <__multiply+0x24c>
    6a1c:	d8c00217 	ldw	r3,8(sp)
    6a20:	ad7fff04 	addi	r21,r21,-4
    6a24:	18ffffc4 	addi	r3,r3,-1
    6a28:	d8c00215 	stw	r3,8(sp)
    6a2c:	183ff91e 	bne	r3,zero,6a14 <__multiply+0x230>
    6a30:	d8c00617 	ldw	r3,24(sp)
    6a34:	d9000217 	ldw	r4,8(sp)
    6a38:	1805883a 	mov	r2,r3
    6a3c:	19000415 	stw	r4,16(r3)
    6a40:	dfc01017 	ldw	ra,64(sp)
    6a44:	df000f17 	ldw	fp,60(sp)
    6a48:	ddc00e17 	ldw	r23,56(sp)
    6a4c:	dd800d17 	ldw	r22,52(sp)
    6a50:	dd400c17 	ldw	r21,48(sp)
    6a54:	dd000b17 	ldw	r20,44(sp)
    6a58:	dcc00a17 	ldw	r19,40(sp)
    6a5c:	dc800917 	ldw	r18,36(sp)
    6a60:	dc400817 	ldw	r17,32(sp)
    6a64:	dc000717 	ldw	r16,28(sp)
    6a68:	dec01104 	addi	sp,sp,68
    6a6c:	f800283a 	ret

00006a70 <__pow5mult>:
    6a70:	defffa04 	addi	sp,sp,-24
    6a74:	dcc00315 	stw	r19,12(sp)
    6a78:	dc000015 	stw	r16,0(sp)
    6a7c:	dfc00515 	stw	ra,20(sp)
    6a80:	dd000415 	stw	r20,16(sp)
    6a84:	dc800215 	stw	r18,8(sp)
    6a88:	dc400115 	stw	r17,4(sp)
    6a8c:	308000cc 	andi	r2,r6,3
    6a90:	3021883a 	mov	r16,r6
    6a94:	2027883a 	mov	r19,r4
    6a98:	10002f1e 	bne	r2,zero,6b58 <__pow5mult+0xe8>
    6a9c:	2825883a 	mov	r18,r5
    6aa0:	8021d0ba 	srai	r16,r16,2
    6aa4:	80001a26 	beq	r16,zero,6b10 <__pow5mult+0xa0>
    6aa8:	9c401217 	ldw	r17,72(r19)
    6aac:	8800061e 	bne	r17,zero,6ac8 <__pow5mult+0x58>
    6ab0:	00003406 	br	6b84 <__pow5mult+0x114>
    6ab4:	8021d07a 	srai	r16,r16,1
    6ab8:	80001526 	beq	r16,zero,6b10 <__pow5mult+0xa0>
    6abc:	88800017 	ldw	r2,0(r17)
    6ac0:	10001c26 	beq	r2,zero,6b34 <__pow5mult+0xc4>
    6ac4:	1023883a 	mov	r17,r2
    6ac8:	8080004c 	andi	r2,r16,1
    6acc:	103ff926 	beq	r2,zero,6ab4 <__pow5mult+0x44>
    6ad0:	880d883a 	mov	r6,r17
    6ad4:	900b883a 	mov	r5,r18
    6ad8:	9809883a 	mov	r4,r19
    6adc:	00067e40 	call	67e4 <__multiply>
    6ae0:	90001b26 	beq	r18,zero,6b50 <__pow5mult+0xe0>
    6ae4:	91000117 	ldw	r4,4(r18)
    6ae8:	98c01317 	ldw	r3,76(r19)
    6aec:	8021d07a 	srai	r16,r16,1
    6af0:	2109883a 	add	r4,r4,r4
    6af4:	2109883a 	add	r4,r4,r4
    6af8:	1907883a 	add	r3,r3,r4
    6afc:	19000017 	ldw	r4,0(r3)
    6b00:	91000015 	stw	r4,0(r18)
    6b04:	1c800015 	stw	r18,0(r3)
    6b08:	1025883a 	mov	r18,r2
    6b0c:	803feb1e 	bne	r16,zero,6abc <__pow5mult+0x4c>
    6b10:	9005883a 	mov	r2,r18
    6b14:	dfc00517 	ldw	ra,20(sp)
    6b18:	dd000417 	ldw	r20,16(sp)
    6b1c:	dcc00317 	ldw	r19,12(sp)
    6b20:	dc800217 	ldw	r18,8(sp)
    6b24:	dc400117 	ldw	r17,4(sp)
    6b28:	dc000017 	ldw	r16,0(sp)
    6b2c:	dec00604 	addi	sp,sp,24
    6b30:	f800283a 	ret
    6b34:	880d883a 	mov	r6,r17
    6b38:	880b883a 	mov	r5,r17
    6b3c:	9809883a 	mov	r4,r19
    6b40:	00067e40 	call	67e4 <__multiply>
    6b44:	88800015 	stw	r2,0(r17)
    6b48:	10000015 	stw	zero,0(r2)
    6b4c:	003fdd06 	br	6ac4 <__pow5mult+0x54>
    6b50:	1025883a 	mov	r18,r2
    6b54:	003fd706 	br	6ab4 <__pow5mult+0x44>
    6b58:	10bfffc4 	addi	r2,r2,-1
    6b5c:	1085883a 	add	r2,r2,r2
    6b60:	00c00074 	movhi	r3,1
    6b64:	18c03304 	addi	r3,r3,204
    6b68:	1085883a 	add	r2,r2,r2
    6b6c:	1885883a 	add	r2,r3,r2
    6b70:	11800017 	ldw	r6,0(r2)
    6b74:	000f883a 	mov	r7,zero
    6b78:	00064440 	call	6444 <__multadd>
    6b7c:	1025883a 	mov	r18,r2
    6b80:	003fc706 	br	6aa0 <__pow5mult+0x30>
    6b84:	05000044 	movi	r20,1
    6b88:	a00b883a 	mov	r5,r20
    6b8c:	9809883a 	mov	r4,r19
    6b90:	00063740 	call	6374 <_Balloc>
    6b94:	1023883a 	mov	r17,r2
    6b98:	00809c44 	movi	r2,625
    6b9c:	88800515 	stw	r2,20(r17)
    6ba0:	8d000415 	stw	r20,16(r17)
    6ba4:	9c401215 	stw	r17,72(r19)
    6ba8:	88000015 	stw	zero,0(r17)
    6bac:	003fc606 	br	6ac8 <__pow5mult+0x58>

00006bb0 <__lshift>:
    6bb0:	defff904 	addi	sp,sp,-28
    6bb4:	dd400515 	stw	r21,20(sp)
    6bb8:	dcc00315 	stw	r19,12(sp)
    6bbc:	302bd17a 	srai	r21,r6,5
    6bc0:	2cc00417 	ldw	r19,16(r5)
    6bc4:	28800217 	ldw	r2,8(r5)
    6bc8:	dd000415 	stw	r20,16(sp)
    6bcc:	ace7883a 	add	r19,r21,r19
    6bd0:	dc800215 	stw	r18,8(sp)
    6bd4:	dc400115 	stw	r17,4(sp)
    6bd8:	dc000015 	stw	r16,0(sp)
    6bdc:	dfc00615 	stw	ra,24(sp)
    6be0:	9c000044 	addi	r16,r19,1
    6be4:	2823883a 	mov	r17,r5
    6be8:	3029883a 	mov	r20,r6
    6bec:	2025883a 	mov	r18,r4
    6bf0:	29400117 	ldw	r5,4(r5)
    6bf4:	1400030e 	bge	r2,r16,6c04 <__lshift+0x54>
    6bf8:	1085883a 	add	r2,r2,r2
    6bfc:	29400044 	addi	r5,r5,1
    6c00:	143ffd16 	blt	r2,r16,6bf8 <__lshift+0x48>
    6c04:	9009883a 	mov	r4,r18
    6c08:	00063740 	call	6374 <_Balloc>
    6c0c:	10c00504 	addi	r3,r2,20
    6c10:	0540070e 	bge	zero,r21,6c30 <__lshift+0x80>
    6c14:	ad6b883a 	add	r21,r21,r21
    6c18:	ad6b883a 	add	r21,r21,r21
    6c1c:	1809883a 	mov	r4,r3
    6c20:	1d47883a 	add	r3,r3,r21
    6c24:	20000015 	stw	zero,0(r4)
    6c28:	21000104 	addi	r4,r4,4
    6c2c:	193ffd1e 	bne	r3,r4,6c24 <__lshift+0x74>
    6c30:	8a000417 	ldw	r8,16(r17)
    6c34:	89000504 	addi	r4,r17,20
    6c38:	a18007cc 	andi	r6,r20,31
    6c3c:	4211883a 	add	r8,r8,r8
    6c40:	4211883a 	add	r8,r8,r8
    6c44:	2211883a 	add	r8,r4,r8
    6c48:	30002326 	beq	r6,zero,6cd8 <__lshift+0x128>
    6c4c:	02400804 	movi	r9,32
    6c50:	4993c83a 	sub	r9,r9,r6
    6c54:	000b883a 	mov	r5,zero
    6c58:	21c00017 	ldw	r7,0(r4)
    6c5c:	1815883a 	mov	r10,r3
    6c60:	18c00104 	addi	r3,r3,4
    6c64:	398e983a 	sll	r7,r7,r6
    6c68:	21000104 	addi	r4,r4,4
    6c6c:	394ab03a 	or	r5,r7,r5
    6c70:	197fff15 	stw	r5,-4(r3)
    6c74:	217fff17 	ldw	r5,-4(r4)
    6c78:	2a4ad83a 	srl	r5,r5,r9
    6c7c:	223ff636 	bltu	r4,r8,6c58 <__lshift+0xa8>
    6c80:	51400115 	stw	r5,4(r10)
    6c84:	28001a1e 	bne	r5,zero,6cf0 <__lshift+0x140>
    6c88:	843fffc4 	addi	r16,r16,-1
    6c8c:	14000415 	stw	r16,16(r2)
    6c90:	88000826 	beq	r17,zero,6cb4 <__lshift+0x104>
    6c94:	89000117 	ldw	r4,4(r17)
    6c98:	90c01317 	ldw	r3,76(r18)
    6c9c:	2109883a 	add	r4,r4,r4
    6ca0:	2109883a 	add	r4,r4,r4
    6ca4:	1907883a 	add	r3,r3,r4
    6ca8:	19000017 	ldw	r4,0(r3)
    6cac:	89000015 	stw	r4,0(r17)
    6cb0:	1c400015 	stw	r17,0(r3)
    6cb4:	dfc00617 	ldw	ra,24(sp)
    6cb8:	dd400517 	ldw	r21,20(sp)
    6cbc:	dd000417 	ldw	r20,16(sp)
    6cc0:	dcc00317 	ldw	r19,12(sp)
    6cc4:	dc800217 	ldw	r18,8(sp)
    6cc8:	dc400117 	ldw	r17,4(sp)
    6ccc:	dc000017 	ldw	r16,0(sp)
    6cd0:	dec00704 	addi	sp,sp,28
    6cd4:	f800283a 	ret
    6cd8:	21400017 	ldw	r5,0(r4)
    6cdc:	18c00104 	addi	r3,r3,4
    6ce0:	21000104 	addi	r4,r4,4
    6ce4:	197fff15 	stw	r5,-4(r3)
    6ce8:	223ffb36 	bltu	r4,r8,6cd8 <__lshift+0x128>
    6cec:	003fe606 	br	6c88 <__lshift+0xd8>
    6cf0:	9c000084 	addi	r16,r19,2
    6cf4:	003fe406 	br	6c88 <__lshift+0xd8>

00006cf8 <__mcmp>:
    6cf8:	20800417 	ldw	r2,16(r4)
    6cfc:	28c00417 	ldw	r3,16(r5)
    6d00:	10c5c83a 	sub	r2,r2,r3
    6d04:	1000111e 	bne	r2,zero,6d4c <__mcmp+0x54>
    6d08:	18c7883a 	add	r3,r3,r3
    6d0c:	18c7883a 	add	r3,r3,r3
    6d10:	21000504 	addi	r4,r4,20
    6d14:	29400504 	addi	r5,r5,20
    6d18:	20c5883a 	add	r2,r4,r3
    6d1c:	28cb883a 	add	r5,r5,r3
    6d20:	00000106 	br	6d28 <__mcmp+0x30>
    6d24:	20800a2e 	bgeu	r4,r2,6d50 <__mcmp+0x58>
    6d28:	10bfff04 	addi	r2,r2,-4
    6d2c:	297fff04 	addi	r5,r5,-4
    6d30:	11800017 	ldw	r6,0(r2)
    6d34:	28c00017 	ldw	r3,0(r5)
    6d38:	30fffa26 	beq	r6,r3,6d24 <__mcmp+0x2c>
    6d3c:	30c00236 	bltu	r6,r3,6d48 <__mcmp+0x50>
    6d40:	00800044 	movi	r2,1
    6d44:	f800283a 	ret
    6d48:	00bfffc4 	movi	r2,-1
    6d4c:	f800283a 	ret
    6d50:	0005883a 	mov	r2,zero
    6d54:	f800283a 	ret

00006d58 <__mdiff>:
    6d58:	28c00417 	ldw	r3,16(r5)
    6d5c:	30800417 	ldw	r2,16(r6)
    6d60:	defffa04 	addi	sp,sp,-24
    6d64:	dcc00315 	stw	r19,12(sp)
    6d68:	dc800215 	stw	r18,8(sp)
    6d6c:	dfc00515 	stw	ra,20(sp)
    6d70:	dd000415 	stw	r20,16(sp)
    6d74:	dc400115 	stw	r17,4(sp)
    6d78:	dc000015 	stw	r16,0(sp)
    6d7c:	1887c83a 	sub	r3,r3,r2
    6d80:	2825883a 	mov	r18,r5
    6d84:	3027883a 	mov	r19,r6
    6d88:	1800141e 	bne	r3,zero,6ddc <__mdiff+0x84>
    6d8c:	1085883a 	add	r2,r2,r2
    6d90:	1085883a 	add	r2,r2,r2
    6d94:	2a000504 	addi	r8,r5,20
    6d98:	34000504 	addi	r16,r6,20
    6d9c:	4087883a 	add	r3,r8,r2
    6da0:	8085883a 	add	r2,r16,r2
    6da4:	00000106 	br	6dac <__mdiff+0x54>
    6da8:	40c0592e 	bgeu	r8,r3,6f10 <__mdiff+0x1b8>
    6dac:	18ffff04 	addi	r3,r3,-4
    6db0:	10bfff04 	addi	r2,r2,-4
    6db4:	19c00017 	ldw	r7,0(r3)
    6db8:	11400017 	ldw	r5,0(r2)
    6dbc:	397ffa26 	beq	r7,r5,6da8 <__mdiff+0x50>
    6dc0:	3940592e 	bgeu	r7,r5,6f28 <__mdiff+0x1d0>
    6dc4:	9005883a 	mov	r2,r18
    6dc8:	4023883a 	mov	r17,r8
    6dcc:	9825883a 	mov	r18,r19
    6dd0:	05000044 	movi	r20,1
    6dd4:	1027883a 	mov	r19,r2
    6dd8:	00000406 	br	6dec <__mdiff+0x94>
    6ddc:	18005616 	blt	r3,zero,6f38 <__mdiff+0x1e0>
    6de0:	34400504 	addi	r17,r6,20
    6de4:	2c000504 	addi	r16,r5,20
    6de8:	0029883a 	mov	r20,zero
    6dec:	91400117 	ldw	r5,4(r18)
    6df0:	00063740 	call	6374 <_Balloc>
    6df4:	92400417 	ldw	r9,16(r18)
    6df8:	9b000417 	ldw	r12,16(r19)
    6dfc:	12c00504 	addi	r11,r2,20
    6e00:	4a51883a 	add	r8,r9,r9
    6e04:	6319883a 	add	r12,r12,r12
    6e08:	4211883a 	add	r8,r8,r8
    6e0c:	6319883a 	add	r12,r12,r12
    6e10:	15000315 	stw	r20,12(r2)
    6e14:	8211883a 	add	r8,r16,r8
    6e18:	8b19883a 	add	r12,r17,r12
    6e1c:	0007883a 	mov	r3,zero
    6e20:	81400017 	ldw	r5,0(r16)
    6e24:	89c00017 	ldw	r7,0(r17)
    6e28:	59800104 	addi	r6,r11,4
    6e2c:	293fffcc 	andi	r4,r5,65535
    6e30:	20c7883a 	add	r3,r4,r3
    6e34:	393fffcc 	andi	r4,r7,65535
    6e38:	1909c83a 	sub	r4,r3,r4
    6e3c:	280ad43a 	srli	r5,r5,16
    6e40:	380ed43a 	srli	r7,r7,16
    6e44:	2007d43a 	srai	r3,r4,16
    6e48:	213fffcc 	andi	r4,r4,65535
    6e4c:	29cbc83a 	sub	r5,r5,r7
    6e50:	28c7883a 	add	r3,r5,r3
    6e54:	180a943a 	slli	r5,r3,16
    6e58:	8c400104 	addi	r17,r17,4
    6e5c:	84000104 	addi	r16,r16,4
    6e60:	2908b03a 	or	r4,r5,r4
    6e64:	59000015 	stw	r4,0(r11)
    6e68:	1807d43a 	srai	r3,r3,16
    6e6c:	3015883a 	mov	r10,r6
    6e70:	3017883a 	mov	r11,r6
    6e74:	8b3fea36 	bltu	r17,r12,6e20 <__mdiff+0xc8>
    6e78:	8200162e 	bgeu	r16,r8,6ed4 <__mdiff+0x17c>
    6e7c:	8017883a 	mov	r11,r16
    6e80:	59400017 	ldw	r5,0(r11)
    6e84:	31800104 	addi	r6,r6,4
    6e88:	5ac00104 	addi	r11,r11,4
    6e8c:	293fffcc 	andi	r4,r5,65535
    6e90:	20c7883a 	add	r3,r4,r3
    6e94:	280ed43a 	srli	r7,r5,16
    6e98:	180bd43a 	srai	r5,r3,16
    6e9c:	193fffcc 	andi	r4,r3,65535
    6ea0:	3947883a 	add	r3,r7,r5
    6ea4:	180a943a 	slli	r5,r3,16
    6ea8:	1807d43a 	srai	r3,r3,16
    6eac:	2908b03a 	or	r4,r5,r4
    6eb0:	313fff15 	stw	r4,-4(r6)
    6eb4:	5a3ff236 	bltu	r11,r8,6e80 <__mdiff+0x128>
    6eb8:	0406303a 	nor	r3,zero,r16
    6ebc:	1a07883a 	add	r3,r3,r8
    6ec0:	1806d0ba 	srli	r3,r3,2
    6ec4:	18c00044 	addi	r3,r3,1
    6ec8:	18c7883a 	add	r3,r3,r3
    6ecc:	18c7883a 	add	r3,r3,r3
    6ed0:	50d5883a 	add	r10,r10,r3
    6ed4:	50ffff04 	addi	r3,r10,-4
    6ed8:	2000041e 	bne	r4,zero,6eec <__mdiff+0x194>
    6edc:	18ffff04 	addi	r3,r3,-4
    6ee0:	19000017 	ldw	r4,0(r3)
    6ee4:	4a7fffc4 	addi	r9,r9,-1
    6ee8:	203ffc26 	beq	r4,zero,6edc <__mdiff+0x184>
    6eec:	12400415 	stw	r9,16(r2)
    6ef0:	dfc00517 	ldw	ra,20(sp)
    6ef4:	dd000417 	ldw	r20,16(sp)
    6ef8:	dcc00317 	ldw	r19,12(sp)
    6efc:	dc800217 	ldw	r18,8(sp)
    6f00:	dc400117 	ldw	r17,4(sp)
    6f04:	dc000017 	ldw	r16,0(sp)
    6f08:	dec00604 	addi	sp,sp,24
    6f0c:	f800283a 	ret
    6f10:	000b883a 	mov	r5,zero
    6f14:	00063740 	call	6374 <_Balloc>
    6f18:	00c00044 	movi	r3,1
    6f1c:	10c00415 	stw	r3,16(r2)
    6f20:	10000515 	stw	zero,20(r2)
    6f24:	003ff206 	br	6ef0 <__mdiff+0x198>
    6f28:	8023883a 	mov	r17,r16
    6f2c:	0029883a 	mov	r20,zero
    6f30:	4021883a 	mov	r16,r8
    6f34:	003fad06 	br	6dec <__mdiff+0x94>
    6f38:	9005883a 	mov	r2,r18
    6f3c:	94400504 	addi	r17,r18,20
    6f40:	9c000504 	addi	r16,r19,20
    6f44:	9825883a 	mov	r18,r19
    6f48:	05000044 	movi	r20,1
    6f4c:	1027883a 	mov	r19,r2
    6f50:	003fa606 	br	6dec <__mdiff+0x94>

00006f54 <__ulp>:
    6f54:	295ffc2c 	andhi	r5,r5,32752
    6f58:	00bf3034 	movhi	r2,64704
    6f5c:	2887883a 	add	r3,r5,r2
    6f60:	00c0020e 	bge	zero,r3,6f6c <__ulp+0x18>
    6f64:	0005883a 	mov	r2,zero
    6f68:	f800283a 	ret
    6f6c:	00c7c83a 	sub	r3,zero,r3
    6f70:	1807d53a 	srai	r3,r3,20
    6f74:	008004c4 	movi	r2,19
    6f78:	10c00b0e 	bge	r2,r3,6fa8 <__ulp+0x54>
    6f7c:	18bffb04 	addi	r2,r3,-20
    6f80:	01000784 	movi	r4,30
    6f84:	0007883a 	mov	r3,zero
    6f88:	20800516 	blt	r4,r2,6fa0 <__ulp+0x4c>
    6f8c:	010007c4 	movi	r4,31
    6f90:	2089c83a 	sub	r4,r4,r2
    6f94:	00800044 	movi	r2,1
    6f98:	1104983a 	sll	r2,r2,r4
    6f9c:	f800283a 	ret
    6fa0:	00800044 	movi	r2,1
    6fa4:	f800283a 	ret
    6fa8:	01400234 	movhi	r5,8
    6fac:	28c7d83a 	sra	r3,r5,r3
    6fb0:	0005883a 	mov	r2,zero
    6fb4:	f800283a 	ret

00006fb8 <__b2d>:
    6fb8:	defffa04 	addi	sp,sp,-24
    6fbc:	dc000015 	stw	r16,0(sp)
    6fc0:	24000417 	ldw	r16,16(r4)
    6fc4:	dc400115 	stw	r17,4(sp)
    6fc8:	24400504 	addi	r17,r4,20
    6fcc:	8421883a 	add	r16,r16,r16
    6fd0:	8421883a 	add	r16,r16,r16
    6fd4:	8c21883a 	add	r16,r17,r16
    6fd8:	dc800215 	stw	r18,8(sp)
    6fdc:	84bfff17 	ldw	r18,-4(r16)
    6fe0:	dd000415 	stw	r20,16(sp)
    6fe4:	dcc00315 	stw	r19,12(sp)
    6fe8:	9009883a 	mov	r4,r18
    6fec:	2829883a 	mov	r20,r5
    6ff0:	dfc00515 	stw	ra,20(sp)
    6ff4:	00066900 	call	6690 <__hi0bits>
    6ff8:	00c00804 	movi	r3,32
    6ffc:	1889c83a 	sub	r4,r3,r2
    7000:	a1000015 	stw	r4,0(r20)
    7004:	01000284 	movi	r4,10
    7008:	84ffff04 	addi	r19,r16,-4
    700c:	20801216 	blt	r4,r2,7058 <__b2d+0xa0>
    7010:	018002c4 	movi	r6,11
    7014:	308dc83a 	sub	r6,r6,r2
    7018:	9186d83a 	srl	r3,r18,r6
    701c:	18cffc34 	orhi	r3,r3,16368
    7020:	8cc0212e 	bgeu	r17,r19,70a8 <__b2d+0xf0>
    7024:	813ffe17 	ldw	r4,-8(r16)
    7028:	218cd83a 	srl	r6,r4,r6
    702c:	10800544 	addi	r2,r2,21
    7030:	9084983a 	sll	r2,r18,r2
    7034:	1184b03a 	or	r2,r2,r6
    7038:	dfc00517 	ldw	ra,20(sp)
    703c:	dd000417 	ldw	r20,16(sp)
    7040:	dcc00317 	ldw	r19,12(sp)
    7044:	dc800217 	ldw	r18,8(sp)
    7048:	dc400117 	ldw	r17,4(sp)
    704c:	dc000017 	ldw	r16,0(sp)
    7050:	dec00604 	addi	sp,sp,24
    7054:	f800283a 	ret
    7058:	8cc00f2e 	bgeu	r17,r19,7098 <__b2d+0xe0>
    705c:	117ffd44 	addi	r5,r2,-11
    7060:	80bffe17 	ldw	r2,-8(r16)
    7064:	28000e26 	beq	r5,zero,70a0 <__b2d+0xe8>
    7068:	1949c83a 	sub	r4,r3,r5
    706c:	9164983a 	sll	r18,r18,r5
    7070:	1106d83a 	srl	r3,r2,r4
    7074:	81bffe04 	addi	r6,r16,-8
    7078:	948ffc34 	orhi	r18,r18,16368
    707c:	90c6b03a 	or	r3,r18,r3
    7080:	89800e2e 	bgeu	r17,r6,70bc <__b2d+0x104>
    7084:	81bffd17 	ldw	r6,-12(r16)
    7088:	1144983a 	sll	r2,r2,r5
    708c:	310ad83a 	srl	r5,r6,r4
    7090:	2884b03a 	or	r2,r5,r2
    7094:	003fe806 	br	7038 <__b2d+0x80>
    7098:	10bffd44 	addi	r2,r2,-11
    709c:	1000041e 	bne	r2,zero,70b0 <__b2d+0xf8>
    70a0:	90cffc34 	orhi	r3,r18,16368
    70a4:	003fe406 	br	7038 <__b2d+0x80>
    70a8:	000d883a 	mov	r6,zero
    70ac:	003fdf06 	br	702c <__b2d+0x74>
    70b0:	90a4983a 	sll	r18,r18,r2
    70b4:	0005883a 	mov	r2,zero
    70b8:	003ff906 	br	70a0 <__b2d+0xe8>
    70bc:	1144983a 	sll	r2,r2,r5
    70c0:	003fdd06 	br	7038 <__b2d+0x80>

000070c4 <__d2b>:
    70c4:	defff804 	addi	sp,sp,-32
    70c8:	dc000215 	stw	r16,8(sp)
    70cc:	3021883a 	mov	r16,r6
    70d0:	dc400315 	stw	r17,12(sp)
    70d4:	8022907a 	slli	r17,r16,1
    70d8:	dd000615 	stw	r20,24(sp)
    70dc:	2829883a 	mov	r20,r5
    70e0:	01400044 	movi	r5,1
    70e4:	dcc00515 	stw	r19,20(sp)
    70e8:	dc800415 	stw	r18,16(sp)
    70ec:	dfc00715 	stw	ra,28(sp)
    70f0:	3825883a 	mov	r18,r7
    70f4:	8822d57a 	srli	r17,r17,21
    70f8:	00063740 	call	6374 <_Balloc>
    70fc:	1027883a 	mov	r19,r2
    7100:	00800434 	movhi	r2,16
    7104:	10bfffc4 	addi	r2,r2,-1
    7108:	808c703a 	and	r6,r16,r2
    710c:	88000126 	beq	r17,zero,7114 <__d2b+0x50>
    7110:	31800434 	orhi	r6,r6,16
    7114:	d9800015 	stw	r6,0(sp)
    7118:	a0002426 	beq	r20,zero,71ac <__d2b+0xe8>
    711c:	d9000104 	addi	r4,sp,4
    7120:	dd000115 	stw	r20,4(sp)
    7124:	00066f80 	call	66f8 <__lo0bits>
    7128:	d8c00017 	ldw	r3,0(sp)
    712c:	10002f1e 	bne	r2,zero,71ec <__d2b+0x128>
    7130:	d9000117 	ldw	r4,4(sp)
    7134:	99000515 	stw	r4,20(r19)
    7138:	1821003a 	cmpeq	r16,r3,zero
    713c:	01000084 	movi	r4,2
    7140:	2421c83a 	sub	r16,r4,r16
    7144:	98c00615 	stw	r3,24(r19)
    7148:	9c000415 	stw	r16,16(r19)
    714c:	88001f1e 	bne	r17,zero,71cc <__d2b+0x108>
    7150:	10bef384 	addi	r2,r2,-1074
    7154:	90800015 	stw	r2,0(r18)
    7158:	00900034 	movhi	r2,16384
    715c:	10bfffc4 	addi	r2,r2,-1
    7160:	8085883a 	add	r2,r16,r2
    7164:	1085883a 	add	r2,r2,r2
    7168:	1085883a 	add	r2,r2,r2
    716c:	9885883a 	add	r2,r19,r2
    7170:	11000517 	ldw	r4,20(r2)
    7174:	8020917a 	slli	r16,r16,5
    7178:	00066900 	call	6690 <__hi0bits>
    717c:	d8c00817 	ldw	r3,32(sp)
    7180:	8085c83a 	sub	r2,r16,r2
    7184:	18800015 	stw	r2,0(r3)
    7188:	9805883a 	mov	r2,r19
    718c:	dfc00717 	ldw	ra,28(sp)
    7190:	dd000617 	ldw	r20,24(sp)
    7194:	dcc00517 	ldw	r19,20(sp)
    7198:	dc800417 	ldw	r18,16(sp)
    719c:	dc400317 	ldw	r17,12(sp)
    71a0:	dc000217 	ldw	r16,8(sp)
    71a4:	dec00804 	addi	sp,sp,32
    71a8:	f800283a 	ret
    71ac:	d809883a 	mov	r4,sp
    71b0:	00066f80 	call	66f8 <__lo0bits>
    71b4:	d8c00017 	ldw	r3,0(sp)
    71b8:	04000044 	movi	r16,1
    71bc:	9c000415 	stw	r16,16(r19)
    71c0:	98c00515 	stw	r3,20(r19)
    71c4:	10800804 	addi	r2,r2,32
    71c8:	883fe126 	beq	r17,zero,7150 <__d2b+0x8c>
    71cc:	00c00d44 	movi	r3,53
    71d0:	8c7ef344 	addi	r17,r17,-1075
    71d4:	88a3883a 	add	r17,r17,r2
    71d8:	1885c83a 	sub	r2,r3,r2
    71dc:	d8c00817 	ldw	r3,32(sp)
    71e0:	94400015 	stw	r17,0(r18)
    71e4:	18800015 	stw	r2,0(r3)
    71e8:	003fe706 	br	7188 <__d2b+0xc4>
    71ec:	01000804 	movi	r4,32
    71f0:	2089c83a 	sub	r4,r4,r2
    71f4:	1908983a 	sll	r4,r3,r4
    71f8:	d9400117 	ldw	r5,4(sp)
    71fc:	1886d83a 	srl	r3,r3,r2
    7200:	2148b03a 	or	r4,r4,r5
    7204:	99000515 	stw	r4,20(r19)
    7208:	d8c00015 	stw	r3,0(sp)
    720c:	003fca06 	br	7138 <__d2b+0x74>

00007210 <__ratio>:
    7210:	defff904 	addi	sp,sp,-28
    7214:	dc400315 	stw	r17,12(sp)
    7218:	2823883a 	mov	r17,r5
    721c:	d9400104 	addi	r5,sp,4
    7220:	dfc00615 	stw	ra,24(sp)
    7224:	dcc00515 	stw	r19,20(sp)
    7228:	dc800415 	stw	r18,16(sp)
    722c:	2027883a 	mov	r19,r4
    7230:	dc000215 	stw	r16,8(sp)
    7234:	0006fb80 	call	6fb8 <__b2d>
    7238:	d80b883a 	mov	r5,sp
    723c:	8809883a 	mov	r4,r17
    7240:	1025883a 	mov	r18,r2
    7244:	1821883a 	mov	r16,r3
    7248:	0006fb80 	call	6fb8 <__b2d>
    724c:	8a000417 	ldw	r8,16(r17)
    7250:	99000417 	ldw	r4,16(r19)
    7254:	d9400117 	ldw	r5,4(sp)
    7258:	2209c83a 	sub	r4,r4,r8
    725c:	2010917a 	slli	r8,r4,5
    7260:	d9000017 	ldw	r4,0(sp)
    7264:	2909c83a 	sub	r4,r5,r4
    7268:	4109883a 	add	r4,r8,r4
    726c:	01000e0e 	bge	zero,r4,72a8 <__ratio+0x98>
    7270:	2008953a 	slli	r4,r4,20
    7274:	2421883a 	add	r16,r4,r16
    7278:	100d883a 	mov	r6,r2
    727c:	180f883a 	mov	r7,r3
    7280:	9009883a 	mov	r4,r18
    7284:	800b883a 	mov	r5,r16
    7288:	000b2fc0 	call	b2fc <__divdf3>
    728c:	dfc00617 	ldw	ra,24(sp)
    7290:	dcc00517 	ldw	r19,20(sp)
    7294:	dc800417 	ldw	r18,16(sp)
    7298:	dc400317 	ldw	r17,12(sp)
    729c:	dc000217 	ldw	r16,8(sp)
    72a0:	dec00704 	addi	sp,sp,28
    72a4:	f800283a 	ret
    72a8:	2008953a 	slli	r4,r4,20
    72ac:	1907c83a 	sub	r3,r3,r4
    72b0:	003ff106 	br	7278 <__ratio+0x68>

000072b4 <_mprec_log10>:
    72b4:	defffe04 	addi	sp,sp,-8
    72b8:	dc000015 	stw	r16,0(sp)
    72bc:	dfc00115 	stw	ra,4(sp)
    72c0:	008005c4 	movi	r2,23
    72c4:	2021883a 	mov	r16,r4
    72c8:	11000d0e 	bge	r2,r4,7300 <_mprec_log10+0x4c>
    72cc:	0005883a 	mov	r2,zero
    72d0:	00cffc34 	movhi	r3,16368
    72d4:	843fffc4 	addi	r16,r16,-1
    72d8:	000d883a 	mov	r6,zero
    72dc:	01d00934 	movhi	r7,16420
    72e0:	1009883a 	mov	r4,r2
    72e4:	180b883a 	mov	r5,r3
    72e8:	000bf240 	call	bf24 <__muldf3>
    72ec:	803ff91e 	bne	r16,zero,72d4 <_mprec_log10+0x20>
    72f0:	dfc00117 	ldw	ra,4(sp)
    72f4:	dc000017 	ldw	r16,0(sp)
    72f8:	dec00204 	addi	sp,sp,8
    72fc:	f800283a 	ret
    7300:	202090fa 	slli	r16,r4,3
    7304:	00800074 	movhi	r2,1
    7308:	10804a04 	addi	r2,r2,296
    730c:	1421883a 	add	r16,r2,r16
    7310:	80800017 	ldw	r2,0(r16)
    7314:	80c00117 	ldw	r3,4(r16)
    7318:	dfc00117 	ldw	ra,4(sp)
    731c:	dc000017 	ldw	r16,0(sp)
    7320:	dec00204 	addi	sp,sp,8
    7324:	f800283a 	ret

00007328 <__copybits>:
    7328:	297fffc4 	addi	r5,r5,-1
    732c:	280fd17a 	srai	r7,r5,5
    7330:	30c00417 	ldw	r3,16(r6)
    7334:	30800504 	addi	r2,r6,20
    7338:	39c00044 	addi	r7,r7,1
    733c:	18c7883a 	add	r3,r3,r3
    7340:	39cf883a 	add	r7,r7,r7
    7344:	18c7883a 	add	r3,r3,r3
    7348:	39cf883a 	add	r7,r7,r7
    734c:	10c7883a 	add	r3,r2,r3
    7350:	21cf883a 	add	r7,r4,r7
    7354:	10c00d2e 	bgeu	r2,r3,738c <__copybits+0x64>
    7358:	200b883a 	mov	r5,r4
    735c:	12000017 	ldw	r8,0(r2)
    7360:	29400104 	addi	r5,r5,4
    7364:	10800104 	addi	r2,r2,4
    7368:	2a3fff15 	stw	r8,-4(r5)
    736c:	10fffb36 	bltu	r2,r3,735c <__copybits+0x34>
    7370:	1985c83a 	sub	r2,r3,r6
    7374:	10bffac4 	addi	r2,r2,-21
    7378:	1004d0ba 	srli	r2,r2,2
    737c:	10800044 	addi	r2,r2,1
    7380:	1085883a 	add	r2,r2,r2
    7384:	1085883a 	add	r2,r2,r2
    7388:	2089883a 	add	r4,r4,r2
    738c:	21c0032e 	bgeu	r4,r7,739c <__copybits+0x74>
    7390:	20000015 	stw	zero,0(r4)
    7394:	21000104 	addi	r4,r4,4
    7398:	21fffd36 	bltu	r4,r7,7390 <__copybits+0x68>
    739c:	f800283a 	ret

000073a0 <__any_on>:
    73a0:	20c00417 	ldw	r3,16(r4)
    73a4:	2805d17a 	srai	r2,r5,5
    73a8:	21000504 	addi	r4,r4,20
    73ac:	18800d0e 	bge	r3,r2,73e4 <__any_on+0x44>
    73b0:	18c7883a 	add	r3,r3,r3
    73b4:	18c7883a 	add	r3,r3,r3
    73b8:	20c7883a 	add	r3,r4,r3
    73bc:	20c0192e 	bgeu	r4,r3,7424 <__any_on+0x84>
    73c0:	18bfff17 	ldw	r2,-4(r3)
    73c4:	18ffff04 	addi	r3,r3,-4
    73c8:	1000041e 	bne	r2,zero,73dc <__any_on+0x3c>
    73cc:	20c0142e 	bgeu	r4,r3,7420 <__any_on+0x80>
    73d0:	18ffff04 	addi	r3,r3,-4
    73d4:	19400017 	ldw	r5,0(r3)
    73d8:	283ffc26 	beq	r5,zero,73cc <__any_on+0x2c>
    73dc:	00800044 	movi	r2,1
    73e0:	f800283a 	ret
    73e4:	10c00a0e 	bge	r2,r3,7410 <__any_on+0x70>
    73e8:	1085883a 	add	r2,r2,r2
    73ec:	1085883a 	add	r2,r2,r2
    73f0:	294007cc 	andi	r5,r5,31
    73f4:	2087883a 	add	r3,r4,r2
    73f8:	283ff026 	beq	r5,zero,73bc <__any_on+0x1c>
    73fc:	19800017 	ldw	r6,0(r3)
    7400:	3144d83a 	srl	r2,r6,r5
    7404:	114a983a 	sll	r5,r2,r5
    7408:	317ff41e 	bne	r6,r5,73dc <__any_on+0x3c>
    740c:	003feb06 	br	73bc <__any_on+0x1c>
    7410:	1085883a 	add	r2,r2,r2
    7414:	1085883a 	add	r2,r2,r2
    7418:	2087883a 	add	r3,r4,r2
    741c:	003fe706 	br	73bc <__any_on+0x1c>
    7420:	f800283a 	ret
    7424:	0005883a 	mov	r2,zero
    7428:	f800283a 	ret

0000742c <_realloc_r>:
    742c:	defff604 	addi	sp,sp,-40
    7430:	dc800215 	stw	r18,8(sp)
    7434:	dfc00915 	stw	ra,36(sp)
    7438:	df000815 	stw	fp,32(sp)
    743c:	ddc00715 	stw	r23,28(sp)
    7440:	dd800615 	stw	r22,24(sp)
    7444:	dd400515 	stw	r21,20(sp)
    7448:	dd000415 	stw	r20,16(sp)
    744c:	dcc00315 	stw	r19,12(sp)
    7450:	dc400115 	stw	r17,4(sp)
    7454:	dc000015 	stw	r16,0(sp)
    7458:	3025883a 	mov	r18,r6
    745c:	2800b726 	beq	r5,zero,773c <_realloc_r+0x310>
    7460:	282b883a 	mov	r21,r5
    7464:	2029883a 	mov	r20,r4
    7468:	000db300 	call	db30 <__malloc_lock>
    746c:	a8bfff17 	ldw	r2,-4(r21)
    7470:	043fff04 	movi	r16,-4
    7474:	90c002c4 	addi	r3,r18,11
    7478:	01000584 	movi	r4,22
    747c:	acfffe04 	addi	r19,r21,-8
    7480:	1420703a 	and	r16,r2,r16
    7484:	20c0332e 	bgeu	r4,r3,7554 <_realloc_r+0x128>
    7488:	047ffe04 	movi	r17,-8
    748c:	1c62703a 	and	r17,r3,r17
    7490:	8807883a 	mov	r3,r17
    7494:	88005816 	blt	r17,zero,75f8 <_realloc_r+0x1cc>
    7498:	8c805736 	bltu	r17,r18,75f8 <_realloc_r+0x1cc>
    749c:	80c0300e 	bge	r16,r3,7560 <_realloc_r+0x134>
    74a0:	07000074 	movhi	fp,1
    74a4:	e701f804 	addi	fp,fp,2016
    74a8:	e1c00217 	ldw	r7,8(fp)
    74ac:	9c09883a 	add	r4,r19,r16
    74b0:	22000117 	ldw	r8,4(r4)
    74b4:	21c06326 	beq	r4,r7,7644 <_realloc_r+0x218>
    74b8:	017fff84 	movi	r5,-2
    74bc:	414a703a 	and	r5,r8,r5
    74c0:	214b883a 	add	r5,r4,r5
    74c4:	29800117 	ldw	r6,4(r5)
    74c8:	3180004c 	andi	r6,r6,1
    74cc:	30003f26 	beq	r6,zero,75cc <_realloc_r+0x1a0>
    74d0:	1080004c 	andi	r2,r2,1
    74d4:	10008326 	beq	r2,zero,76e4 <_realloc_r+0x2b8>
    74d8:	900b883a 	mov	r5,r18
    74dc:	a009883a 	mov	r4,r20
    74e0:	00056b80 	call	56b8 <_malloc_r>
    74e4:	1025883a 	mov	r18,r2
    74e8:	10011e26 	beq	r2,zero,7964 <_realloc_r+0x538>
    74ec:	a93fff17 	ldw	r4,-4(r21)
    74f0:	10fffe04 	addi	r3,r2,-8
    74f4:	00bfff84 	movi	r2,-2
    74f8:	2084703a 	and	r2,r4,r2
    74fc:	9885883a 	add	r2,r19,r2
    7500:	1880ee26 	beq	r3,r2,78bc <_realloc_r+0x490>
    7504:	81bfff04 	addi	r6,r16,-4
    7508:	00800904 	movi	r2,36
    750c:	1180b836 	bltu	r2,r6,77f0 <_realloc_r+0x3c4>
    7510:	00c004c4 	movi	r3,19
    7514:	19809636 	bltu	r3,r6,7770 <_realloc_r+0x344>
    7518:	9005883a 	mov	r2,r18
    751c:	a807883a 	mov	r3,r21
    7520:	19000017 	ldw	r4,0(r3)
    7524:	11000015 	stw	r4,0(r2)
    7528:	19000117 	ldw	r4,4(r3)
    752c:	11000115 	stw	r4,4(r2)
    7530:	18c00217 	ldw	r3,8(r3)
    7534:	10c00215 	stw	r3,8(r2)
    7538:	a80b883a 	mov	r5,r21
    753c:	a009883a 	mov	r4,r20
    7540:	0004ac00 	call	4ac0 <_free_r>
    7544:	a009883a 	mov	r4,r20
    7548:	000db540 	call	db54 <__malloc_unlock>
    754c:	9005883a 	mov	r2,r18
    7550:	00001206 	br	759c <_realloc_r+0x170>
    7554:	00c00404 	movi	r3,16
    7558:	1823883a 	mov	r17,r3
    755c:	003fce06 	br	7498 <_realloc_r+0x6c>
    7560:	a825883a 	mov	r18,r21
    7564:	8445c83a 	sub	r2,r16,r17
    7568:	00c003c4 	movi	r3,15
    756c:	18802636 	bltu	r3,r2,7608 <_realloc_r+0x1dc>
    7570:	99800117 	ldw	r6,4(r19)
    7574:	9c07883a 	add	r3,r19,r16
    7578:	3180004c 	andi	r6,r6,1
    757c:	3420b03a 	or	r16,r6,r16
    7580:	9c000115 	stw	r16,4(r19)
    7584:	18800117 	ldw	r2,4(r3)
    7588:	10800054 	ori	r2,r2,1
    758c:	18800115 	stw	r2,4(r3)
    7590:	a009883a 	mov	r4,r20
    7594:	000db540 	call	db54 <__malloc_unlock>
    7598:	9005883a 	mov	r2,r18
    759c:	dfc00917 	ldw	ra,36(sp)
    75a0:	df000817 	ldw	fp,32(sp)
    75a4:	ddc00717 	ldw	r23,28(sp)
    75a8:	dd800617 	ldw	r22,24(sp)
    75ac:	dd400517 	ldw	r21,20(sp)
    75b0:	dd000417 	ldw	r20,16(sp)
    75b4:	dcc00317 	ldw	r19,12(sp)
    75b8:	dc800217 	ldw	r18,8(sp)
    75bc:	dc400117 	ldw	r17,4(sp)
    75c0:	dc000017 	ldw	r16,0(sp)
    75c4:	dec00a04 	addi	sp,sp,40
    75c8:	f800283a 	ret
    75cc:	017fff04 	movi	r5,-4
    75d0:	414a703a 	and	r5,r8,r5
    75d4:	814d883a 	add	r6,r16,r5
    75d8:	30c01f16 	blt	r6,r3,7658 <_realloc_r+0x22c>
    75dc:	20800317 	ldw	r2,12(r4)
    75e0:	20c00217 	ldw	r3,8(r4)
    75e4:	a825883a 	mov	r18,r21
    75e8:	3021883a 	mov	r16,r6
    75ec:	18800315 	stw	r2,12(r3)
    75f0:	10c00215 	stw	r3,8(r2)
    75f4:	003fdb06 	br	7564 <_realloc_r+0x138>
    75f8:	00800304 	movi	r2,12
    75fc:	a0800015 	stw	r2,0(r20)
    7600:	0005883a 	mov	r2,zero
    7604:	003fe506 	br	759c <_realloc_r+0x170>
    7608:	98c00117 	ldw	r3,4(r19)
    760c:	9c4b883a 	add	r5,r19,r17
    7610:	11000054 	ori	r4,r2,1
    7614:	18c0004c 	andi	r3,r3,1
    7618:	1c62b03a 	or	r17,r3,r17
    761c:	9c400115 	stw	r17,4(r19)
    7620:	29000115 	stw	r4,4(r5)
    7624:	2885883a 	add	r2,r5,r2
    7628:	10c00117 	ldw	r3,4(r2)
    762c:	29400204 	addi	r5,r5,8
    7630:	a009883a 	mov	r4,r20
    7634:	18c00054 	ori	r3,r3,1
    7638:	10c00115 	stw	r3,4(r2)
    763c:	0004ac00 	call	4ac0 <_free_r>
    7640:	003fd306 	br	7590 <_realloc_r+0x164>
    7644:	017fff04 	movi	r5,-4
    7648:	414a703a 	and	r5,r8,r5
    764c:	89800404 	addi	r6,r17,16
    7650:	8151883a 	add	r8,r16,r5
    7654:	4180590e 	bge	r8,r6,77bc <_realloc_r+0x390>
    7658:	1080004c 	andi	r2,r2,1
    765c:	103f9e1e 	bne	r2,zero,74d8 <_realloc_r+0xac>
    7660:	adbffe17 	ldw	r22,-8(r21)
    7664:	00bfff04 	movi	r2,-4
    7668:	9dadc83a 	sub	r22,r19,r22
    766c:	b1800117 	ldw	r6,4(r22)
    7670:	3084703a 	and	r2,r6,r2
    7674:	20002026 	beq	r4,zero,76f8 <_realloc_r+0x2cc>
    7678:	80af883a 	add	r23,r16,r2
    767c:	b96f883a 	add	r23,r23,r5
    7680:	21c05f26 	beq	r4,r7,7800 <_realloc_r+0x3d4>
    7684:	b8c01c16 	blt	r23,r3,76f8 <_realloc_r+0x2cc>
    7688:	20800317 	ldw	r2,12(r4)
    768c:	20c00217 	ldw	r3,8(r4)
    7690:	81bfff04 	addi	r6,r16,-4
    7694:	01000904 	movi	r4,36
    7698:	18800315 	stw	r2,12(r3)
    769c:	10c00215 	stw	r3,8(r2)
    76a0:	b0c00217 	ldw	r3,8(r22)
    76a4:	b0800317 	ldw	r2,12(r22)
    76a8:	b4800204 	addi	r18,r22,8
    76ac:	18800315 	stw	r2,12(r3)
    76b0:	10c00215 	stw	r3,8(r2)
    76b4:	21801b36 	bltu	r4,r6,7724 <_realloc_r+0x2f8>
    76b8:	008004c4 	movi	r2,19
    76bc:	1180352e 	bgeu	r2,r6,7794 <_realloc_r+0x368>
    76c0:	a8800017 	ldw	r2,0(r21)
    76c4:	b0800215 	stw	r2,8(r22)
    76c8:	a8800117 	ldw	r2,4(r21)
    76cc:	b0800315 	stw	r2,12(r22)
    76d0:	008006c4 	movi	r2,27
    76d4:	11807f36 	bltu	r2,r6,78d4 <_realloc_r+0x4a8>
    76d8:	b0800404 	addi	r2,r22,16
    76dc:	ad400204 	addi	r21,r21,8
    76e0:	00002d06 	br	7798 <_realloc_r+0x36c>
    76e4:	adbffe17 	ldw	r22,-8(r21)
    76e8:	00bfff04 	movi	r2,-4
    76ec:	9dadc83a 	sub	r22,r19,r22
    76f0:	b1000117 	ldw	r4,4(r22)
    76f4:	2084703a 	and	r2,r4,r2
    76f8:	b03f7726 	beq	r22,zero,74d8 <_realloc_r+0xac>
    76fc:	80af883a 	add	r23,r16,r2
    7700:	b8ff7516 	blt	r23,r3,74d8 <_realloc_r+0xac>
    7704:	b0800317 	ldw	r2,12(r22)
    7708:	b0c00217 	ldw	r3,8(r22)
    770c:	81bfff04 	addi	r6,r16,-4
    7710:	01000904 	movi	r4,36
    7714:	18800315 	stw	r2,12(r3)
    7718:	10c00215 	stw	r3,8(r2)
    771c:	b4800204 	addi	r18,r22,8
    7720:	21bfe52e 	bgeu	r4,r6,76b8 <_realloc_r+0x28c>
    7724:	a80b883a 	mov	r5,r21
    7728:	9009883a 	mov	r4,r18
    772c:	00060f00 	call	60f0 <memmove>
    7730:	b821883a 	mov	r16,r23
    7734:	b027883a 	mov	r19,r22
    7738:	003f8a06 	br	7564 <_realloc_r+0x138>
    773c:	300b883a 	mov	r5,r6
    7740:	dfc00917 	ldw	ra,36(sp)
    7744:	df000817 	ldw	fp,32(sp)
    7748:	ddc00717 	ldw	r23,28(sp)
    774c:	dd800617 	ldw	r22,24(sp)
    7750:	dd400517 	ldw	r21,20(sp)
    7754:	dd000417 	ldw	r20,16(sp)
    7758:	dcc00317 	ldw	r19,12(sp)
    775c:	dc800217 	ldw	r18,8(sp)
    7760:	dc400117 	ldw	r17,4(sp)
    7764:	dc000017 	ldw	r16,0(sp)
    7768:	dec00a04 	addi	sp,sp,40
    776c:	00056b81 	jmpi	56b8 <_malloc_r>
    7770:	a8c00017 	ldw	r3,0(r21)
    7774:	90c00015 	stw	r3,0(r18)
    7778:	a8c00117 	ldw	r3,4(r21)
    777c:	90c00115 	stw	r3,4(r18)
    7780:	00c006c4 	movi	r3,27
    7784:	19804536 	bltu	r3,r6,789c <_realloc_r+0x470>
    7788:	90800204 	addi	r2,r18,8
    778c:	a8c00204 	addi	r3,r21,8
    7790:	003f6306 	br	7520 <_realloc_r+0xf4>
    7794:	9005883a 	mov	r2,r18
    7798:	a8c00017 	ldw	r3,0(r21)
    779c:	b821883a 	mov	r16,r23
    77a0:	b027883a 	mov	r19,r22
    77a4:	10c00015 	stw	r3,0(r2)
    77a8:	a8c00117 	ldw	r3,4(r21)
    77ac:	10c00115 	stw	r3,4(r2)
    77b0:	a8c00217 	ldw	r3,8(r21)
    77b4:	10c00215 	stw	r3,8(r2)
    77b8:	003f6a06 	br	7564 <_realloc_r+0x138>
    77bc:	9c67883a 	add	r19,r19,r17
    77c0:	4445c83a 	sub	r2,r8,r17
    77c4:	e4c00215 	stw	r19,8(fp)
    77c8:	10800054 	ori	r2,r2,1
    77cc:	98800115 	stw	r2,4(r19)
    77d0:	a8bfff17 	ldw	r2,-4(r21)
    77d4:	a009883a 	mov	r4,r20
    77d8:	1080004c 	andi	r2,r2,1
    77dc:	1462b03a 	or	r17,r2,r17
    77e0:	ac7fff15 	stw	r17,-4(r21)
    77e4:	000db540 	call	db54 <__malloc_unlock>
    77e8:	a805883a 	mov	r2,r21
    77ec:	003f6b06 	br	759c <_realloc_r+0x170>
    77f0:	a80b883a 	mov	r5,r21
    77f4:	9009883a 	mov	r4,r18
    77f8:	00060f00 	call	60f0 <memmove>
    77fc:	003f4e06 	br	7538 <_realloc_r+0x10c>
    7800:	89000404 	addi	r4,r17,16
    7804:	b93fbc16 	blt	r23,r4,76f8 <_realloc_r+0x2cc>
    7808:	b0800317 	ldw	r2,12(r22)
    780c:	b0c00217 	ldw	r3,8(r22)
    7810:	81bfff04 	addi	r6,r16,-4
    7814:	01000904 	movi	r4,36
    7818:	18800315 	stw	r2,12(r3)
    781c:	10c00215 	stw	r3,8(r2)
    7820:	b4800204 	addi	r18,r22,8
    7824:	21804336 	bltu	r4,r6,7934 <_realloc_r+0x508>
    7828:	008004c4 	movi	r2,19
    782c:	11803f2e 	bgeu	r2,r6,792c <_realloc_r+0x500>
    7830:	a8800017 	ldw	r2,0(r21)
    7834:	b0800215 	stw	r2,8(r22)
    7838:	a8800117 	ldw	r2,4(r21)
    783c:	b0800315 	stw	r2,12(r22)
    7840:	008006c4 	movi	r2,27
    7844:	11803f36 	bltu	r2,r6,7944 <_realloc_r+0x518>
    7848:	b0800404 	addi	r2,r22,16
    784c:	ad400204 	addi	r21,r21,8
    7850:	a8c00017 	ldw	r3,0(r21)
    7854:	10c00015 	stw	r3,0(r2)
    7858:	a8c00117 	ldw	r3,4(r21)
    785c:	10c00115 	stw	r3,4(r2)
    7860:	a8c00217 	ldw	r3,8(r21)
    7864:	10c00215 	stw	r3,8(r2)
    7868:	b447883a 	add	r3,r22,r17
    786c:	bc45c83a 	sub	r2,r23,r17
    7870:	e0c00215 	stw	r3,8(fp)
    7874:	10800054 	ori	r2,r2,1
    7878:	18800115 	stw	r2,4(r3)
    787c:	b0800117 	ldw	r2,4(r22)
    7880:	a009883a 	mov	r4,r20
    7884:	1080004c 	andi	r2,r2,1
    7888:	1462b03a 	or	r17,r2,r17
    788c:	b4400115 	stw	r17,4(r22)
    7890:	000db540 	call	db54 <__malloc_unlock>
    7894:	9005883a 	mov	r2,r18
    7898:	003f4006 	br	759c <_realloc_r+0x170>
    789c:	a8c00217 	ldw	r3,8(r21)
    78a0:	90c00215 	stw	r3,8(r18)
    78a4:	a8c00317 	ldw	r3,12(r21)
    78a8:	90c00315 	stw	r3,12(r18)
    78ac:	30801126 	beq	r6,r2,78f4 <_realloc_r+0x4c8>
    78b0:	90800404 	addi	r2,r18,16
    78b4:	a8c00404 	addi	r3,r21,16
    78b8:	003f1906 	br	7520 <_realloc_r+0xf4>
    78bc:	90ffff17 	ldw	r3,-4(r18)
    78c0:	00bfff04 	movi	r2,-4
    78c4:	a825883a 	mov	r18,r21
    78c8:	1884703a 	and	r2,r3,r2
    78cc:	80a1883a 	add	r16,r16,r2
    78d0:	003f2406 	br	7564 <_realloc_r+0x138>
    78d4:	a8800217 	ldw	r2,8(r21)
    78d8:	b0800415 	stw	r2,16(r22)
    78dc:	a8800317 	ldw	r2,12(r21)
    78e0:	b0800515 	stw	r2,20(r22)
    78e4:	31000a26 	beq	r6,r4,7910 <_realloc_r+0x4e4>
    78e8:	b0800604 	addi	r2,r22,24
    78ec:	ad400404 	addi	r21,r21,16
    78f0:	003fa906 	br	7798 <_realloc_r+0x36c>
    78f4:	a9000417 	ldw	r4,16(r21)
    78f8:	90800604 	addi	r2,r18,24
    78fc:	a8c00604 	addi	r3,r21,24
    7900:	91000415 	stw	r4,16(r18)
    7904:	a9000517 	ldw	r4,20(r21)
    7908:	91000515 	stw	r4,20(r18)
    790c:	003f0406 	br	7520 <_realloc_r+0xf4>
    7910:	a8c00417 	ldw	r3,16(r21)
    7914:	ad400604 	addi	r21,r21,24
    7918:	b0800804 	addi	r2,r22,32
    791c:	b0c00615 	stw	r3,24(r22)
    7920:	a8ffff17 	ldw	r3,-4(r21)
    7924:	b0c00715 	stw	r3,28(r22)
    7928:	003f9b06 	br	7798 <_realloc_r+0x36c>
    792c:	9005883a 	mov	r2,r18
    7930:	003fc706 	br	7850 <_realloc_r+0x424>
    7934:	a80b883a 	mov	r5,r21
    7938:	9009883a 	mov	r4,r18
    793c:	00060f00 	call	60f0 <memmove>
    7940:	003fc906 	br	7868 <_realloc_r+0x43c>
    7944:	a8800217 	ldw	r2,8(r21)
    7948:	b0800415 	stw	r2,16(r22)
    794c:	a8800317 	ldw	r2,12(r21)
    7950:	b0800515 	stw	r2,20(r22)
    7954:	31000726 	beq	r6,r4,7974 <_realloc_r+0x548>
    7958:	b0800604 	addi	r2,r22,24
    795c:	ad400404 	addi	r21,r21,16
    7960:	003fbb06 	br	7850 <_realloc_r+0x424>
    7964:	a009883a 	mov	r4,r20
    7968:	000db540 	call	db54 <__malloc_unlock>
    796c:	0005883a 	mov	r2,zero
    7970:	003f0a06 	br	759c <_realloc_r+0x170>
    7974:	a8c00417 	ldw	r3,16(r21)
    7978:	ad400604 	addi	r21,r21,24
    797c:	b0800804 	addi	r2,r22,32
    7980:	b0c00615 	stw	r3,24(r22)
    7984:	a8ffff17 	ldw	r3,-4(r21)
    7988:	b0c00715 	stw	r3,28(r22)
    798c:	003fb006 	br	7850 <_realloc_r+0x424>

00007990 <__fpclassifyd>:
    7990:	00a00034 	movhi	r2,32768
    7994:	10bfffc4 	addi	r2,r2,-1
    7998:	2884703a 	and	r2,r5,r2
    799c:	10000726 	beq	r2,zero,79bc <__fpclassifyd+0x2c>
    79a0:	00fffc34 	movhi	r3,65520
    79a4:	019ff834 	movhi	r6,32736
    79a8:	28c7883a 	add	r3,r5,r3
    79ac:	31bfffc4 	addi	r6,r6,-1
    79b0:	30c00536 	bltu	r6,r3,79c8 <__fpclassifyd+0x38>
    79b4:	00800104 	movi	r2,4
    79b8:	f800283a 	ret
    79bc:	2000021e 	bne	r4,zero,79c8 <__fpclassifyd+0x38>
    79c0:	00800084 	movi	r2,2
    79c4:	f800283a 	ret
    79c8:	00dffc34 	movhi	r3,32752
    79cc:	019ff834 	movhi	r6,32736
    79d0:	28cb883a 	add	r5,r5,r3
    79d4:	31bfffc4 	addi	r6,r6,-1
    79d8:	317ff62e 	bgeu	r6,r5,79b4 <__fpclassifyd+0x24>
    79dc:	01400434 	movhi	r5,16
    79e0:	297fffc4 	addi	r5,r5,-1
    79e4:	28800236 	bltu	r5,r2,79f0 <__fpclassifyd+0x60>
    79e8:	008000c4 	movi	r2,3
    79ec:	f800283a 	ret
    79f0:	10c00226 	beq	r2,r3,79fc <__fpclassifyd+0x6c>
    79f4:	0005883a 	mov	r2,zero
    79f8:	f800283a 	ret
    79fc:	2005003a 	cmpeq	r2,r4,zero
    7a00:	f800283a 	ret

00007a04 <_sbrk_r>:
    7a04:	defffd04 	addi	sp,sp,-12
    7a08:	dc000015 	stw	r16,0(sp)
    7a0c:	04000074 	movhi	r16,1
    7a10:	dc400115 	stw	r17,4(sp)
    7a14:	840e4d04 	addi	r16,r16,14644
    7a18:	2023883a 	mov	r17,r4
    7a1c:	2809883a 	mov	r4,r5
    7a20:	dfc00215 	stw	ra,8(sp)
    7a24:	80000015 	stw	zero,0(r16)
    7a28:	000dfa40 	call	dfa4 <sbrk>
    7a2c:	00ffffc4 	movi	r3,-1
    7a30:	10c00526 	beq	r2,r3,7a48 <_sbrk_r+0x44>
    7a34:	dfc00217 	ldw	ra,8(sp)
    7a38:	dc400117 	ldw	r17,4(sp)
    7a3c:	dc000017 	ldw	r16,0(sp)
    7a40:	dec00304 	addi	sp,sp,12
    7a44:	f800283a 	ret
    7a48:	80c00017 	ldw	r3,0(r16)
    7a4c:	183ff926 	beq	r3,zero,7a34 <_sbrk_r+0x30>
    7a50:	88c00015 	stw	r3,0(r17)
    7a54:	003ff706 	br	7a34 <_sbrk_r+0x30>

00007a58 <__sread>:
    7a58:	defffe04 	addi	sp,sp,-8
    7a5c:	dc000015 	stw	r16,0(sp)
    7a60:	2821883a 	mov	r16,r5
    7a64:	2940038f 	ldh	r5,14(r5)
    7a68:	dfc00115 	stw	ra,4(sp)
    7a6c:	00099140 	call	9914 <_read_r>
    7a70:	10000716 	blt	r2,zero,7a90 <__sread+0x38>
    7a74:	80c01417 	ldw	r3,80(r16)
    7a78:	1887883a 	add	r3,r3,r2
    7a7c:	80c01415 	stw	r3,80(r16)
    7a80:	dfc00117 	ldw	ra,4(sp)
    7a84:	dc000017 	ldw	r16,0(sp)
    7a88:	dec00204 	addi	sp,sp,8
    7a8c:	f800283a 	ret
    7a90:	80c0030b 	ldhu	r3,12(r16)
    7a94:	18fbffcc 	andi	r3,r3,61439
    7a98:	80c0030d 	sth	r3,12(r16)
    7a9c:	dfc00117 	ldw	ra,4(sp)
    7aa0:	dc000017 	ldw	r16,0(sp)
    7aa4:	dec00204 	addi	sp,sp,8
    7aa8:	f800283a 	ret

00007aac <__seofread>:
    7aac:	0005883a 	mov	r2,zero
    7ab0:	f800283a 	ret

00007ab4 <__swrite>:
    7ab4:	2880030b 	ldhu	r2,12(r5)
    7ab8:	defffb04 	addi	sp,sp,-20
    7abc:	dcc00315 	stw	r19,12(sp)
    7ac0:	dc800215 	stw	r18,8(sp)
    7ac4:	dc400115 	stw	r17,4(sp)
    7ac8:	dc000015 	stw	r16,0(sp)
    7acc:	dfc00415 	stw	ra,16(sp)
    7ad0:	10c0400c 	andi	r3,r2,256
    7ad4:	2821883a 	mov	r16,r5
    7ad8:	2023883a 	mov	r17,r4
    7adc:	3025883a 	mov	r18,r6
    7ae0:	3827883a 	mov	r19,r7
    7ae4:	18000526 	beq	r3,zero,7afc <__swrite+0x48>
    7ae8:	2940038f 	ldh	r5,14(r5)
    7aec:	01c00084 	movi	r7,2
    7af0:	000d883a 	mov	r6,zero
    7af4:	00098b40 	call	98b4 <_lseek_r>
    7af8:	8080030b 	ldhu	r2,12(r16)
    7afc:	8140038f 	ldh	r5,14(r16)
    7b00:	10bbffcc 	andi	r2,r2,61439
    7b04:	980f883a 	mov	r7,r19
    7b08:	900d883a 	mov	r6,r18
    7b0c:	8809883a 	mov	r4,r17
    7b10:	8080030d 	sth	r2,12(r16)
    7b14:	dfc00417 	ldw	ra,16(sp)
    7b18:	dcc00317 	ldw	r19,12(sp)
    7b1c:	dc800217 	ldw	r18,8(sp)
    7b20:	dc400117 	ldw	r17,4(sp)
    7b24:	dc000017 	ldw	r16,0(sp)
    7b28:	dec00504 	addi	sp,sp,20
    7b2c:	00093681 	jmpi	9368 <_write_r>

00007b30 <__sseek>:
    7b30:	defffe04 	addi	sp,sp,-8
    7b34:	dc000015 	stw	r16,0(sp)
    7b38:	2821883a 	mov	r16,r5
    7b3c:	2940038f 	ldh	r5,14(r5)
    7b40:	dfc00115 	stw	ra,4(sp)
    7b44:	00098b40 	call	98b4 <_lseek_r>
    7b48:	00ffffc4 	movi	r3,-1
    7b4c:	10c00826 	beq	r2,r3,7b70 <__sseek+0x40>
    7b50:	80c0030b 	ldhu	r3,12(r16)
    7b54:	80801415 	stw	r2,80(r16)
    7b58:	18c40014 	ori	r3,r3,4096
    7b5c:	80c0030d 	sth	r3,12(r16)
    7b60:	dfc00117 	ldw	ra,4(sp)
    7b64:	dc000017 	ldw	r16,0(sp)
    7b68:	dec00204 	addi	sp,sp,8
    7b6c:	f800283a 	ret
    7b70:	80c0030b 	ldhu	r3,12(r16)
    7b74:	18fbffcc 	andi	r3,r3,61439
    7b78:	80c0030d 	sth	r3,12(r16)
    7b7c:	dfc00117 	ldw	ra,4(sp)
    7b80:	dc000017 	ldw	r16,0(sp)
    7b84:	dec00204 	addi	sp,sp,8
    7b88:	f800283a 	ret

00007b8c <__sclose>:
    7b8c:	2940038f 	ldh	r5,14(r5)
    7b90:	00093c81 	jmpi	93c8 <_close_r>

00007b94 <strcmp>:
    7b94:	2144b03a 	or	r2,r4,r5
    7b98:	108000cc 	andi	r2,r2,3
    7b9c:	1000171e 	bne	r2,zero,7bfc <strcmp+0x68>
    7ba0:	20800017 	ldw	r2,0(r4)
    7ba4:	28c00017 	ldw	r3,0(r5)
    7ba8:	10c0141e 	bne	r2,r3,7bfc <strcmp+0x68>
    7bac:	027fbff4 	movhi	r9,65279
    7bb0:	4a7fbfc4 	addi	r9,r9,-257
    7bb4:	0086303a 	nor	r3,zero,r2
    7bb8:	02202074 	movhi	r8,32897
    7bbc:	1245883a 	add	r2,r2,r9
    7bc0:	42202004 	addi	r8,r8,-32640
    7bc4:	10c4703a 	and	r2,r2,r3
    7bc8:	1204703a 	and	r2,r2,r8
    7bcc:	10000226 	beq	r2,zero,7bd8 <strcmp+0x44>
    7bd0:	00002306 	br	7c60 <strcmp+0xcc>
    7bd4:	1000221e 	bne	r2,zero,7c60 <strcmp+0xcc>
    7bd8:	21000104 	addi	r4,r4,4
    7bdc:	20c00017 	ldw	r3,0(r4)
    7be0:	29400104 	addi	r5,r5,4
    7be4:	29800017 	ldw	r6,0(r5)
    7be8:	1a4f883a 	add	r7,r3,r9
    7bec:	00c4303a 	nor	r2,zero,r3
    7bf0:	3884703a 	and	r2,r7,r2
    7bf4:	1204703a 	and	r2,r2,r8
    7bf8:	19bff626 	beq	r3,r6,7bd4 <strcmp+0x40>
    7bfc:	20800003 	ldbu	r2,0(r4)
    7c00:	10c03fcc 	andi	r3,r2,255
    7c04:	18c0201c 	xori	r3,r3,128
    7c08:	18ffe004 	addi	r3,r3,-128
    7c0c:	18000c26 	beq	r3,zero,7c40 <strcmp+0xac>
    7c10:	29800007 	ldb	r6,0(r5)
    7c14:	19800326 	beq	r3,r6,7c24 <strcmp+0x90>
    7c18:	00001306 	br	7c68 <strcmp+0xd4>
    7c1c:	29800007 	ldb	r6,0(r5)
    7c20:	11800b1e 	bne	r2,r6,7c50 <strcmp+0xbc>
    7c24:	21000044 	addi	r4,r4,1
    7c28:	20c00003 	ldbu	r3,0(r4)
    7c2c:	29400044 	addi	r5,r5,1
    7c30:	18803fcc 	andi	r2,r3,255
    7c34:	1080201c 	xori	r2,r2,128
    7c38:	10bfe004 	addi	r2,r2,-128
    7c3c:	103ff71e 	bne	r2,zero,7c1c <strcmp+0x88>
    7c40:	0007883a 	mov	r3,zero
    7c44:	28800003 	ldbu	r2,0(r5)
    7c48:	1885c83a 	sub	r2,r3,r2
    7c4c:	f800283a 	ret
    7c50:	28800003 	ldbu	r2,0(r5)
    7c54:	18c03fcc 	andi	r3,r3,255
    7c58:	1885c83a 	sub	r2,r3,r2
    7c5c:	f800283a 	ret
    7c60:	0005883a 	mov	r2,zero
    7c64:	f800283a 	ret
    7c68:	10c03fcc 	andi	r3,r2,255
    7c6c:	003ff506 	br	7c44 <strcmp+0xb0>

00007c70 <__sprint_r.part.0>:
    7c70:	28801917 	ldw	r2,100(r5)
    7c74:	defff604 	addi	sp,sp,-40
    7c78:	dd400515 	stw	r21,20(sp)
    7c7c:	dfc00915 	stw	ra,36(sp)
    7c80:	df000815 	stw	fp,32(sp)
    7c84:	ddc00715 	stw	r23,28(sp)
    7c88:	dd800615 	stw	r22,24(sp)
    7c8c:	dd000415 	stw	r20,16(sp)
    7c90:	dcc00315 	stw	r19,12(sp)
    7c94:	dc800215 	stw	r18,8(sp)
    7c98:	dc400115 	stw	r17,4(sp)
    7c9c:	dc000015 	stw	r16,0(sp)
    7ca0:	1088000c 	andi	r2,r2,8192
    7ca4:	302b883a 	mov	r21,r6
    7ca8:	10002e26 	beq	r2,zero,7d64 <__sprint_r.part.0+0xf4>
    7cac:	30800217 	ldw	r2,8(r6)
    7cb0:	35800017 	ldw	r22,0(r6)
    7cb4:	10002926 	beq	r2,zero,7d5c <__sprint_r.part.0+0xec>
    7cb8:	2827883a 	mov	r19,r5
    7cbc:	2029883a 	mov	r20,r4
    7cc0:	b5c00104 	addi	r23,r22,4
    7cc4:	04bfffc4 	movi	r18,-1
    7cc8:	bc400017 	ldw	r17,0(r23)
    7ccc:	b4000017 	ldw	r16,0(r22)
    7cd0:	0039883a 	mov	fp,zero
    7cd4:	8822d0ba 	srli	r17,r17,2
    7cd8:	8800031e 	bne	r17,zero,7ce8 <__sprint_r.part.0+0x78>
    7cdc:	00001806 	br	7d40 <__sprint_r.part.0+0xd0>
    7ce0:	84000104 	addi	r16,r16,4
    7ce4:	8f001526 	beq	r17,fp,7d3c <__sprint_r.part.0+0xcc>
    7ce8:	81400017 	ldw	r5,0(r16)
    7cec:	980d883a 	mov	r6,r19
    7cf0:	a009883a 	mov	r4,r20
    7cf4:	00097600 	call	9760 <_fputwc_r>
    7cf8:	e7000044 	addi	fp,fp,1
    7cfc:	14bff81e 	bne	r2,r18,7ce0 <__sprint_r.part.0+0x70>
    7d00:	9005883a 	mov	r2,r18
    7d04:	a8000215 	stw	zero,8(r21)
    7d08:	a8000115 	stw	zero,4(r21)
    7d0c:	dfc00917 	ldw	ra,36(sp)
    7d10:	df000817 	ldw	fp,32(sp)
    7d14:	ddc00717 	ldw	r23,28(sp)
    7d18:	dd800617 	ldw	r22,24(sp)
    7d1c:	dd400517 	ldw	r21,20(sp)
    7d20:	dd000417 	ldw	r20,16(sp)
    7d24:	dcc00317 	ldw	r19,12(sp)
    7d28:	dc800217 	ldw	r18,8(sp)
    7d2c:	dc400117 	ldw	r17,4(sp)
    7d30:	dc000017 	ldw	r16,0(sp)
    7d34:	dec00a04 	addi	sp,sp,40
    7d38:	f800283a 	ret
    7d3c:	a8800217 	ldw	r2,8(r21)
    7d40:	8c63883a 	add	r17,r17,r17
    7d44:	8c63883a 	add	r17,r17,r17
    7d48:	1445c83a 	sub	r2,r2,r17
    7d4c:	a8800215 	stw	r2,8(r21)
    7d50:	b5800204 	addi	r22,r22,8
    7d54:	bdc00204 	addi	r23,r23,8
    7d58:	103fdb1e 	bne	r2,zero,7cc8 <__sprint_r.part.0+0x58>
    7d5c:	0005883a 	mov	r2,zero
    7d60:	003fe806 	br	7d04 <__sprint_r.part.0+0x94>
    7d64:	0004dd00 	call	4dd0 <__sfvwrite_r>
    7d68:	003fe606 	br	7d04 <__sprint_r.part.0+0x94>

00007d6c <__sprint_r>:
    7d6c:	30c00217 	ldw	r3,8(r6)
    7d70:	18000126 	beq	r3,zero,7d78 <__sprint_r+0xc>
    7d74:	0007c701 	jmpi	7c70 <__sprint_r.part.0>
    7d78:	30000115 	stw	zero,4(r6)
    7d7c:	0005883a 	mov	r2,zero
    7d80:	f800283a 	ret

00007d84 <___vfiprintf_internal_r>:
    7d84:	deffca04 	addi	sp,sp,-216
    7d88:	dd403115 	stw	r21,196(sp)
    7d8c:	dfc03515 	stw	ra,212(sp)
    7d90:	df003415 	stw	fp,208(sp)
    7d94:	ddc03315 	stw	r23,204(sp)
    7d98:	dd803215 	stw	r22,200(sp)
    7d9c:	dd003015 	stw	r20,192(sp)
    7da0:	dcc02f15 	stw	r19,188(sp)
    7da4:	dc802e15 	stw	r18,184(sp)
    7da8:	dc402d15 	stw	r17,180(sp)
    7dac:	dc002c15 	stw	r16,176(sp)
    7db0:	d9002115 	stw	r4,132(sp)
    7db4:	d9402015 	stw	r5,128(sp)
    7db8:	d9c02215 	stw	r7,136(sp)
    7dbc:	302b883a 	mov	r21,r6
    7dc0:	20000226 	beq	r4,zero,7dcc <___vfiprintf_internal_r+0x48>
    7dc4:	20800e17 	ldw	r2,56(r4)
    7dc8:	1000cf26 	beq	r2,zero,8108 <___vfiprintf_internal_r+0x384>
    7dcc:	d8c02017 	ldw	r3,128(sp)
    7dd0:	1880030b 	ldhu	r2,12(r3)
    7dd4:	10c8000c 	andi	r3,r2,8192
    7dd8:	1800071e 	bne	r3,zero,7df8 <___vfiprintf_internal_r+0x74>
    7ddc:	d9402017 	ldw	r5,128(sp)
    7de0:	00f7ffc4 	movi	r3,-8193
    7de4:	10880014 	ori	r2,r2,8192
    7de8:	29001917 	ldw	r4,100(r5)
    7dec:	2880030d 	sth	r2,12(r5)
    7df0:	20c6703a 	and	r3,r4,r3
    7df4:	28c01915 	stw	r3,100(r5)
    7df8:	10c0020c 	andi	r3,r2,8
    7dfc:	1800a526 	beq	r3,zero,8094 <___vfiprintf_internal_r+0x310>
    7e00:	d9002017 	ldw	r4,128(sp)
    7e04:	20c00417 	ldw	r3,16(r4)
    7e08:	1800a226 	beq	r3,zero,8094 <___vfiprintf_internal_r+0x310>
    7e0c:	1080068c 	andi	r2,r2,26
    7e10:	00c00284 	movi	r3,10
    7e14:	10c0a826 	beq	r2,r3,80b8 <___vfiprintf_internal_r+0x334>
    7e18:	d9001a04 	addi	r4,sp,104
    7e1c:	d94019c4 	addi	r5,sp,103
    7e20:	04800074 	movhi	r18,1
    7e24:	2145c83a 	sub	r2,r4,r5
    7e28:	94807c04 	addi	r18,r18,496
    7e2c:	d9001e15 	stw	r4,120(sp)
    7e30:	d9401f15 	stw	r5,124(sp)
    7e34:	dec01a15 	stw	sp,104(sp)
    7e38:	d8001c15 	stw	zero,112(sp)
    7e3c:	d8001b15 	stw	zero,108(sp)
    7e40:	d811883a 	mov	r8,sp
    7e44:	d8002615 	stw	zero,152(sp)
    7e48:	d8002415 	stw	zero,144(sp)
    7e4c:	d8802815 	stw	r2,160(sp)
    7e50:	a82d883a 	mov	r22,r21
    7e54:	b0800007 	ldb	r2,0(r22)
    7e58:	10040d26 	beq	r2,zero,8e90 <___vfiprintf_internal_r+0x110c>
    7e5c:	00c00944 	movi	r3,37
    7e60:	b029883a 	mov	r20,r22
    7e64:	10c0021e 	bne	r2,r3,7e70 <___vfiprintf_internal_r+0xec>
    7e68:	00001606 	br	7ec4 <___vfiprintf_internal_r+0x140>
    7e6c:	10c00326 	beq	r2,r3,7e7c <___vfiprintf_internal_r+0xf8>
    7e70:	a5000044 	addi	r20,r20,1
    7e74:	a0800007 	ldb	r2,0(r20)
    7e78:	103ffc1e 	bne	r2,zero,7e6c <___vfiprintf_internal_r+0xe8>
    7e7c:	a5a1c83a 	sub	r16,r20,r22
    7e80:	80001026 	beq	r16,zero,7ec4 <___vfiprintf_internal_r+0x140>
    7e84:	d8c01c17 	ldw	r3,112(sp)
    7e88:	d8801b17 	ldw	r2,108(sp)
    7e8c:	45800015 	stw	r22,0(r8)
    7e90:	80c7883a 	add	r3,r16,r3
    7e94:	10800044 	addi	r2,r2,1
    7e98:	44000115 	stw	r16,4(r8)
    7e9c:	d8c01c15 	stw	r3,112(sp)
    7ea0:	d8801b15 	stw	r2,108(sp)
    7ea4:	010001c4 	movi	r4,7
    7ea8:	2080750e 	bge	r4,r2,8080 <___vfiprintf_internal_r+0x2fc>
    7eac:	1803951e 	bne	r3,zero,8d04 <___vfiprintf_internal_r+0xf80>
    7eb0:	d8c02417 	ldw	r3,144(sp)
    7eb4:	d8001b15 	stw	zero,108(sp)
    7eb8:	d811883a 	mov	r8,sp
    7ebc:	1c07883a 	add	r3,r3,r16
    7ec0:	d8c02415 	stw	r3,144(sp)
    7ec4:	a0800007 	ldb	r2,0(r20)
    7ec8:	1002e026 	beq	r2,zero,8a4c <___vfiprintf_internal_r+0xcc8>
    7ecc:	a5800044 	addi	r22,r20,1
    7ed0:	a0c00047 	ldb	r3,1(r20)
    7ed4:	d8001d85 	stb	zero,118(sp)
    7ed8:	0027883a 	mov	r19,zero
    7edc:	d8002305 	stb	zero,140(sp)
    7ee0:	043fffc4 	movi	r16,-1
    7ee4:	d8002515 	stw	zero,148(sp)
    7ee8:	0023883a 	mov	r17,zero
    7eec:	05001604 	movi	r20,88
    7ef0:	05400244 	movi	r21,9
    7ef4:	402f883a 	mov	r23,r8
    7ef8:	b5800044 	addi	r22,r22,1
    7efc:	18bff804 	addi	r2,r3,-32
    7f00:	a0827736 	bltu	r20,r2,88e0 <___vfiprintf_internal_r+0xb5c>
    7f04:	100490ba 	slli	r2,r2,2
    7f08:	01000034 	movhi	r4,0
    7f0c:	211fc704 	addi	r4,r4,32540
    7f10:	1105883a 	add	r2,r2,r4
    7f14:	10800017 	ldw	r2,0(r2)
    7f18:	1000683a 	jmp	r2
    7f1c:	000085e0 	cmpeqi	zero,zero,535
    7f20:	000088e0 	cmpeqi	zero,zero,547
    7f24:	000088e0 	cmpeqi	zero,zero,547
    7f28:	000085fc 	xorhi	zero,zero,535
    7f2c:	000088e0 	cmpeqi	zero,zero,547
    7f30:	000088e0 	cmpeqi	zero,zero,547
    7f34:	000088e0 	cmpeqi	zero,zero,547
    7f38:	000088e0 	cmpeqi	zero,zero,547
    7f3c:	000088e0 	cmpeqi	zero,zero,547
    7f40:	000088e0 	cmpeqi	zero,zero,547
    7f44:	00008804 	movi	zero,544
    7f48:	00008828 	cmpgeui	zero,zero,544
    7f4c:	000088e0 	cmpeqi	zero,zero,547
    7f50:	00008120 	cmpeqi	zero,zero,516
    7f54:	0000883c 	xorhi	zero,zero,544
    7f58:	000088e0 	cmpeqi	zero,zero,547
    7f5c:	00008608 	cmpgei	zero,zero,536
    7f60:	00008614 	movui	zero,536
    7f64:	00008614 	movui	zero,536
    7f68:	00008614 	movui	zero,536
    7f6c:	00008614 	movui	zero,536
    7f70:	00008614 	movui	zero,536
    7f74:	00008614 	movui	zero,536
    7f78:	00008614 	movui	zero,536
    7f7c:	00008614 	movui	zero,536
    7f80:	00008614 	movui	zero,536
    7f84:	000088e0 	cmpeqi	zero,zero,547
    7f88:	000088e0 	cmpeqi	zero,zero,547
    7f8c:	000088e0 	cmpeqi	zero,zero,547
    7f90:	000088e0 	cmpeqi	zero,zero,547
    7f94:	000088e0 	cmpeqi	zero,zero,547
    7f98:	000088e0 	cmpeqi	zero,zero,547
    7f9c:	000088e0 	cmpeqi	zero,zero,547
    7fa0:	000088e0 	cmpeqi	zero,zero,547
    7fa4:	000088e0 	cmpeqi	zero,zero,547
    7fa8:	000088e0 	cmpeqi	zero,zero,547
    7fac:	00008654 	movui	zero,537
    7fb0:	000088e0 	cmpeqi	zero,zero,547
    7fb4:	000088e0 	cmpeqi	zero,zero,547
    7fb8:	000088e0 	cmpeqi	zero,zero,547
    7fbc:	000088e0 	cmpeqi	zero,zero,547
    7fc0:	000088e0 	cmpeqi	zero,zero,547
    7fc4:	000088e0 	cmpeqi	zero,zero,547
    7fc8:	000088e0 	cmpeqi	zero,zero,547
    7fcc:	000088e0 	cmpeqi	zero,zero,547
    7fd0:	000088e0 	cmpeqi	zero,zero,547
    7fd4:	000088e0 	cmpeqi	zero,zero,547
    7fd8:	00008690 	cmplti	zero,zero,538
    7fdc:	000088e0 	cmpeqi	zero,zero,547
    7fe0:	000088e0 	cmpeqi	zero,zero,547
    7fe4:	000088e0 	cmpeqi	zero,zero,547
    7fe8:	000088e0 	cmpeqi	zero,zero,547
    7fec:	000088e0 	cmpeqi	zero,zero,547
    7ff0:	000086ec 	andhi	zero,zero,539
    7ff4:	000088e0 	cmpeqi	zero,zero,547
    7ff8:	000088e0 	cmpeqi	zero,zero,547
    7ffc:	00008760 	cmpeqi	zero,zero,541
    8000:	000088e0 	cmpeqi	zero,zero,547
    8004:	000088e0 	cmpeqi	zero,zero,547
    8008:	000088e0 	cmpeqi	zero,zero,547
    800c:	000088e0 	cmpeqi	zero,zero,547
    8010:	000088e0 	cmpeqi	zero,zero,547
    8014:	000088e0 	cmpeqi	zero,zero,547
    8018:	000088e0 	cmpeqi	zero,zero,547
    801c:	000088e0 	cmpeqi	zero,zero,547
    8020:	000088e0 	cmpeqi	zero,zero,547
    8024:	000088e0 	cmpeqi	zero,zero,547
    8028:	00008508 	cmpgei	zero,zero,532
    802c:	00008538 	rdprs	zero,zero,532
    8030:	000088e0 	cmpeqi	zero,zero,547
    8034:	000088e0 	cmpeqi	zero,zero,547
    8038:	000088e0 	cmpeqi	zero,zero,547
    803c:	00008888 	cmpgei	zero,zero,546
    8040:	00008538 	rdprs	zero,zero,532
    8044:	000088e0 	cmpeqi	zero,zero,547
    8048:	000088e0 	cmpeqi	zero,zero,547
    804c:	000083e0 	cmpeqi	zero,zero,527
    8050:	000088e0 	cmpeqi	zero,zero,547
    8054:	000083f4 	movhi	zero,527
    8058:	0000842c 	andhi	zero,zero,528
    805c:	0000812c 	andhi	zero,zero,516
    8060:	000083d4 	movui	zero,527
    8064:	000088e0 	cmpeqi	zero,zero,547
    8068:	000087a0 	cmpeqi	zero,zero,542
    806c:	000088e0 	cmpeqi	zero,zero,547
    8070:	000087ec 	andhi	zero,zero,543
    8074:	000088e0 	cmpeqi	zero,zero,547
    8078:	000088e0 	cmpeqi	zero,zero,547
    807c:	000084b0 	cmpltui	zero,zero,530
    8080:	42000204 	addi	r8,r8,8
    8084:	d8c02417 	ldw	r3,144(sp)
    8088:	1c07883a 	add	r3,r3,r16
    808c:	d8c02415 	stw	r3,144(sp)
    8090:	003f8c06 	br	7ec4 <___vfiprintf_internal_r+0x140>
    8094:	d9402017 	ldw	r5,128(sp)
    8098:	d9002117 	ldw	r4,132(sp)
    809c:	00029400 	call	2940 <__swsetup_r>
    80a0:	1003c11e 	bne	r2,zero,8fa8 <___vfiprintf_internal_r+0x1224>
    80a4:	d9402017 	ldw	r5,128(sp)
    80a8:	00c00284 	movi	r3,10
    80ac:	2880030b 	ldhu	r2,12(r5)
    80b0:	1080068c 	andi	r2,r2,26
    80b4:	10ff581e 	bne	r2,r3,7e18 <___vfiprintf_internal_r+0x94>
    80b8:	d8c02017 	ldw	r3,128(sp)
    80bc:	1880038f 	ldh	r2,14(r3)
    80c0:	103f5516 	blt	r2,zero,7e18 <___vfiprintf_internal_r+0x94>
    80c4:	d9c02217 	ldw	r7,136(sp)
    80c8:	d9002117 	ldw	r4,132(sp)
    80cc:	a80d883a 	mov	r6,r21
    80d0:	180b883a 	mov	r5,r3
    80d4:	00092ac0 	call	92ac <__sbprintf>
    80d8:	dfc03517 	ldw	ra,212(sp)
    80dc:	df003417 	ldw	fp,208(sp)
    80e0:	ddc03317 	ldw	r23,204(sp)
    80e4:	dd803217 	ldw	r22,200(sp)
    80e8:	dd403117 	ldw	r21,196(sp)
    80ec:	dd003017 	ldw	r20,192(sp)
    80f0:	dcc02f17 	ldw	r19,188(sp)
    80f4:	dc802e17 	ldw	r18,184(sp)
    80f8:	dc402d17 	ldw	r17,180(sp)
    80fc:	dc002c17 	ldw	r16,176(sp)
    8100:	dec03604 	addi	sp,sp,216
    8104:	f800283a 	ret
    8108:	000494c0 	call	494c <__sinit>
    810c:	003f2f06 	br	7dcc <___vfiprintf_internal_r+0x48>
    8110:	d8c02517 	ldw	r3,148(sp)
    8114:	d8802215 	stw	r2,136(sp)
    8118:	00c7c83a 	sub	r3,zero,r3
    811c:	d8c02515 	stw	r3,148(sp)
    8120:	8c400114 	ori	r17,r17,4
    8124:	b0c00007 	ldb	r3,0(r22)
    8128:	003f7306 	br	7ef8 <___vfiprintf_internal_r+0x174>
    812c:	00800c04 	movi	r2,48
    8130:	d9402217 	ldw	r5,136(sp)
    8134:	d8801d05 	stb	r2,116(sp)
    8138:	00801e04 	movi	r2,120
    813c:	d8801d45 	stb	r2,117(sp)
    8140:	d8001d85 	stb	zero,118(sp)
    8144:	b811883a 	mov	r8,r23
    8148:	28c00104 	addi	r3,r5,4
    814c:	2cc00017 	ldw	r19,0(r5)
    8150:	0029883a 	mov	r20,zero
    8154:	88800094 	ori	r2,r17,2
    8158:	80032516 	blt	r16,zero,8df0 <___vfiprintf_internal_r+0x106c>
    815c:	00bfdfc4 	movi	r2,-129
    8160:	88a2703a 	and	r17,r17,r2
    8164:	d8c02215 	stw	r3,136(sp)
    8168:	8c400094 	ori	r17,r17,2
    816c:	98032a1e 	bne	r19,zero,8e18 <___vfiprintf_internal_r+0x1094>
    8170:	00800074 	movhi	r2,1
    8174:	10801b04 	addi	r2,r2,108
    8178:	d8802615 	stw	r2,152(sp)
    817c:	002b883a 	mov	r21,zero
    8180:	8001741e 	bne	r16,zero,8754 <___vfiprintf_internal_r+0x9d0>
    8184:	0021883a 	mov	r16,zero
    8188:	0029883a 	mov	r20,zero
    818c:	ddc01a04 	addi	r23,sp,104
    8190:	8027883a 	mov	r19,r16
    8194:	8500010e 	bge	r16,r20,819c <___vfiprintf_internal_r+0x418>
    8198:	a027883a 	mov	r19,r20
    819c:	ad403fcc 	andi	r21,r21,255
    81a0:	ad40201c 	xori	r21,r21,128
    81a4:	ad7fe004 	addi	r21,r21,-128
    81a8:	a8000126 	beq	r21,zero,81b0 <___vfiprintf_internal_r+0x42c>
    81ac:	9cc00044 	addi	r19,r19,1
    81b0:	89c0008c 	andi	r7,r17,2
    81b4:	38000126 	beq	r7,zero,81bc <___vfiprintf_internal_r+0x438>
    81b8:	9cc00084 	addi	r19,r19,2
    81bc:	88c0210c 	andi	r3,r17,132
    81c0:	1801dd1e 	bne	r3,zero,8938 <___vfiprintf_internal_r+0xbb4>
    81c4:	d9402517 	ldw	r5,148(sp)
    81c8:	2cebc83a 	sub	r21,r5,r19
    81cc:	0541da0e 	bge	zero,r21,8938 <___vfiprintf_internal_r+0xbb4>
    81d0:	07000404 	movi	fp,16
    81d4:	d8801c17 	ldw	r2,112(sp)
    81d8:	e543be0e 	bge	fp,r21,90d4 <___vfiprintf_internal_r+0x1350>
    81dc:	01400074 	movhi	r5,1
    81e0:	29408004 	addi	r5,r5,512
    81e4:	dc002715 	stw	r16,156(sp)
    81e8:	d9801b17 	ldw	r6,108(sp)
    81ec:	a821883a 	mov	r16,r21
    81f0:	d9402315 	stw	r5,140(sp)
    81f4:	028001c4 	movi	r10,7
    81f8:	d9c02915 	stw	r7,164(sp)
    81fc:	182b883a 	mov	r21,r3
    8200:	00000506 	br	8218 <___vfiprintf_internal_r+0x494>
    8204:	31000084 	addi	r4,r6,2
    8208:	42000204 	addi	r8,r8,8
    820c:	180d883a 	mov	r6,r3
    8210:	843ffc04 	addi	r16,r16,-16
    8214:	e4000f0e 	bge	fp,r16,8254 <___vfiprintf_internal_r+0x4d0>
    8218:	01000074 	movhi	r4,1
    821c:	10800404 	addi	r2,r2,16
    8220:	30c00044 	addi	r3,r6,1
    8224:	21008004 	addi	r4,r4,512
    8228:	41000015 	stw	r4,0(r8)
    822c:	47000115 	stw	fp,4(r8)
    8230:	d8801c15 	stw	r2,112(sp)
    8234:	d8c01b15 	stw	r3,108(sp)
    8238:	50fff20e 	bge	r10,r3,8204 <___vfiprintf_internal_r+0x480>
    823c:	1001b21e 	bne	r2,zero,8908 <___vfiprintf_internal_r+0xb84>
    8240:	843ffc04 	addi	r16,r16,-16
    8244:	000d883a 	mov	r6,zero
    8248:	01000044 	movi	r4,1
    824c:	d811883a 	mov	r8,sp
    8250:	e43ff116 	blt	fp,r16,8218 <___vfiprintf_internal_r+0x494>
    8254:	a807883a 	mov	r3,r21
    8258:	d9c02917 	ldw	r7,164(sp)
    825c:	802b883a 	mov	r21,r16
    8260:	dc002717 	ldw	r16,156(sp)
    8264:	d9402317 	ldw	r5,140(sp)
    8268:	a885883a 	add	r2,r21,r2
    826c:	45400115 	stw	r21,4(r8)
    8270:	41400015 	stw	r5,0(r8)
    8274:	d8801c15 	stw	r2,112(sp)
    8278:	d9001b15 	stw	r4,108(sp)
    827c:	014001c4 	movi	r5,7
    8280:	29026216 	blt	r5,r4,8c0c <___vfiprintf_internal_r+0xe88>
    8284:	d9801d87 	ldb	r6,118(sp)
    8288:	42000204 	addi	r8,r8,8
    828c:	21400044 	addi	r5,r4,1
    8290:	3001ae1e 	bne	r6,zero,894c <___vfiprintf_internal_r+0xbc8>
    8294:	3801bb26 	beq	r7,zero,8984 <___vfiprintf_internal_r+0xc00>
    8298:	d9001d04 	addi	r4,sp,116
    829c:	10800084 	addi	r2,r2,2
    82a0:	41000015 	stw	r4,0(r8)
    82a4:	01000084 	movi	r4,2
    82a8:	41000115 	stw	r4,4(r8)
    82ac:	d8801c15 	stw	r2,112(sp)
    82b0:	d9401b15 	stw	r5,108(sp)
    82b4:	010001c4 	movi	r4,7
    82b8:	2142680e 	bge	r4,r5,8c5c <___vfiprintf_internal_r+0xed8>
    82bc:	1002b11e 	bne	r2,zero,8d84 <___vfiprintf_internal_r+0x1000>
    82c0:	01802004 	movi	r6,128
    82c4:	01400044 	movi	r5,1
    82c8:	0009883a 	mov	r4,zero
    82cc:	d811883a 	mov	r8,sp
    82d0:	1981ae1e 	bne	r3,r6,898c <___vfiprintf_internal_r+0xc08>
    82d4:	d8c02517 	ldw	r3,148(sp)
    82d8:	1cf9c83a 	sub	fp,r3,r19
    82dc:	0701ab0e 	bge	zero,fp,898c <___vfiprintf_internal_r+0xc08>
    82e0:	05400404 	movi	r21,16
    82e4:	af03a90e 	bge	r21,fp,918c <___vfiprintf_internal_r+0x1408>
    82e8:	01400074 	movhi	r5,1
    82ec:	29407c04 	addi	r5,r5,496
    82f0:	d9402315 	stw	r5,140(sp)
    82f4:	01c001c4 	movi	r7,7
    82f8:	00000506 	br	8310 <___vfiprintf_internal_r+0x58c>
    82fc:	21800084 	addi	r6,r4,2
    8300:	42000204 	addi	r8,r8,8
    8304:	1809883a 	mov	r4,r3
    8308:	e73ffc04 	addi	fp,fp,-16
    830c:	af000d0e 	bge	r21,fp,8344 <___vfiprintf_internal_r+0x5c0>
    8310:	10800404 	addi	r2,r2,16
    8314:	20c00044 	addi	r3,r4,1
    8318:	44800015 	stw	r18,0(r8)
    831c:	45400115 	stw	r21,4(r8)
    8320:	d8801c15 	stw	r2,112(sp)
    8324:	d8c01b15 	stw	r3,108(sp)
    8328:	38fff40e 	bge	r7,r3,82fc <___vfiprintf_internal_r+0x578>
    832c:	10022b1e 	bne	r2,zero,8bdc <___vfiprintf_internal_r+0xe58>
    8330:	e73ffc04 	addi	fp,fp,-16
    8334:	01800044 	movi	r6,1
    8338:	0009883a 	mov	r4,zero
    833c:	d811883a 	mov	r8,sp
    8340:	af3ff316 	blt	r21,fp,8310 <___vfiprintf_internal_r+0x58c>
    8344:	d8c02317 	ldw	r3,140(sp)
    8348:	1705883a 	add	r2,r2,fp
    834c:	47000115 	stw	fp,4(r8)
    8350:	40c00015 	stw	r3,0(r8)
    8354:	d8801c15 	stw	r2,112(sp)
    8358:	d9801b15 	stw	r6,108(sp)
    835c:	00c001c4 	movi	r3,7
    8360:	19829416 	blt	r3,r6,8db4 <___vfiprintf_internal_r+0x1030>
    8364:	8521c83a 	sub	r16,r16,r20
    8368:	42000204 	addi	r8,r8,8
    836c:	31400044 	addi	r5,r6,1
    8370:	3009883a 	mov	r4,r6
    8374:	04018716 	blt	zero,r16,8994 <___vfiprintf_internal_r+0xc10>
    8378:	a085883a 	add	r2,r20,r2
    837c:	45c00015 	stw	r23,0(r8)
    8380:	45000115 	stw	r20,4(r8)
    8384:	d8801c15 	stw	r2,112(sp)
    8388:	d9401b15 	stw	r5,108(sp)
    838c:	00c001c4 	movi	r3,7
    8390:	1941c20e 	bge	r3,r5,8a9c <___vfiprintf_internal_r+0xd18>
    8394:	1002531e 	bne	r2,zero,8ce4 <___vfiprintf_internal_r+0xf60>
    8398:	d8001b15 	stw	zero,108(sp)
    839c:	8c40010c 	andi	r17,r17,4
    83a0:	88023226 	beq	r17,zero,8c6c <___vfiprintf_internal_r+0xee8>
    83a4:	d9002517 	ldw	r4,148(sp)
    83a8:	24e3c83a 	sub	r17,r4,r19
    83ac:	04432916 	blt	zero,r17,9054 <___vfiprintf_internal_r+0x12d0>
    83b0:	d8802517 	ldw	r2,148(sp)
    83b4:	14c0010e 	bge	r2,r19,83bc <___vfiprintf_internal_r+0x638>
    83b8:	9805883a 	mov	r2,r19
    83bc:	d8c02417 	ldw	r3,144(sp)
    83c0:	1887883a 	add	r3,r3,r2
    83c4:	d8c02415 	stw	r3,144(sp)
    83c8:	d8001b15 	stw	zero,108(sp)
    83cc:	d811883a 	mov	r8,sp
    83d0:	003ea006 	br	7e54 <___vfiprintf_internal_r+0xd0>
    83d4:	8c400814 	ori	r17,r17,32
    83d8:	b0c00007 	ldb	r3,0(r22)
    83dc:	003ec606 	br	7ef8 <___vfiprintf_internal_r+0x174>
    83e0:	b0c00007 	ldb	r3,0(r22)
    83e4:	00801b04 	movi	r2,108
    83e8:	18832026 	beq	r3,r2,906c <___vfiprintf_internal_r+0x12e8>
    83ec:	8c400414 	ori	r17,r17,16
    83f0:	003ec106 	br	7ef8 <___vfiprintf_internal_r+0x174>
    83f4:	9cc03fcc 	andi	r19,r19,255
    83f8:	b811883a 	mov	r8,r23
    83fc:	9803981e 	bne	r19,zero,9260 <___vfiprintf_internal_r+0x14dc>
    8400:	8880080c 	andi	r2,r17,32
    8404:	1002be26 	beq	r2,zero,8f00 <___vfiprintf_internal_r+0x117c>
    8408:	d9002217 	ldw	r4,136(sp)
    840c:	d9402417 	ldw	r5,144(sp)
    8410:	20800017 	ldw	r2,0(r4)
    8414:	2807d7fa 	srai	r3,r5,31
    8418:	21000104 	addi	r4,r4,4
    841c:	d9002215 	stw	r4,136(sp)
    8420:	11400015 	stw	r5,0(r2)
    8424:	10c00115 	stw	r3,4(r2)
    8428:	003e8a06 	br	7e54 <___vfiprintf_internal_r+0xd0>
    842c:	9cc03fcc 	andi	r19,r19,255
    8430:	b811883a 	mov	r8,r23
    8434:	9803871e 	bne	r19,zero,9254 <___vfiprintf_internal_r+0x14d0>
    8438:	8880080c 	andi	r2,r17,32
    843c:	10009a26 	beq	r2,zero,86a8 <___vfiprintf_internal_r+0x924>
    8440:	d9002217 	ldw	r4,136(sp)
    8444:	d8001d85 	stb	zero,118(sp)
    8448:	20800204 	addi	r2,r4,8
    844c:	24c00017 	ldw	r19,0(r4)
    8450:	25000117 	ldw	r20,4(r4)
    8454:	8002a416 	blt	r16,zero,8ee8 <___vfiprintf_internal_r+0x1164>
    8458:	013fdfc4 	movi	r4,-129
    845c:	9d06b03a 	or	r3,r19,r20
    8460:	d8802215 	stw	r2,136(sp)
    8464:	8922703a 	and	r17,r17,r4
    8468:	18009b26 	beq	r3,zero,86d8 <___vfiprintf_internal_r+0x954>
    846c:	002b883a 	mov	r21,zero
    8470:	ddc01a04 	addi	r23,sp,104
    8474:	9806d0fa 	srli	r3,r19,3
    8478:	a008977a 	slli	r4,r20,29
    847c:	a028d0fa 	srli	r20,r20,3
    8480:	9cc001cc 	andi	r19,r19,7
    8484:	98800c04 	addi	r2,r19,48
    8488:	bdffffc4 	addi	r23,r23,-1
    848c:	20e6b03a 	or	r19,r4,r3
    8490:	b8800005 	stb	r2,0(r23)
    8494:	9d06b03a 	or	r3,r19,r20
    8498:	183ff61e 	bne	r3,zero,8474 <___vfiprintf_internal_r+0x6f0>
    849c:	88c0004c 	andi	r3,r17,1
    84a0:	18021f1e 	bne	r3,zero,8d20 <___vfiprintf_internal_r+0xf9c>
    84a4:	d9401e17 	ldw	r5,120(sp)
    84a8:	2de9c83a 	sub	r20,r5,r23
    84ac:	003f3806 	br	8190 <___vfiprintf_internal_r+0x40c>
    84b0:	9cc03fcc 	andi	r19,r19,255
    84b4:	b811883a 	mov	r8,r23
    84b8:	98034f1e 	bne	r19,zero,91f8 <___vfiprintf_internal_r+0x1474>
    84bc:	00800074 	movhi	r2,1
    84c0:	10801b04 	addi	r2,r2,108
    84c4:	d8802615 	stw	r2,152(sp)
    84c8:	8880080c 	andi	r2,r17,32
    84cc:	1000ac26 	beq	r2,zero,8780 <___vfiprintf_internal_r+0x9fc>
    84d0:	d9002217 	ldw	r4,136(sp)
    84d4:	24c00017 	ldw	r19,0(r4)
    84d8:	25000117 	ldw	r20,4(r4)
    84dc:	21000204 	addi	r4,r4,8
    84e0:	d9002215 	stw	r4,136(sp)
    84e4:	8880004c 	andi	r2,r17,1
    84e8:	1001e726 	beq	r2,zero,8c88 <___vfiprintf_internal_r+0xf04>
    84ec:	9d04b03a 	or	r2,r19,r20
    84f0:	10025c1e 	bne	r2,zero,8e64 <___vfiprintf_internal_r+0x10e0>
    84f4:	d8001d85 	stb	zero,118(sp)
    84f8:	80024416 	blt	r16,zero,8e0c <___vfiprintf_internal_r+0x1088>
    84fc:	00bfdfc4 	movi	r2,-129
    8500:	88a2703a 	and	r17,r17,r2
    8504:	003f1d06 	br	817c <___vfiprintf_internal_r+0x3f8>
    8508:	d8c02217 	ldw	r3,136(sp)
    850c:	04c00044 	movi	r19,1
    8510:	b811883a 	mov	r8,r23
    8514:	18800017 	ldw	r2,0(r3)
    8518:	18c00104 	addi	r3,r3,4
    851c:	d8001d85 	stb	zero,118(sp)
    8520:	d8801005 	stb	r2,64(sp)
    8524:	d8c02215 	stw	r3,136(sp)
    8528:	9829883a 	mov	r20,r19
    852c:	ddc01004 	addi	r23,sp,64
    8530:	0021883a 	mov	r16,zero
    8534:	003f1e06 	br	81b0 <___vfiprintf_internal_r+0x42c>
    8538:	9cc03fcc 	andi	r19,r19,255
    853c:	b811883a 	mov	r8,r23
    8540:	9803331e 	bne	r19,zero,9210 <___vfiprintf_internal_r+0x148c>
    8544:	8880080c 	andi	r2,r17,32
    8548:	10004826 	beq	r2,zero,866c <___vfiprintf_internal_r+0x8e8>
    854c:	d9002217 	ldw	r4,136(sp)
    8550:	20800117 	ldw	r2,4(r4)
    8554:	24c00017 	ldw	r19,0(r4)
    8558:	21000204 	addi	r4,r4,8
    855c:	d9002215 	stw	r4,136(sp)
    8560:	1029883a 	mov	r20,r2
    8564:	10024c16 	blt	r2,zero,8e98 <___vfiprintf_internal_r+0x1114>
    8568:	dd401d83 	ldbu	r21,118(sp)
    856c:	80007116 	blt	r16,zero,8734 <___vfiprintf_internal_r+0x9b0>
    8570:	00ffdfc4 	movi	r3,-129
    8574:	9d04b03a 	or	r2,r19,r20
    8578:	88e2703a 	and	r17,r17,r3
    857c:	1000d126 	beq	r2,zero,88c4 <___vfiprintf_internal_r+0xb40>
    8580:	a0023526 	beq	r20,zero,8e58 <___vfiprintf_internal_r+0x10d4>
    8584:	ddc01a04 	addi	r23,sp,104
    8588:	4039883a 	mov	fp,r8
    858c:	9809883a 	mov	r4,r19
    8590:	a00b883a 	mov	r5,r20
    8594:	01800284 	movi	r6,10
    8598:	000f883a 	mov	r7,zero
    859c:	000a2b00 	call	a2b0 <__umoddi3>
    85a0:	10800c04 	addi	r2,r2,48
    85a4:	bdffffc4 	addi	r23,r23,-1
    85a8:	9809883a 	mov	r4,r19
    85ac:	a00b883a 	mov	r5,r20
    85b0:	b8800005 	stb	r2,0(r23)
    85b4:	01800284 	movi	r6,10
    85b8:	000f883a 	mov	r7,zero
    85bc:	0009cb40 	call	9cb4 <__udivdi3>
    85c0:	1027883a 	mov	r19,r2
    85c4:	10c4b03a 	or	r2,r2,r3
    85c8:	1829883a 	mov	r20,r3
    85cc:	103fef1e 	bne	r2,zero,858c <___vfiprintf_internal_r+0x808>
    85d0:	d9001e17 	ldw	r4,120(sp)
    85d4:	e011883a 	mov	r8,fp
    85d8:	25e9c83a 	sub	r20,r4,r23
    85dc:	003eec06 	br	8190 <___vfiprintf_internal_r+0x40c>
    85e0:	d8802307 	ldb	r2,140(sp)
    85e4:	1002361e 	bne	r2,zero,8ec0 <___vfiprintf_internal_r+0x113c>
    85e8:	00c00804 	movi	r3,32
    85ec:	d8c02305 	stb	r3,140(sp)
    85f0:	04c00044 	movi	r19,1
    85f4:	b0c00007 	ldb	r3,0(r22)
    85f8:	003e3f06 	br	7ef8 <___vfiprintf_internal_r+0x174>
    85fc:	8c400054 	ori	r17,r17,1
    8600:	b0c00007 	ldb	r3,0(r22)
    8604:	003e3c06 	br	7ef8 <___vfiprintf_internal_r+0x174>
    8608:	8c402014 	ori	r17,r17,128
    860c:	b0c00007 	ldb	r3,0(r22)
    8610:	003e3906 	br	7ef8 <___vfiprintf_internal_r+0x174>
    8614:	dc002715 	stw	r16,156(sp)
    8618:	d8002515 	stw	zero,148(sp)
    861c:	1f3ff404 	addi	fp,r3,-48
    8620:	0009883a 	mov	r4,zero
    8624:	b021883a 	mov	r16,r22
    8628:	01400284 	movi	r5,10
    862c:	000aa280 	call	aa28 <__mulsi3>
    8630:	80c00007 	ldb	r3,0(r16)
    8634:	e089883a 	add	r4,fp,r2
    8638:	b5800044 	addi	r22,r22,1
    863c:	1f3ff404 	addi	fp,r3,-48
    8640:	b021883a 	mov	r16,r22
    8644:	af3ff82e 	bgeu	r21,fp,8628 <___vfiprintf_internal_r+0x8a4>
    8648:	d9002515 	stw	r4,148(sp)
    864c:	dc002717 	ldw	r16,156(sp)
    8650:	003e2a06 	br	7efc <___vfiprintf_internal_r+0x178>
    8654:	9cc03fcc 	andi	r19,r19,255
    8658:	b811883a 	mov	r8,r23
    865c:	9802e91e 	bne	r19,zero,9204 <___vfiprintf_internal_r+0x1480>
    8660:	8c400414 	ori	r17,r17,16
    8664:	8880080c 	andi	r2,r17,32
    8668:	103fb81e 	bne	r2,zero,854c <___vfiprintf_internal_r+0x7c8>
    866c:	8880040c 	andi	r2,r17,16
    8670:	10022e26 	beq	r2,zero,8f2c <___vfiprintf_internal_r+0x11a8>
    8674:	d9402217 	ldw	r5,136(sp)
    8678:	2cc00017 	ldw	r19,0(r5)
    867c:	29400104 	addi	r5,r5,4
    8680:	d9402215 	stw	r5,136(sp)
    8684:	9829d7fa 	srai	r20,r19,31
    8688:	a005883a 	mov	r2,r20
    868c:	003fb506 	br	8564 <___vfiprintf_internal_r+0x7e0>
    8690:	9cc03fcc 	andi	r19,r19,255
    8694:	b811883a 	mov	r8,r23
    8698:	9802fa1e 	bne	r19,zero,9284 <___vfiprintf_internal_r+0x1500>
    869c:	8c400414 	ori	r17,r17,16
    86a0:	8880080c 	andi	r2,r17,32
    86a4:	103f661e 	bne	r2,zero,8440 <___vfiprintf_internal_r+0x6bc>
    86a8:	8880040c 	andi	r2,r17,16
    86ac:	10020626 	beq	r2,zero,8ec8 <___vfiprintf_internal_r+0x1144>
    86b0:	d9402217 	ldw	r5,136(sp)
    86b4:	d8001d85 	stb	zero,118(sp)
    86b8:	0029883a 	mov	r20,zero
    86bc:	28800104 	addi	r2,r5,4
    86c0:	2cc00017 	ldw	r19,0(r5)
    86c4:	80020816 	blt	r16,zero,8ee8 <___vfiprintf_internal_r+0x1164>
    86c8:	00ffdfc4 	movi	r3,-129
    86cc:	d8802215 	stw	r2,136(sp)
    86d0:	88e2703a 	and	r17,r17,r3
    86d4:	983f651e 	bne	r19,zero,846c <___vfiprintf_internal_r+0x6e8>
    86d8:	002b883a 	mov	r21,zero
    86dc:	8002cf26 	beq	r16,zero,921c <___vfiprintf_internal_r+0x1498>
    86e0:	0027883a 	mov	r19,zero
    86e4:	0029883a 	mov	r20,zero
    86e8:	003f6106 	br	8470 <___vfiprintf_internal_r+0x6ec>
    86ec:	9cc03fcc 	andi	r19,r19,255
    86f0:	b811883a 	mov	r8,r23
    86f4:	9802e01e 	bne	r19,zero,9278 <___vfiprintf_internal_r+0x14f4>
    86f8:	8c400414 	ori	r17,r17,16
    86fc:	8880080c 	andi	r2,r17,32
    8700:	1000641e 	bne	r2,zero,8894 <___vfiprintf_internal_r+0xb10>
    8704:	8880040c 	andi	r2,r17,16
    8708:	1001c81e 	bne	r2,zero,8e2c <___vfiprintf_internal_r+0x10a8>
    870c:	8880100c 	andi	r2,r17,64
    8710:	d8001d85 	stb	zero,118(sp)
    8714:	1002281e 	bne	r2,zero,8fb8 <___vfiprintf_internal_r+0x1234>
    8718:	d9002217 	ldw	r4,136(sp)
    871c:	0029883a 	mov	r20,zero
    8720:	20800104 	addi	r2,r4,4
    8724:	24c00017 	ldw	r19,0(r4)
    8728:	8001c60e 	bge	r16,zero,8e44 <___vfiprintf_internal_r+0x10c0>
    872c:	d8802215 	stw	r2,136(sp)
    8730:	002b883a 	mov	r21,zero
    8734:	9d04b03a 	or	r2,r19,r20
    8738:	103f911e 	bne	r2,zero,8580 <___vfiprintf_internal_r+0x7fc>
    873c:	00800044 	movi	r2,1
    8740:	10803fcc 	andi	r2,r2,255
    8744:	00c00044 	movi	r3,1
    8748:	10c05f26 	beq	r2,r3,88c8 <___vfiprintf_internal_r+0xb44>
    874c:	00c00084 	movi	r3,2
    8750:	10ffe31e 	bne	r2,r3,86e0 <___vfiprintf_internal_r+0x95c>
    8754:	0027883a 	mov	r19,zero
    8758:	0029883a 	mov	r20,zero
    875c:	00015106 	br	8ca4 <___vfiprintf_internal_r+0xf20>
    8760:	9cc03fcc 	andi	r19,r19,255
    8764:	b811883a 	mov	r8,r23
    8768:	9802c01e 	bne	r19,zero,926c <___vfiprintf_internal_r+0x14e8>
    876c:	01400074 	movhi	r5,1
    8770:	29401604 	addi	r5,r5,88
    8774:	d9402615 	stw	r5,152(sp)
    8778:	8880080c 	andi	r2,r17,32
    877c:	103f541e 	bne	r2,zero,84d0 <___vfiprintf_internal_r+0x74c>
    8780:	8880040c 	andi	r2,r17,16
    8784:	1001f226 	beq	r2,zero,8f50 <___vfiprintf_internal_r+0x11cc>
    8788:	d9402217 	ldw	r5,136(sp)
    878c:	0029883a 	mov	r20,zero
    8790:	2cc00017 	ldw	r19,0(r5)
    8794:	29400104 	addi	r5,r5,4
    8798:	d9402215 	stw	r5,136(sp)
    879c:	003f5106 	br	84e4 <___vfiprintf_internal_r+0x760>
    87a0:	d8c02217 	ldw	r3,136(sp)
    87a4:	b811883a 	mov	r8,r23
    87a8:	d8001d85 	stb	zero,118(sp)
    87ac:	1dc00017 	ldw	r23,0(r3)
    87b0:	1f000104 	addi	fp,r3,4
    87b4:	b8025926 	beq	r23,zero,911c <___vfiprintf_internal_r+0x1398>
    87b8:	80023316 	blt	r16,zero,9088 <___vfiprintf_internal_r+0x1304>
    87bc:	800d883a 	mov	r6,r16
    87c0:	000b883a 	mov	r5,zero
    87c4:	b809883a 	mov	r4,r23
    87c8:	da002a15 	stw	r8,168(sp)
    87cc:	0005ec40 	call	5ec4 <memchr>
    87d0:	da002a17 	ldw	r8,168(sp)
    87d4:	10026826 	beq	r2,zero,9178 <___vfiprintf_internal_r+0x13f4>
    87d8:	15e9c83a 	sub	r20,r2,r23
    87dc:	dd401d83 	ldbu	r21,118(sp)
    87e0:	df002215 	stw	fp,136(sp)
    87e4:	0021883a 	mov	r16,zero
    87e8:	003e6906 	br	8190 <___vfiprintf_internal_r+0x40c>
    87ec:	9cc03fcc 	andi	r19,r19,255
    87f0:	b811883a 	mov	r8,r23
    87f4:	983fc126 	beq	r19,zero,86fc <___vfiprintf_internal_r+0x978>
    87f8:	d8c02303 	ldbu	r3,140(sp)
    87fc:	d8c01d85 	stb	r3,118(sp)
    8800:	003fbe06 	br	86fc <___vfiprintf_internal_r+0x978>
    8804:	d9002217 	ldw	r4,136(sp)
    8808:	d9402217 	ldw	r5,136(sp)
    880c:	21000017 	ldw	r4,0(r4)
    8810:	28800104 	addi	r2,r5,4
    8814:	d9002515 	stw	r4,148(sp)
    8818:	203e3d16 	blt	r4,zero,8110 <___vfiprintf_internal_r+0x38c>
    881c:	d8802215 	stw	r2,136(sp)
    8820:	b0c00007 	ldb	r3,0(r22)
    8824:	003db406 	br	7ef8 <___vfiprintf_internal_r+0x174>
    8828:	00c00ac4 	movi	r3,43
    882c:	d8c02305 	stb	r3,140(sp)
    8830:	04c00044 	movi	r19,1
    8834:	b0c00007 	ldb	r3,0(r22)
    8838:	003daf06 	br	7ef8 <___vfiprintf_internal_r+0x174>
    883c:	b0c00007 	ldb	r3,0(r22)
    8840:	01000a84 	movi	r4,42
    8844:	b4000044 	addi	r16,r22,1
    8848:	19025e26 	beq	r3,r4,91c4 <___vfiprintf_internal_r+0x1440>
    884c:	1f3ff404 	addi	fp,r3,-48
    8850:	0009883a 	mov	r4,zero
    8854:	af025236 	bltu	r21,fp,91a0 <___vfiprintf_internal_r+0x141c>
    8858:	01400284 	movi	r5,10
    885c:	000aa280 	call	aa28 <__mulsi3>
    8860:	80c00007 	ldb	r3,0(r16)
    8864:	1709883a 	add	r4,r2,fp
    8868:	85800044 	addi	r22,r16,1
    886c:	1f3ff404 	addi	fp,r3,-48
    8870:	b021883a 	mov	r16,r22
    8874:	af3ff82e 	bgeu	r21,fp,8858 <___vfiprintf_internal_r+0xad4>
    8878:	2021883a 	mov	r16,r4
    887c:	203d9f0e 	bge	r4,zero,7efc <___vfiprintf_internal_r+0x178>
    8880:	043fffc4 	movi	r16,-1
    8884:	003d9d06 	br	7efc <___vfiprintf_internal_r+0x178>
    8888:	8c401014 	ori	r17,r17,64
    888c:	b0c00007 	ldb	r3,0(r22)
    8890:	003d9906 	br	7ef8 <___vfiprintf_internal_r+0x174>
    8894:	d9002217 	ldw	r4,136(sp)
    8898:	d8001d85 	stb	zero,118(sp)
    889c:	20c00204 	addi	r3,r4,8
    88a0:	24c00017 	ldw	r19,0(r4)
    88a4:	25000117 	ldw	r20,4(r4)
    88a8:	8001e716 	blt	r16,zero,9048 <___vfiprintf_internal_r+0x12c4>
    88ac:	013fdfc4 	movi	r4,-129
    88b0:	9d04b03a 	or	r2,r19,r20
    88b4:	d8c02215 	stw	r3,136(sp)
    88b8:	8922703a 	and	r17,r17,r4
    88bc:	002b883a 	mov	r21,zero
    88c0:	103f2f1e 	bne	r2,zero,8580 <___vfiprintf_internal_r+0x7fc>
    88c4:	803e2f26 	beq	r16,zero,8184 <___vfiprintf_internal_r+0x400>
    88c8:	0027883a 	mov	r19,zero
    88cc:	9cc00c04 	addi	r19,r19,48
    88d0:	dcc019c5 	stb	r19,103(sp)
    88d4:	dd002817 	ldw	r20,160(sp)
    88d8:	ddc019c4 	addi	r23,sp,103
    88dc:	003e2c06 	br	8190 <___vfiprintf_internal_r+0x40c>
    88e0:	9cc03fcc 	andi	r19,r19,255
    88e4:	b811883a 	mov	r8,r23
    88e8:	9802571e 	bne	r19,zero,9248 <___vfiprintf_internal_r+0x14c4>
    88ec:	18005726 	beq	r3,zero,8a4c <___vfiprintf_internal_r+0xcc8>
    88f0:	04c00044 	movi	r19,1
    88f4:	d8c01005 	stb	r3,64(sp)
    88f8:	d8001d85 	stb	zero,118(sp)
    88fc:	9829883a 	mov	r20,r19
    8900:	ddc01004 	addi	r23,sp,64
    8904:	003f0a06 	br	8530 <___vfiprintf_internal_r+0x7ac>
    8908:	d9402017 	ldw	r5,128(sp)
    890c:	d9002117 	ldw	r4,132(sp)
    8910:	d9801a04 	addi	r6,sp,104
    8914:	da802a15 	stw	r10,168(sp)
    8918:	0007c700 	call	7c70 <__sprint_r.part.0>
    891c:	da802a17 	ldw	r10,168(sp)
    8920:	1000501e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8924:	d9801b17 	ldw	r6,108(sp)
    8928:	d8801c17 	ldw	r2,112(sp)
    892c:	d811883a 	mov	r8,sp
    8930:	31000044 	addi	r4,r6,1
    8934:	003e3606 	br	8210 <___vfiprintf_internal_r+0x48c>
    8938:	d9001b17 	ldw	r4,108(sp)
    893c:	d8801c17 	ldw	r2,112(sp)
    8940:	21400044 	addi	r5,r4,1
    8944:	d9801d87 	ldb	r6,118(sp)
    8948:	303e5226 	beq	r6,zero,8294 <___vfiprintf_internal_r+0x510>
    894c:	01800044 	movi	r6,1
    8950:	d9001d84 	addi	r4,sp,118
    8954:	1185883a 	add	r2,r2,r6
    8958:	41000015 	stw	r4,0(r8)
    895c:	41800115 	stw	r6,4(r8)
    8960:	d8801c15 	stw	r2,112(sp)
    8964:	d9401b15 	stw	r5,108(sp)
    8968:	010001c4 	movi	r4,7
    896c:	2140b00e 	bge	r4,r5,8c30 <___vfiprintf_internal_r+0xeac>
    8970:	1000f61e 	bne	r2,zero,8d4c <___vfiprintf_internal_r+0xfc8>
    8974:	3800b31e 	bne	r7,zero,8c44 <___vfiprintf_internal_r+0xec0>
    8978:	0009883a 	mov	r4,zero
    897c:	300b883a 	mov	r5,r6
    8980:	d811883a 	mov	r8,sp
    8984:	01802004 	movi	r6,128
    8988:	19be5226 	beq	r3,r6,82d4 <___vfiprintf_internal_r+0x550>
    898c:	8521c83a 	sub	r16,r16,r20
    8990:	043e790e 	bge	zero,r16,8378 <___vfiprintf_internal_r+0x5f4>
    8994:	05400404 	movi	r21,16
    8998:	ac01b00e 	bge	r21,r16,905c <___vfiprintf_internal_r+0x12d8>
    899c:	01400074 	movhi	r5,1
    89a0:	29407c04 	addi	r5,r5,496
    89a4:	d9402315 	stw	r5,140(sp)
    89a8:	070001c4 	movi	fp,7
    89ac:	00000506 	br	89c4 <___vfiprintf_internal_r+0xc40>
    89b0:	21400084 	addi	r5,r4,2
    89b4:	42000204 	addi	r8,r8,8
    89b8:	1809883a 	mov	r4,r3
    89bc:	843ffc04 	addi	r16,r16,-16
    89c0:	ac000d0e 	bge	r21,r16,89f8 <___vfiprintf_internal_r+0xc74>
    89c4:	10800404 	addi	r2,r2,16
    89c8:	20c00044 	addi	r3,r4,1
    89cc:	44800015 	stw	r18,0(r8)
    89d0:	45400115 	stw	r21,4(r8)
    89d4:	d8801c15 	stw	r2,112(sp)
    89d8:	d8c01b15 	stw	r3,108(sp)
    89dc:	e0fff40e 	bge	fp,r3,89b0 <___vfiprintf_internal_r+0xc2c>
    89e0:	1000101e 	bne	r2,zero,8a24 <___vfiprintf_internal_r+0xca0>
    89e4:	843ffc04 	addi	r16,r16,-16
    89e8:	01400044 	movi	r5,1
    89ec:	0009883a 	mov	r4,zero
    89f0:	d811883a 	mov	r8,sp
    89f4:	ac3ff316 	blt	r21,r16,89c4 <___vfiprintf_internal_r+0xc40>
    89f8:	d8c02317 	ldw	r3,140(sp)
    89fc:	1405883a 	add	r2,r2,r16
    8a00:	44000115 	stw	r16,4(r8)
    8a04:	40c00015 	stw	r3,0(r8)
    8a08:	d8801c15 	stw	r2,112(sp)
    8a0c:	d9401b15 	stw	r5,108(sp)
    8a10:	00c001c4 	movi	r3,7
    8a14:	19401916 	blt	r3,r5,8a7c <___vfiprintf_internal_r+0xcf8>
    8a18:	42000204 	addi	r8,r8,8
    8a1c:	29400044 	addi	r5,r5,1
    8a20:	003e5506 	br	8378 <___vfiprintf_internal_r+0x5f4>
    8a24:	d9402017 	ldw	r5,128(sp)
    8a28:	d9002117 	ldw	r4,132(sp)
    8a2c:	d9801a04 	addi	r6,sp,104
    8a30:	0007c700 	call	7c70 <__sprint_r.part.0>
    8a34:	10000b1e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8a38:	d9001b17 	ldw	r4,108(sp)
    8a3c:	d8801c17 	ldw	r2,112(sp)
    8a40:	d811883a 	mov	r8,sp
    8a44:	21400044 	addi	r5,r4,1
    8a48:	003fdc06 	br	89bc <___vfiprintf_internal_r+0xc38>
    8a4c:	d8801c17 	ldw	r2,112(sp)
    8a50:	10000426 	beq	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8a54:	d9402017 	ldw	r5,128(sp)
    8a58:	d9002117 	ldw	r4,132(sp)
    8a5c:	d9801a04 	addi	r6,sp,104
    8a60:	0007c700 	call	7c70 <__sprint_r.part.0>
    8a64:	d9402017 	ldw	r5,128(sp)
    8a68:	2880030b 	ldhu	r2,12(r5)
    8a6c:	1080100c 	andi	r2,r2,64
    8a70:	10014d1e 	bne	r2,zero,8fa8 <___vfiprintf_internal_r+0x1224>
    8a74:	d8802417 	ldw	r2,144(sp)
    8a78:	003d9706 	br	80d8 <___vfiprintf_internal_r+0x354>
    8a7c:	1000d21e 	bne	r2,zero,8dc8 <___vfiprintf_internal_r+0x1044>
    8a80:	00c00044 	movi	r3,1
    8a84:	a005883a 	mov	r2,r20
    8a88:	ddc00015 	stw	r23,0(sp)
    8a8c:	dd000115 	stw	r20,4(sp)
    8a90:	dd001c15 	stw	r20,112(sp)
    8a94:	d8c01b15 	stw	r3,108(sp)
    8a98:	d811883a 	mov	r8,sp
    8a9c:	42000204 	addi	r8,r8,8
    8aa0:	8c40010c 	andi	r17,r17,4
    8aa4:	88004026 	beq	r17,zero,8ba8 <___vfiprintf_internal_r+0xe24>
    8aa8:	d9002517 	ldw	r4,148(sp)
    8aac:	24e3c83a 	sub	r17,r4,r19
    8ab0:	04403d0e 	bge	zero,r17,8ba8 <___vfiprintf_internal_r+0xe24>
    8ab4:	04000404 	movi	r16,16
    8ab8:	8441a90e 	bge	r16,r17,9160 <___vfiprintf_internal_r+0x13dc>
    8abc:	00c00074 	movhi	r3,1
    8ac0:	18c08004 	addi	r3,r3,512
    8ac4:	d9001b17 	ldw	r4,108(sp)
    8ac8:	d8c02315 	stw	r3,140(sp)
    8acc:	050001c4 	movi	r20,7
    8ad0:	dd402117 	ldw	r21,132(sp)
    8ad4:	ddc02017 	ldw	r23,128(sp)
    8ad8:	00000506 	br	8af0 <___vfiprintf_internal_r+0xd6c>
    8adc:	21400084 	addi	r5,r4,2
    8ae0:	42000204 	addi	r8,r8,8
    8ae4:	1809883a 	mov	r4,r3
    8ae8:	8c7ffc04 	addi	r17,r17,-16
    8aec:	84400f0e 	bge	r16,r17,8b2c <___vfiprintf_internal_r+0xda8>
    8af0:	01400074 	movhi	r5,1
    8af4:	10800404 	addi	r2,r2,16
    8af8:	20c00044 	addi	r3,r4,1
    8afc:	29408004 	addi	r5,r5,512
    8b00:	41400015 	stw	r5,0(r8)
    8b04:	44000115 	stw	r16,4(r8)
    8b08:	d8801c15 	stw	r2,112(sp)
    8b0c:	d8c01b15 	stw	r3,108(sp)
    8b10:	a0fff20e 	bge	r20,r3,8adc <___vfiprintf_internal_r+0xd58>
    8b14:	1000141e 	bne	r2,zero,8b68 <___vfiprintf_internal_r+0xde4>
    8b18:	8c7ffc04 	addi	r17,r17,-16
    8b1c:	01400044 	movi	r5,1
    8b20:	0009883a 	mov	r4,zero
    8b24:	d811883a 	mov	r8,sp
    8b28:	847ff116 	blt	r16,r17,8af0 <___vfiprintf_internal_r+0xd6c>
    8b2c:	d8c02317 	ldw	r3,140(sp)
    8b30:	1445883a 	add	r2,r2,r17
    8b34:	44400115 	stw	r17,4(r8)
    8b38:	40c00015 	stw	r3,0(r8)
    8b3c:	d8801c15 	stw	r2,112(sp)
    8b40:	d9401b15 	stw	r5,108(sp)
    8b44:	00c001c4 	movi	r3,7
    8b48:	1940170e 	bge	r3,r5,8ba8 <___vfiprintf_internal_r+0xe24>
    8b4c:	1000101e 	bne	r2,zero,8b90 <___vfiprintf_internal_r+0xe0c>
    8b50:	d8802517 	ldw	r2,148(sp)
    8b54:	14c11616 	blt	r2,r19,8fb0 <___vfiprintf_internal_r+0x122c>
    8b58:	d9002417 	ldw	r4,144(sp)
    8b5c:	2089883a 	add	r4,r4,r2
    8b60:	d9002415 	stw	r4,144(sp)
    8b64:	003e1806 	br	83c8 <___vfiprintf_internal_r+0x644>
    8b68:	d9801a04 	addi	r6,sp,104
    8b6c:	b80b883a 	mov	r5,r23
    8b70:	a809883a 	mov	r4,r21
    8b74:	0007c700 	call	7c70 <__sprint_r.part.0>
    8b78:	103fba1e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8b7c:	d9001b17 	ldw	r4,108(sp)
    8b80:	d8801c17 	ldw	r2,112(sp)
    8b84:	d811883a 	mov	r8,sp
    8b88:	21400044 	addi	r5,r4,1
    8b8c:	003fd606 	br	8ae8 <___vfiprintf_internal_r+0xd64>
    8b90:	d9402017 	ldw	r5,128(sp)
    8b94:	d9002117 	ldw	r4,132(sp)
    8b98:	d9801a04 	addi	r6,sp,104
    8b9c:	0007c700 	call	7c70 <__sprint_r.part.0>
    8ba0:	103fb01e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8ba4:	d8801c17 	ldw	r2,112(sp)
    8ba8:	d8c02517 	ldw	r3,148(sp)
    8bac:	1cc0010e 	bge	r3,r19,8bb4 <___vfiprintf_internal_r+0xe30>
    8bb0:	9807883a 	mov	r3,r19
    8bb4:	d9002417 	ldw	r4,144(sp)
    8bb8:	20c9883a 	add	r4,r4,r3
    8bbc:	d9002415 	stw	r4,144(sp)
    8bc0:	103e0126 	beq	r2,zero,83c8 <___vfiprintf_internal_r+0x644>
    8bc4:	d9402017 	ldw	r5,128(sp)
    8bc8:	d9002117 	ldw	r4,132(sp)
    8bcc:	d9801a04 	addi	r6,sp,104
    8bd0:	0007c700 	call	7c70 <__sprint_r.part.0>
    8bd4:	103dfc26 	beq	r2,zero,83c8 <___vfiprintf_internal_r+0x644>
    8bd8:	003fa206 	br	8a64 <___vfiprintf_internal_r+0xce0>
    8bdc:	d9402017 	ldw	r5,128(sp)
    8be0:	d9002117 	ldw	r4,132(sp)
    8be4:	d9801a04 	addi	r6,sp,104
    8be8:	d9c02b15 	stw	r7,172(sp)
    8bec:	0007c700 	call	7c70 <__sprint_r.part.0>
    8bf0:	d9c02b17 	ldw	r7,172(sp)
    8bf4:	103f9b1e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8bf8:	d9001b17 	ldw	r4,108(sp)
    8bfc:	d8801c17 	ldw	r2,112(sp)
    8c00:	d811883a 	mov	r8,sp
    8c04:	21800044 	addi	r6,r4,1
    8c08:	003dbf06 	br	8308 <___vfiprintf_internal_r+0x584>
    8c0c:	1000d81e 	bne	r2,zero,8f70 <___vfiprintf_internal_r+0x11ec>
    8c10:	d9001d87 	ldb	r4,118(sp)
    8c14:	20000a26 	beq	r4,zero,8c40 <___vfiprintf_internal_r+0xebc>
    8c18:	00800044 	movi	r2,1
    8c1c:	d9001d84 	addi	r4,sp,118
    8c20:	100b883a 	mov	r5,r2
    8c24:	d9000015 	stw	r4,0(sp)
    8c28:	d8800115 	stw	r2,4(sp)
    8c2c:	d811883a 	mov	r8,sp
    8c30:	2809883a 	mov	r4,r5
    8c34:	42000204 	addi	r8,r8,8
    8c38:	29400044 	addi	r5,r5,1
    8c3c:	003d9506 	br	8294 <___vfiprintf_internal_r+0x510>
    8c40:	3800fd26 	beq	r7,zero,9038 <___vfiprintf_internal_r+0x12b4>
    8c44:	00800084 	movi	r2,2
    8c48:	d9001d04 	addi	r4,sp,116
    8c4c:	d9000015 	stw	r4,0(sp)
    8c50:	d8800115 	stw	r2,4(sp)
    8c54:	01400044 	movi	r5,1
    8c58:	d811883a 	mov	r8,sp
    8c5c:	2809883a 	mov	r4,r5
    8c60:	42000204 	addi	r8,r8,8
    8c64:	29400044 	addi	r5,r5,1
    8c68:	003f4606 	br	8984 <___vfiprintf_internal_r+0xc00>
    8c6c:	d8802517 	ldw	r2,148(sp)
    8c70:	14c0010e 	bge	r2,r19,8c78 <___vfiprintf_internal_r+0xef4>
    8c74:	9805883a 	mov	r2,r19
    8c78:	d9402417 	ldw	r5,144(sp)
    8c7c:	288b883a 	add	r5,r5,r2
    8c80:	d9402415 	stw	r5,144(sp)
    8c84:	003dd006 	br	83c8 <___vfiprintf_internal_r+0x644>
    8c88:	d8001d85 	stb	zero,118(sp)
    8c8c:	80005d16 	blt	r16,zero,8e04 <___vfiprintf_internal_r+0x1080>
    8c90:	00ffdfc4 	movi	r3,-129
    8c94:	9d04b03a 	or	r2,r19,r20
    8c98:	88e2703a 	and	r17,r17,r3
    8c9c:	103d3726 	beq	r2,zero,817c <___vfiprintf_internal_r+0x3f8>
    8ca0:	002b883a 	mov	r21,zero
    8ca4:	d9002617 	ldw	r4,152(sp)
    8ca8:	ddc01a04 	addi	r23,sp,104
    8cac:	988003cc 	andi	r2,r19,15
    8cb0:	a006973a 	slli	r3,r20,28
    8cb4:	2085883a 	add	r2,r4,r2
    8cb8:	9826d13a 	srli	r19,r19,4
    8cbc:	10800003 	ldbu	r2,0(r2)
    8cc0:	a028d13a 	srli	r20,r20,4
    8cc4:	bdffffc4 	addi	r23,r23,-1
    8cc8:	1ce6b03a 	or	r19,r3,r19
    8ccc:	b8800005 	stb	r2,0(r23)
    8cd0:	9d04b03a 	or	r2,r19,r20
    8cd4:	103ff51e 	bne	r2,zero,8cac <___vfiprintf_internal_r+0xf28>
    8cd8:	d8801e17 	ldw	r2,120(sp)
    8cdc:	15e9c83a 	sub	r20,r2,r23
    8ce0:	003d2b06 	br	8190 <___vfiprintf_internal_r+0x40c>
    8ce4:	d9402017 	ldw	r5,128(sp)
    8ce8:	d9002117 	ldw	r4,132(sp)
    8cec:	d9801a04 	addi	r6,sp,104
    8cf0:	0007c700 	call	7c70 <__sprint_r.part.0>
    8cf4:	103f5b1e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8cf8:	d8801c17 	ldw	r2,112(sp)
    8cfc:	d811883a 	mov	r8,sp
    8d00:	003f6706 	br	8aa0 <___vfiprintf_internal_r+0xd1c>
    8d04:	d9402017 	ldw	r5,128(sp)
    8d08:	d9002117 	ldw	r4,132(sp)
    8d0c:	d9801a04 	addi	r6,sp,104
    8d10:	0007c700 	call	7c70 <__sprint_r.part.0>
    8d14:	103f531e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8d18:	d811883a 	mov	r8,sp
    8d1c:	003cd906 	br	8084 <___vfiprintf_internal_r+0x300>
    8d20:	10803fcc 	andi	r2,r2,255
    8d24:	1080201c 	xori	r2,r2,128
    8d28:	10bfe004 	addi	r2,r2,-128
    8d2c:	00c00c04 	movi	r3,48
    8d30:	10ffe926 	beq	r2,r3,8cd8 <___vfiprintf_internal_r+0xf54>
    8d34:	b8ffffc5 	stb	r3,-1(r23)
    8d38:	d8c01e17 	ldw	r3,120(sp)
    8d3c:	b8bfffc4 	addi	r2,r23,-1
    8d40:	102f883a 	mov	r23,r2
    8d44:	18a9c83a 	sub	r20,r3,r2
    8d48:	003d1106 	br	8190 <___vfiprintf_internal_r+0x40c>
    8d4c:	d9402017 	ldw	r5,128(sp)
    8d50:	d9002117 	ldw	r4,132(sp)
    8d54:	d9801a04 	addi	r6,sp,104
    8d58:	d8c02a15 	stw	r3,168(sp)
    8d5c:	d9c02b15 	stw	r7,172(sp)
    8d60:	0007c700 	call	7c70 <__sprint_r.part.0>
    8d64:	d8c02a17 	ldw	r3,168(sp)
    8d68:	d9c02b17 	ldw	r7,172(sp)
    8d6c:	103f3d1e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8d70:	d9001b17 	ldw	r4,108(sp)
    8d74:	d8801c17 	ldw	r2,112(sp)
    8d78:	d811883a 	mov	r8,sp
    8d7c:	21400044 	addi	r5,r4,1
    8d80:	003d4406 	br	8294 <___vfiprintf_internal_r+0x510>
    8d84:	d9402017 	ldw	r5,128(sp)
    8d88:	d9002117 	ldw	r4,132(sp)
    8d8c:	d9801a04 	addi	r6,sp,104
    8d90:	d8c02a15 	stw	r3,168(sp)
    8d94:	0007c700 	call	7c70 <__sprint_r.part.0>
    8d98:	d8c02a17 	ldw	r3,168(sp)
    8d9c:	103f311e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8da0:	d9001b17 	ldw	r4,108(sp)
    8da4:	d8801c17 	ldw	r2,112(sp)
    8da8:	d811883a 	mov	r8,sp
    8dac:	21400044 	addi	r5,r4,1
    8db0:	003ef406 	br	8984 <___vfiprintf_internal_r+0xc00>
    8db4:	1000bd1e 	bne	r2,zero,90ac <___vfiprintf_internal_r+0x1328>
    8db8:	01400044 	movi	r5,1
    8dbc:	0009883a 	mov	r4,zero
    8dc0:	d811883a 	mov	r8,sp
    8dc4:	003ef106 	br	898c <___vfiprintf_internal_r+0xc08>
    8dc8:	d9402017 	ldw	r5,128(sp)
    8dcc:	d9002117 	ldw	r4,132(sp)
    8dd0:	d9801a04 	addi	r6,sp,104
    8dd4:	0007c700 	call	7c70 <__sprint_r.part.0>
    8dd8:	103f221e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8ddc:	d9401b17 	ldw	r5,108(sp)
    8de0:	d8801c17 	ldw	r2,112(sp)
    8de4:	d811883a 	mov	r8,sp
    8de8:	29400044 	addi	r5,r5,1
    8dec:	003d6206 	br	8378 <___vfiprintf_internal_r+0x5f4>
    8df0:	01400074 	movhi	r5,1
    8df4:	29401b04 	addi	r5,r5,108
    8df8:	d9402615 	stw	r5,152(sp)
    8dfc:	d8c02215 	stw	r3,136(sp)
    8e00:	1023883a 	mov	r17,r2
    8e04:	9d04b03a 	or	r2,r19,r20
    8e08:	103fa51e 	bne	r2,zero,8ca0 <___vfiprintf_internal_r+0xf1c>
    8e0c:	002b883a 	mov	r21,zero
    8e10:	00800084 	movi	r2,2
    8e14:	003e4a06 	br	8740 <___vfiprintf_internal_r+0x9bc>
    8e18:	01400074 	movhi	r5,1
    8e1c:	29401b04 	addi	r5,r5,108
    8e20:	002b883a 	mov	r21,zero
    8e24:	d9402615 	stw	r5,152(sp)
    8e28:	003f9e06 	br	8ca4 <___vfiprintf_internal_r+0xf20>
    8e2c:	d9402217 	ldw	r5,136(sp)
    8e30:	d8001d85 	stb	zero,118(sp)
    8e34:	0029883a 	mov	r20,zero
    8e38:	28800104 	addi	r2,r5,4
    8e3c:	2cc00017 	ldw	r19,0(r5)
    8e40:	803e3a16 	blt	r16,zero,872c <___vfiprintf_internal_r+0x9a8>
    8e44:	00ffdfc4 	movi	r3,-129
    8e48:	d8802215 	stw	r2,136(sp)
    8e4c:	88e2703a 	and	r17,r17,r3
    8e50:	002b883a 	mov	r21,zero
    8e54:	983e9b26 	beq	r19,zero,88c4 <___vfiprintf_internal_r+0xb40>
    8e58:	00800244 	movi	r2,9
    8e5c:	14fdc936 	bltu	r2,r19,8584 <___vfiprintf_internal_r+0x800>
    8e60:	003e9a06 	br	88cc <___vfiprintf_internal_r+0xb48>
    8e64:	00800c04 	movi	r2,48
    8e68:	d8c01d45 	stb	r3,117(sp)
    8e6c:	d8801d05 	stb	r2,116(sp)
    8e70:	d8001d85 	stb	zero,118(sp)
    8e74:	88c00094 	ori	r3,r17,2
    8e78:	80009c16 	blt	r16,zero,90ec <___vfiprintf_internal_r+0x1368>
    8e7c:	00bfdfc4 	movi	r2,-129
    8e80:	88a2703a 	and	r17,r17,r2
    8e84:	8c400094 	ori	r17,r17,2
    8e88:	002b883a 	mov	r21,zero
    8e8c:	003f8506 	br	8ca4 <___vfiprintf_internal_r+0xf20>
    8e90:	b029883a 	mov	r20,r22
    8e94:	003c0b06 	br	7ec4 <___vfiprintf_internal_r+0x140>
    8e98:	04e7c83a 	sub	r19,zero,r19
    8e9c:	05400b44 	movi	r21,45
    8ea0:	9804c03a 	cmpne	r2,r19,zero
    8ea4:	0529c83a 	sub	r20,zero,r20
    8ea8:	dd401d85 	stb	r21,118(sp)
    8eac:	a0a9c83a 	sub	r20,r20,r2
    8eb0:	80009716 	blt	r16,zero,9110 <___vfiprintf_internal_r+0x138c>
    8eb4:	00bfdfc4 	movi	r2,-129
    8eb8:	88a2703a 	and	r17,r17,r2
    8ebc:	003db006 	br	8580 <___vfiprintf_internal_r+0x7fc>
    8ec0:	b0c00007 	ldb	r3,0(r22)
    8ec4:	003c0c06 	br	7ef8 <___vfiprintf_internal_r+0x174>
    8ec8:	8880100c 	andi	r2,r17,64
    8ecc:	d8001d85 	stb	zero,118(sp)
    8ed0:	1000461e 	bne	r2,zero,8fec <___vfiprintf_internal_r+0x1268>
    8ed4:	d9002217 	ldw	r4,136(sp)
    8ed8:	0029883a 	mov	r20,zero
    8edc:	20800104 	addi	r2,r4,4
    8ee0:	24c00017 	ldw	r19,0(r4)
    8ee4:	803df80e 	bge	r16,zero,86c8 <___vfiprintf_internal_r+0x944>
    8ee8:	9d06b03a 	or	r3,r19,r20
    8eec:	d8802215 	stw	r2,136(sp)
    8ef0:	183d5e1e 	bne	r3,zero,846c <___vfiprintf_internal_r+0x6e8>
    8ef4:	002b883a 	mov	r21,zero
    8ef8:	0005883a 	mov	r2,zero
    8efc:	003e1006 	br	8740 <___vfiprintf_internal_r+0x9bc>
    8f00:	8880040c 	andi	r2,r17,16
    8f04:	1000321e 	bne	r2,zero,8fd0 <___vfiprintf_internal_r+0x124c>
    8f08:	8c40100c 	andi	r17,r17,64
    8f0c:	88008d26 	beq	r17,zero,9144 <___vfiprintf_internal_r+0x13c0>
    8f10:	d9402217 	ldw	r5,136(sp)
    8f14:	d8c02417 	ldw	r3,144(sp)
    8f18:	28800017 	ldw	r2,0(r5)
    8f1c:	29400104 	addi	r5,r5,4
    8f20:	d9402215 	stw	r5,136(sp)
    8f24:	10c0000d 	sth	r3,0(r2)
    8f28:	003bca06 	br	7e54 <___vfiprintf_internal_r+0xd0>
    8f2c:	8880100c 	andi	r2,r17,64
    8f30:	10003a26 	beq	r2,zero,901c <___vfiprintf_internal_r+0x1298>
    8f34:	d8802217 	ldw	r2,136(sp)
    8f38:	14c0000f 	ldh	r19,0(r2)
    8f3c:	10800104 	addi	r2,r2,4
    8f40:	d8802215 	stw	r2,136(sp)
    8f44:	9829d7fa 	srai	r20,r19,31
    8f48:	a005883a 	mov	r2,r20
    8f4c:	003d8506 	br	8564 <___vfiprintf_internal_r+0x7e0>
    8f50:	8880100c 	andi	r2,r17,64
    8f54:	10002b26 	beq	r2,zero,9004 <___vfiprintf_internal_r+0x1280>
    8f58:	d8802217 	ldw	r2,136(sp)
    8f5c:	0029883a 	mov	r20,zero
    8f60:	14c0000b 	ldhu	r19,0(r2)
    8f64:	10800104 	addi	r2,r2,4
    8f68:	d8802215 	stw	r2,136(sp)
    8f6c:	003d5d06 	br	84e4 <___vfiprintf_internal_r+0x760>
    8f70:	d9402017 	ldw	r5,128(sp)
    8f74:	d9002117 	ldw	r4,132(sp)
    8f78:	d9801a04 	addi	r6,sp,104
    8f7c:	d8c02a15 	stw	r3,168(sp)
    8f80:	d9c02b15 	stw	r7,172(sp)
    8f84:	0007c700 	call	7c70 <__sprint_r.part.0>
    8f88:	d8c02a17 	ldw	r3,168(sp)
    8f8c:	d9c02b17 	ldw	r7,172(sp)
    8f90:	103eb41e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    8f94:	d9001b17 	ldw	r4,108(sp)
    8f98:	d8801c17 	ldw	r2,112(sp)
    8f9c:	d811883a 	mov	r8,sp
    8fa0:	21400044 	addi	r5,r4,1
    8fa4:	003e6706 	br	8944 <___vfiprintf_internal_r+0xbc0>
    8fa8:	00bfffc4 	movi	r2,-1
    8fac:	003c4a06 	br	80d8 <___vfiprintf_internal_r+0x354>
    8fb0:	9805883a 	mov	r2,r19
    8fb4:	003ee806 	br	8b58 <___vfiprintf_internal_r+0xdd4>
    8fb8:	d8c02217 	ldw	r3,136(sp)
    8fbc:	0029883a 	mov	r20,zero
    8fc0:	18800104 	addi	r2,r3,4
    8fc4:	1cc0000b 	ldhu	r19,0(r3)
    8fc8:	803f9e0e 	bge	r16,zero,8e44 <___vfiprintf_internal_r+0x10c0>
    8fcc:	003dd706 	br	872c <___vfiprintf_internal_r+0x9a8>
    8fd0:	d8c02217 	ldw	r3,136(sp)
    8fd4:	d9002417 	ldw	r4,144(sp)
    8fd8:	18800017 	ldw	r2,0(r3)
    8fdc:	18c00104 	addi	r3,r3,4
    8fe0:	d8c02215 	stw	r3,136(sp)
    8fe4:	11000015 	stw	r4,0(r2)
    8fe8:	003b9a06 	br	7e54 <___vfiprintf_internal_r+0xd0>
    8fec:	d8c02217 	ldw	r3,136(sp)
    8ff0:	0029883a 	mov	r20,zero
    8ff4:	18800104 	addi	r2,r3,4
    8ff8:	1cc0000b 	ldhu	r19,0(r3)
    8ffc:	803db20e 	bge	r16,zero,86c8 <___vfiprintf_internal_r+0x944>
    9000:	003fb906 	br	8ee8 <___vfiprintf_internal_r+0x1164>
    9004:	d9002217 	ldw	r4,136(sp)
    9008:	0029883a 	mov	r20,zero
    900c:	24c00017 	ldw	r19,0(r4)
    9010:	21000104 	addi	r4,r4,4
    9014:	d9002215 	stw	r4,136(sp)
    9018:	003d3206 	br	84e4 <___vfiprintf_internal_r+0x760>
    901c:	d8c02217 	ldw	r3,136(sp)
    9020:	1cc00017 	ldw	r19,0(r3)
    9024:	18c00104 	addi	r3,r3,4
    9028:	d8c02215 	stw	r3,136(sp)
    902c:	9829d7fa 	srai	r20,r19,31
    9030:	a005883a 	mov	r2,r20
    9034:	003d4b06 	br	8564 <___vfiprintf_internal_r+0x7e0>
    9038:	0009883a 	mov	r4,zero
    903c:	01400044 	movi	r5,1
    9040:	d811883a 	mov	r8,sp
    9044:	003e4f06 	br	8984 <___vfiprintf_internal_r+0xc00>
    9048:	d8c02215 	stw	r3,136(sp)
    904c:	002b883a 	mov	r21,zero
    9050:	003db806 	br	8734 <___vfiprintf_internal_r+0x9b0>
    9054:	d811883a 	mov	r8,sp
    9058:	003e9606 	br	8ab4 <___vfiprintf_internal_r+0xd30>
    905c:	01000074 	movhi	r4,1
    9060:	21007c04 	addi	r4,r4,496
    9064:	d9002315 	stw	r4,140(sp)
    9068:	003e6306 	br	89f8 <___vfiprintf_internal_r+0xc74>
    906c:	b0c00043 	ldbu	r3,1(r22)
    9070:	8c400814 	ori	r17,r17,32
    9074:	b5800044 	addi	r22,r22,1
    9078:	18c03fcc 	andi	r3,r3,255
    907c:	18c0201c 	xori	r3,r3,128
    9080:	18ffe004 	addi	r3,r3,-128
    9084:	003b9c06 	br	7ef8 <___vfiprintf_internal_r+0x174>
    9088:	b809883a 	mov	r4,r23
    908c:	da002a15 	stw	r8,168(sp)
    9090:	00004f40 	call	4f4 <strlen>
    9094:	1029883a 	mov	r20,r2
    9098:	dd401d83 	ldbu	r21,118(sp)
    909c:	df002215 	stw	fp,136(sp)
    90a0:	0021883a 	mov	r16,zero
    90a4:	da002a17 	ldw	r8,168(sp)
    90a8:	003c3906 	br	8190 <___vfiprintf_internal_r+0x40c>
    90ac:	d9402017 	ldw	r5,128(sp)
    90b0:	d9002117 	ldw	r4,132(sp)
    90b4:	d9801a04 	addi	r6,sp,104
    90b8:	0007c700 	call	7c70 <__sprint_r.part.0>
    90bc:	103e691e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xce0>
    90c0:	d9001b17 	ldw	r4,108(sp)
    90c4:	d8801c17 	ldw	r2,112(sp)
    90c8:	d811883a 	mov	r8,sp
    90cc:	21400044 	addi	r5,r4,1
    90d0:	003e2e06 	br	898c <___vfiprintf_internal_r+0xc08>
    90d4:	01000074 	movhi	r4,1
    90d8:	21008004 	addi	r4,r4,512
    90dc:	d9002315 	stw	r4,140(sp)
    90e0:	d9001b17 	ldw	r4,108(sp)
    90e4:	21000044 	addi	r4,r4,1
    90e8:	003c5e06 	br	8264 <___vfiprintf_internal_r+0x4e0>
    90ec:	002b883a 	mov	r21,zero
    90f0:	00800084 	movi	r2,2
    90f4:	10803fcc 	andi	r2,r2,255
    90f8:	01000044 	movi	r4,1
    90fc:	11002b26 	beq	r2,r4,91ac <___vfiprintf_internal_r+0x1428>
    9100:	01000084 	movi	r4,2
    9104:	11002b1e 	bne	r2,r4,91b4 <___vfiprintf_internal_r+0x1430>
    9108:	1823883a 	mov	r17,r3
    910c:	003ee506 	br	8ca4 <___vfiprintf_internal_r+0xf20>
    9110:	8807883a 	mov	r3,r17
    9114:	00800044 	movi	r2,1
    9118:	003ff606 	br	90f4 <___vfiprintf_internal_r+0x1370>
    911c:	00800184 	movi	r2,6
    9120:	1400012e 	bgeu	r2,r16,9128 <___vfiprintf_internal_r+0x13a4>
    9124:	1021883a 	mov	r16,r2
    9128:	8029883a 	mov	r20,r16
    912c:	8027883a 	mov	r19,r16
    9130:	80002216 	blt	r16,zero,91bc <___vfiprintf_internal_r+0x1438>
    9134:	05c00074 	movhi	r23,1
    9138:	df002215 	stw	fp,136(sp)
    913c:	bdc02004 	addi	r23,r23,128
    9140:	003cfb06 	br	8530 <___vfiprintf_internal_r+0x7ac>
    9144:	d9002217 	ldw	r4,136(sp)
    9148:	d9402417 	ldw	r5,144(sp)
    914c:	20800017 	ldw	r2,0(r4)
    9150:	21000104 	addi	r4,r4,4
    9154:	d9002215 	stw	r4,136(sp)
    9158:	11400015 	stw	r5,0(r2)
    915c:	003b3d06 	br	7e54 <___vfiprintf_internal_r+0xd0>
    9160:	01400074 	movhi	r5,1
    9164:	29408004 	addi	r5,r5,512
    9168:	d9402315 	stw	r5,140(sp)
    916c:	d9401b17 	ldw	r5,108(sp)
    9170:	29400044 	addi	r5,r5,1
    9174:	003e6d06 	br	8b2c <___vfiprintf_internal_r+0xda8>
    9178:	8029883a 	mov	r20,r16
    917c:	dd401d83 	ldbu	r21,118(sp)
    9180:	df002215 	stw	fp,136(sp)
    9184:	0021883a 	mov	r16,zero
    9188:	003c0106 	br	8190 <___vfiprintf_internal_r+0x40c>
    918c:	00c00074 	movhi	r3,1
    9190:	18c07c04 	addi	r3,r3,496
    9194:	d8c02315 	stw	r3,140(sp)
    9198:	280d883a 	mov	r6,r5
    919c:	003c6906 	br	8344 <___vfiprintf_internal_r+0x5c0>
    91a0:	802d883a 	mov	r22,r16
    91a4:	0021883a 	mov	r16,zero
    91a8:	003b5406 	br	7efc <___vfiprintf_internal_r+0x178>
    91ac:	1823883a 	mov	r17,r3
    91b0:	003cf306 	br	8580 <___vfiprintf_internal_r+0x7fc>
    91b4:	1823883a 	mov	r17,r3
    91b8:	003cad06 	br	8470 <___vfiprintf_internal_r+0x6ec>
    91bc:	0027883a 	mov	r19,zero
    91c0:	003fdc06 	br	9134 <___vfiprintf_internal_r+0x13b0>
    91c4:	d9402217 	ldw	r5,136(sp)
    91c8:	8005883a 	mov	r2,r16
    91cc:	b0c00043 	ldbu	r3,1(r22)
    91d0:	2c000017 	ldw	r16,0(r5)
    91d4:	29000104 	addi	r4,r5,4
    91d8:	d9002215 	stw	r4,136(sp)
    91dc:	102d883a 	mov	r22,r2
    91e0:	803fa50e 	bge	r16,zero,9078 <___vfiprintf_internal_r+0x12f4>
    91e4:	18c03fcc 	andi	r3,r3,255
    91e8:	18c0201c 	xori	r3,r3,128
    91ec:	043fffc4 	movi	r16,-1
    91f0:	18ffe004 	addi	r3,r3,-128
    91f4:	003b4006 	br	7ef8 <___vfiprintf_internal_r+0x174>
    91f8:	d9402303 	ldbu	r5,140(sp)
    91fc:	d9401d85 	stb	r5,118(sp)
    9200:	003cae06 	br	84bc <___vfiprintf_internal_r+0x738>
    9204:	d8c02303 	ldbu	r3,140(sp)
    9208:	d8c01d85 	stb	r3,118(sp)
    920c:	003d1406 	br	8660 <___vfiprintf_internal_r+0x8dc>
    9210:	d8c02303 	ldbu	r3,140(sp)
    9214:	d8c01d85 	stb	r3,118(sp)
    9218:	003cca06 	br	8544 <___vfiprintf_internal_r+0x7c0>
    921c:	8880004c 	andi	r2,r17,1
    9220:	002b883a 	mov	r21,zero
    9224:	10000526 	beq	r2,zero,923c <___vfiprintf_internal_r+0x14b8>
    9228:	00800c04 	movi	r2,48
    922c:	d88019c5 	stb	r2,103(sp)
    9230:	dd002817 	ldw	r20,160(sp)
    9234:	ddc019c4 	addi	r23,sp,103
    9238:	003bd506 	br	8190 <___vfiprintf_internal_r+0x40c>
    923c:	0029883a 	mov	r20,zero
    9240:	ddc01a04 	addi	r23,sp,104
    9244:	003bd206 	br	8190 <___vfiprintf_internal_r+0x40c>
    9248:	d9002303 	ldbu	r4,140(sp)
    924c:	d9001d85 	stb	r4,118(sp)
    9250:	003da606 	br	88ec <___vfiprintf_internal_r+0xb68>
    9254:	d8c02303 	ldbu	r3,140(sp)
    9258:	d8c01d85 	stb	r3,118(sp)
    925c:	003c7606 	br	8438 <___vfiprintf_internal_r+0x6b4>
    9260:	d8c02303 	ldbu	r3,140(sp)
    9264:	d8c01d85 	stb	r3,118(sp)
    9268:	003c6506 	br	8400 <___vfiprintf_internal_r+0x67c>
    926c:	d9002303 	ldbu	r4,140(sp)
    9270:	d9001d85 	stb	r4,118(sp)
    9274:	003d3d06 	br	876c <___vfiprintf_internal_r+0x9e8>
    9278:	d8c02303 	ldbu	r3,140(sp)
    927c:	d8c01d85 	stb	r3,118(sp)
    9280:	003d1d06 	br	86f8 <___vfiprintf_internal_r+0x974>
    9284:	d8c02303 	ldbu	r3,140(sp)
    9288:	d8c01d85 	stb	r3,118(sp)
    928c:	003d0306 	br	869c <___vfiprintf_internal_r+0x918>

00009290 <__vfiprintf_internal>:
    9290:	00800074 	movhi	r2,1
    9294:	10877d04 	addi	r2,r2,7668
    9298:	300f883a 	mov	r7,r6
    929c:	280d883a 	mov	r6,r5
    92a0:	200b883a 	mov	r5,r4
    92a4:	11000017 	ldw	r4,0(r2)
    92a8:	0007d841 	jmpi	7d84 <___vfiprintf_internal_r>

000092ac <__sbprintf>:
    92ac:	2880030b 	ldhu	r2,12(r5)
    92b0:	2ac01917 	ldw	r11,100(r5)
    92b4:	2a80038b 	ldhu	r10,14(r5)
    92b8:	2a400717 	ldw	r9,28(r5)
    92bc:	2a000917 	ldw	r8,36(r5)
    92c0:	defee204 	addi	sp,sp,-1144
    92c4:	00c10004 	movi	r3,1024
    92c8:	dc011a15 	stw	r16,1128(sp)
    92cc:	10bfff4c 	andi	r2,r2,65533
    92d0:	2821883a 	mov	r16,r5
    92d4:	d8cb883a 	add	r5,sp,r3
    92d8:	dc811c15 	stw	r18,1136(sp)
    92dc:	dc411b15 	stw	r17,1132(sp)
    92e0:	dfc11d15 	stw	ra,1140(sp)
    92e4:	2025883a 	mov	r18,r4
    92e8:	d881030d 	sth	r2,1036(sp)
    92ec:	dac11915 	stw	r11,1124(sp)
    92f0:	da81038d 	sth	r10,1038(sp)
    92f4:	da410715 	stw	r9,1052(sp)
    92f8:	da010915 	stw	r8,1060(sp)
    92fc:	dec10015 	stw	sp,1024(sp)
    9300:	dec10415 	stw	sp,1040(sp)
    9304:	d8c10215 	stw	r3,1032(sp)
    9308:	d8c10515 	stw	r3,1044(sp)
    930c:	d8010615 	stw	zero,1048(sp)
    9310:	0007d840 	call	7d84 <___vfiprintf_internal_r>
    9314:	1023883a 	mov	r17,r2
    9318:	10000416 	blt	r2,zero,932c <__sbprintf+0x80>
    931c:	d9410004 	addi	r5,sp,1024
    9320:	9009883a 	mov	r4,r18
    9324:	00045600 	call	4560 <_fflush_r>
    9328:	10000d1e 	bne	r2,zero,9360 <__sbprintf+0xb4>
    932c:	d881030b 	ldhu	r2,1036(sp)
    9330:	1080100c 	andi	r2,r2,64
    9334:	10000326 	beq	r2,zero,9344 <__sbprintf+0x98>
    9338:	8080030b 	ldhu	r2,12(r16)
    933c:	10801014 	ori	r2,r2,64
    9340:	8080030d 	sth	r2,12(r16)
    9344:	8805883a 	mov	r2,r17
    9348:	dfc11d17 	ldw	ra,1140(sp)
    934c:	dc811c17 	ldw	r18,1136(sp)
    9350:	dc411b17 	ldw	r17,1132(sp)
    9354:	dc011a17 	ldw	r16,1128(sp)
    9358:	dec11e04 	addi	sp,sp,1144
    935c:	f800283a 	ret
    9360:	047fffc4 	movi	r17,-1
    9364:	003ff106 	br	932c <__sbprintf+0x80>

00009368 <_write_r>:
    9368:	defffd04 	addi	sp,sp,-12
    936c:	2805883a 	mov	r2,r5
    9370:	dc000015 	stw	r16,0(sp)
    9374:	04000074 	movhi	r16,1
    9378:	dc400115 	stw	r17,4(sp)
    937c:	300b883a 	mov	r5,r6
    9380:	840e4d04 	addi	r16,r16,14644
    9384:	2023883a 	mov	r17,r4
    9388:	380d883a 	mov	r6,r7
    938c:	1009883a 	mov	r4,r2
    9390:	dfc00215 	stw	ra,8(sp)
    9394:	80000015 	stw	zero,0(r16)
    9398:	000e0c00 	call	e0c0 <write>
    939c:	00ffffc4 	movi	r3,-1
    93a0:	10c00526 	beq	r2,r3,93b8 <_write_r+0x50>
    93a4:	dfc00217 	ldw	ra,8(sp)
    93a8:	dc400117 	ldw	r17,4(sp)
    93ac:	dc000017 	ldw	r16,0(sp)
    93b0:	dec00304 	addi	sp,sp,12
    93b4:	f800283a 	ret
    93b8:	80c00017 	ldw	r3,0(r16)
    93bc:	183ff926 	beq	r3,zero,93a4 <_write_r+0x3c>
    93c0:	88c00015 	stw	r3,0(r17)
    93c4:	003ff706 	br	93a4 <_write_r+0x3c>

000093c8 <_close_r>:
    93c8:	defffd04 	addi	sp,sp,-12
    93cc:	dc000015 	stw	r16,0(sp)
    93d0:	04000074 	movhi	r16,1
    93d4:	dc400115 	stw	r17,4(sp)
    93d8:	840e4d04 	addi	r16,r16,14644
    93dc:	2023883a 	mov	r17,r4
    93e0:	2809883a 	mov	r4,r5
    93e4:	dfc00215 	stw	ra,8(sp)
    93e8:	80000015 	stw	zero,0(r16)
    93ec:	000d3300 	call	d330 <close>
    93f0:	00ffffc4 	movi	r3,-1
    93f4:	10c00526 	beq	r2,r3,940c <_close_r+0x44>
    93f8:	dfc00217 	ldw	ra,8(sp)
    93fc:	dc400117 	ldw	r17,4(sp)
    9400:	dc000017 	ldw	r16,0(sp)
    9404:	dec00304 	addi	sp,sp,12
    9408:	f800283a 	ret
    940c:	80c00017 	ldw	r3,0(r16)
    9410:	183ff926 	beq	r3,zero,93f8 <_close_r+0x30>
    9414:	88c00015 	stw	r3,0(r17)
    9418:	003ff706 	br	93f8 <_close_r+0x30>

0000941c <_calloc_r>:
    941c:	defffe04 	addi	sp,sp,-8
    9420:	2805883a 	mov	r2,r5
    9424:	dc000015 	stw	r16,0(sp)
    9428:	300b883a 	mov	r5,r6
    942c:	2021883a 	mov	r16,r4
    9430:	1009883a 	mov	r4,r2
    9434:	dfc00115 	stw	ra,4(sp)
    9438:	000aa280 	call	aa28 <__mulsi3>
    943c:	100b883a 	mov	r5,r2
    9440:	8009883a 	mov	r4,r16
    9444:	00056b80 	call	56b8 <_malloc_r>
    9448:	10002926 	beq	r2,zero,94f0 <_calloc_r+0xd4>
    944c:	11bfff17 	ldw	r6,-4(r2)
    9450:	1021883a 	mov	r16,r2
    9454:	00bfff04 	movi	r2,-4
    9458:	308c703a 	and	r6,r6,r2
    945c:	00c00904 	movi	r3,36
    9460:	308d883a 	add	r6,r6,r2
    9464:	19801636 	bltu	r3,r6,94c0 <_calloc_r+0xa4>
    9468:	008004c4 	movi	r2,19
    946c:	11800b2e 	bgeu	r2,r6,949c <_calloc_r+0x80>
    9470:	80000015 	stw	zero,0(r16)
    9474:	80000115 	stw	zero,4(r16)
    9478:	008006c4 	movi	r2,27
    947c:	11801a2e 	bgeu	r2,r6,94e8 <_calloc_r+0xcc>
    9480:	80000215 	stw	zero,8(r16)
    9484:	80000315 	stw	zero,12(r16)
    9488:	30c0151e 	bne	r6,r3,94e0 <_calloc_r+0xc4>
    948c:	80000415 	stw	zero,16(r16)
    9490:	80800604 	addi	r2,r16,24
    9494:	80000515 	stw	zero,20(r16)
    9498:	00000106 	br	94a0 <_calloc_r+0x84>
    949c:	8005883a 	mov	r2,r16
    94a0:	10000015 	stw	zero,0(r2)
    94a4:	10000115 	stw	zero,4(r2)
    94a8:	10000215 	stw	zero,8(r2)
    94ac:	8005883a 	mov	r2,r16
    94b0:	dfc00117 	ldw	ra,4(sp)
    94b4:	dc000017 	ldw	r16,0(sp)
    94b8:	dec00204 	addi	sp,sp,8
    94bc:	f800283a 	ret
    94c0:	000b883a 	mov	r5,zero
    94c4:	8009883a 	mov	r4,r16
    94c8:	000624c0 	call	624c <memset>
    94cc:	8005883a 	mov	r2,r16
    94d0:	dfc00117 	ldw	ra,4(sp)
    94d4:	dc000017 	ldw	r16,0(sp)
    94d8:	dec00204 	addi	sp,sp,8
    94dc:	f800283a 	ret
    94e0:	80800404 	addi	r2,r16,16
    94e4:	003fee06 	br	94a0 <_calloc_r+0x84>
    94e8:	80800204 	addi	r2,r16,8
    94ec:	003fec06 	br	94a0 <_calloc_r+0x84>
    94f0:	0005883a 	mov	r2,zero
    94f4:	003fee06 	br	94b0 <_calloc_r+0x94>

000094f8 <_fclose_r>:
    94f8:	28003926 	beq	r5,zero,95e0 <_fclose_r+0xe8>
    94fc:	defffc04 	addi	sp,sp,-16
    9500:	dc400115 	stw	r17,4(sp)
    9504:	dc000015 	stw	r16,0(sp)
    9508:	dfc00315 	stw	ra,12(sp)
    950c:	dc800215 	stw	r18,8(sp)
    9510:	2023883a 	mov	r17,r4
    9514:	2821883a 	mov	r16,r5
    9518:	20000226 	beq	r4,zero,9524 <_fclose_r+0x2c>
    951c:	20800e17 	ldw	r2,56(r4)
    9520:	10002726 	beq	r2,zero,95c0 <_fclose_r+0xc8>
    9524:	8080030f 	ldh	r2,12(r16)
    9528:	1000071e 	bne	r2,zero,9548 <_fclose_r+0x50>
    952c:	0005883a 	mov	r2,zero
    9530:	dfc00317 	ldw	ra,12(sp)
    9534:	dc800217 	ldw	r18,8(sp)
    9538:	dc400117 	ldw	r17,4(sp)
    953c:	dc000017 	ldw	r16,0(sp)
    9540:	dec00404 	addi	sp,sp,16
    9544:	f800283a 	ret
    9548:	800b883a 	mov	r5,r16
    954c:	8809883a 	mov	r4,r17
    9550:	00043440 	call	4344 <__sflush_r>
    9554:	1025883a 	mov	r18,r2
    9558:	80800b17 	ldw	r2,44(r16)
    955c:	10000426 	beq	r2,zero,9570 <_fclose_r+0x78>
    9560:	81400717 	ldw	r5,28(r16)
    9564:	8809883a 	mov	r4,r17
    9568:	103ee83a 	callr	r2
    956c:	10001616 	blt	r2,zero,95c8 <_fclose_r+0xd0>
    9570:	8080030b 	ldhu	r2,12(r16)
    9574:	1080200c 	andi	r2,r2,128
    9578:	1000151e 	bne	r2,zero,95d0 <_fclose_r+0xd8>
    957c:	81400c17 	ldw	r5,48(r16)
    9580:	28000526 	beq	r5,zero,9598 <_fclose_r+0xa0>
    9584:	80801004 	addi	r2,r16,64
    9588:	28800226 	beq	r5,r2,9594 <_fclose_r+0x9c>
    958c:	8809883a 	mov	r4,r17
    9590:	0004ac00 	call	4ac0 <_free_r>
    9594:	80000c15 	stw	zero,48(r16)
    9598:	81401117 	ldw	r5,68(r16)
    959c:	28000326 	beq	r5,zero,95ac <_fclose_r+0xb4>
    95a0:	8809883a 	mov	r4,r17
    95a4:	0004ac00 	call	4ac0 <_free_r>
    95a8:	80001115 	stw	zero,68(r16)
    95ac:	000495c0 	call	495c <__sfp_lock_acquire>
    95b0:	8000030d 	sth	zero,12(r16)
    95b4:	00049600 	call	4960 <__sfp_lock_release>
    95b8:	9005883a 	mov	r2,r18
    95bc:	003fdc06 	br	9530 <_fclose_r+0x38>
    95c0:	000494c0 	call	494c <__sinit>
    95c4:	003fd706 	br	9524 <_fclose_r+0x2c>
    95c8:	04bfffc4 	movi	r18,-1
    95cc:	003fe806 	br	9570 <_fclose_r+0x78>
    95d0:	81400417 	ldw	r5,16(r16)
    95d4:	8809883a 	mov	r4,r17
    95d8:	0004ac00 	call	4ac0 <_free_r>
    95dc:	003fe706 	br	957c <_fclose_r+0x84>
    95e0:	0005883a 	mov	r2,zero
    95e4:	f800283a 	ret

000095e8 <fclose>:
    95e8:	00800074 	movhi	r2,1
    95ec:	10877d04 	addi	r2,r2,7668
    95f0:	200b883a 	mov	r5,r4
    95f4:	11000017 	ldw	r4,0(r2)
    95f8:	00094f81 	jmpi	94f8 <_fclose_r>

000095fc <__fputwc>:
    95fc:	defff804 	addi	sp,sp,-32
    9600:	dcc00415 	stw	r19,16(sp)
    9604:	dc800315 	stw	r18,12(sp)
    9608:	dc000115 	stw	r16,4(sp)
    960c:	dfc00715 	stw	ra,28(sp)
    9610:	dd400615 	stw	r21,24(sp)
    9614:	dd000515 	stw	r20,20(sp)
    9618:	dc400215 	stw	r17,8(sp)
    961c:	2027883a 	mov	r19,r4
    9620:	2825883a 	mov	r18,r5
    9624:	3021883a 	mov	r16,r6
    9628:	00054a80 	call	54a8 <__locale_mb_cur_max>
    962c:	00c00044 	movi	r3,1
    9630:	10c03e26 	beq	r2,r3,972c <__fputwc+0x130>
    9634:	81c01704 	addi	r7,r16,92
    9638:	900d883a 	mov	r6,r18
    963c:	d80b883a 	mov	r5,sp
    9640:	9809883a 	mov	r4,r19
    9644:	0009acc0 	call	9acc <_wcrtomb_r>
    9648:	1029883a 	mov	r20,r2
    964c:	00bfffc4 	movi	r2,-1
    9650:	a0802026 	beq	r20,r2,96d4 <__fputwc+0xd8>
    9654:	d9400003 	ldbu	r5,0(sp)
    9658:	a0001c26 	beq	r20,zero,96cc <__fputwc+0xd0>
    965c:	0023883a 	mov	r17,zero
    9660:	05400284 	movi	r21,10
    9664:	00000906 	br	968c <__fputwc+0x90>
    9668:	80800017 	ldw	r2,0(r16)
    966c:	11400005 	stb	r5,0(r2)
    9670:	80c00017 	ldw	r3,0(r16)
    9674:	18c00044 	addi	r3,r3,1
    9678:	80c00015 	stw	r3,0(r16)
    967c:	8c400044 	addi	r17,r17,1
    9680:	dc45883a 	add	r2,sp,r17
    9684:	8d00112e 	bgeu	r17,r20,96cc <__fputwc+0xd0>
    9688:	11400003 	ldbu	r5,0(r2)
    968c:	80c00217 	ldw	r3,8(r16)
    9690:	18ffffc4 	addi	r3,r3,-1
    9694:	80c00215 	stw	r3,8(r16)
    9698:	183ff30e 	bge	r3,zero,9668 <__fputwc+0x6c>
    969c:	80800617 	ldw	r2,24(r16)
    96a0:	18801916 	blt	r3,r2,9708 <__fputwc+0x10c>
    96a4:	80800017 	ldw	r2,0(r16)
    96a8:	11400005 	stb	r5,0(r2)
    96ac:	80800017 	ldw	r2,0(r16)
    96b0:	10c00003 	ldbu	r3,0(r2)
    96b4:	10800044 	addi	r2,r2,1
    96b8:	1d402326 	beq	r3,r21,9748 <__fputwc+0x14c>
    96bc:	80800015 	stw	r2,0(r16)
    96c0:	8c400044 	addi	r17,r17,1
    96c4:	dc45883a 	add	r2,sp,r17
    96c8:	8d3fef36 	bltu	r17,r20,9688 <__fputwc+0x8c>
    96cc:	9005883a 	mov	r2,r18
    96d0:	00000406 	br	96e4 <__fputwc+0xe8>
    96d4:	80c0030b 	ldhu	r3,12(r16)
    96d8:	a005883a 	mov	r2,r20
    96dc:	18c01014 	ori	r3,r3,64
    96e0:	80c0030d 	sth	r3,12(r16)
    96e4:	dfc00717 	ldw	ra,28(sp)
    96e8:	dd400617 	ldw	r21,24(sp)
    96ec:	dd000517 	ldw	r20,20(sp)
    96f0:	dcc00417 	ldw	r19,16(sp)
    96f4:	dc800317 	ldw	r18,12(sp)
    96f8:	dc400217 	ldw	r17,8(sp)
    96fc:	dc000117 	ldw	r16,4(sp)
    9700:	dec00804 	addi	sp,sp,32
    9704:	f800283a 	ret
    9708:	800d883a 	mov	r6,r16
    970c:	29403fcc 	andi	r5,r5,255
    9710:	9809883a 	mov	r4,r19
    9714:	00099740 	call	9974 <__swbuf_r>
    9718:	10bfffe0 	cmpeqi	r2,r2,-1
    971c:	10803fcc 	andi	r2,r2,255
    9720:	103fd626 	beq	r2,zero,967c <__fputwc+0x80>
    9724:	00bfffc4 	movi	r2,-1
    9728:	003fee06 	br	96e4 <__fputwc+0xe8>
    972c:	90ffffc4 	addi	r3,r18,-1
    9730:	01003f84 	movi	r4,254
    9734:	20ffbf36 	bltu	r4,r3,9634 <__fputwc+0x38>
    9738:	900b883a 	mov	r5,r18
    973c:	dc800005 	stb	r18,0(sp)
    9740:	1029883a 	mov	r20,r2
    9744:	003fc506 	br	965c <__fputwc+0x60>
    9748:	800d883a 	mov	r6,r16
    974c:	a80b883a 	mov	r5,r21
    9750:	9809883a 	mov	r4,r19
    9754:	00099740 	call	9974 <__swbuf_r>
    9758:	10bfffe0 	cmpeqi	r2,r2,-1
    975c:	003fef06 	br	971c <__fputwc+0x120>

00009760 <_fputwc_r>:
    9760:	3080030b 	ldhu	r2,12(r6)
    9764:	10c8000c 	andi	r3,r2,8192
    9768:	1800051e 	bne	r3,zero,9780 <_fputwc_r+0x20>
    976c:	30c01917 	ldw	r3,100(r6)
    9770:	10880014 	ori	r2,r2,8192
    9774:	3080030d 	sth	r2,12(r6)
    9778:	18880014 	ori	r2,r3,8192
    977c:	30801915 	stw	r2,100(r6)
    9780:	00095fc1 	jmpi	95fc <__fputwc>

00009784 <fputwc>:
    9784:	00800074 	movhi	r2,1
    9788:	defffc04 	addi	sp,sp,-16
    978c:	10877d04 	addi	r2,r2,7668
    9790:	dc000115 	stw	r16,4(sp)
    9794:	14000017 	ldw	r16,0(r2)
    9798:	dc400215 	stw	r17,8(sp)
    979c:	dfc00315 	stw	ra,12(sp)
    97a0:	2023883a 	mov	r17,r4
    97a4:	80000226 	beq	r16,zero,97b0 <fputwc+0x2c>
    97a8:	80800e17 	ldw	r2,56(r16)
    97ac:	10001026 	beq	r2,zero,97f0 <fputwc+0x6c>
    97b0:	2880030b 	ldhu	r2,12(r5)
    97b4:	10c8000c 	andi	r3,r2,8192
    97b8:	1800051e 	bne	r3,zero,97d0 <fputwc+0x4c>
    97bc:	28c01917 	ldw	r3,100(r5)
    97c0:	10880014 	ori	r2,r2,8192
    97c4:	2880030d 	sth	r2,12(r5)
    97c8:	18880014 	ori	r2,r3,8192
    97cc:	28801915 	stw	r2,100(r5)
    97d0:	280d883a 	mov	r6,r5
    97d4:	8009883a 	mov	r4,r16
    97d8:	880b883a 	mov	r5,r17
    97dc:	dfc00317 	ldw	ra,12(sp)
    97e0:	dc400217 	ldw	r17,8(sp)
    97e4:	dc000117 	ldw	r16,4(sp)
    97e8:	dec00404 	addi	sp,sp,16
    97ec:	00095fc1 	jmpi	95fc <__fputwc>
    97f0:	8009883a 	mov	r4,r16
    97f4:	d9400015 	stw	r5,0(sp)
    97f8:	000494c0 	call	494c <__sinit>
    97fc:	d9400017 	ldw	r5,0(sp)
    9800:	003feb06 	br	97b0 <fputwc+0x2c>

00009804 <_fstat_r>:
    9804:	defffd04 	addi	sp,sp,-12
    9808:	2805883a 	mov	r2,r5
    980c:	dc000015 	stw	r16,0(sp)
    9810:	04000074 	movhi	r16,1
    9814:	dc400115 	stw	r17,4(sp)
    9818:	840e4d04 	addi	r16,r16,14644
    981c:	2023883a 	mov	r17,r4
    9820:	300b883a 	mov	r5,r6
    9824:	1009883a 	mov	r4,r2
    9828:	dfc00215 	stw	ra,8(sp)
    982c:	80000015 	stw	zero,0(r16)
    9830:	000d4700 	call	d470 <fstat>
    9834:	00ffffc4 	movi	r3,-1
    9838:	10c00526 	beq	r2,r3,9850 <_fstat_r+0x4c>
    983c:	dfc00217 	ldw	ra,8(sp)
    9840:	dc400117 	ldw	r17,4(sp)
    9844:	dc000017 	ldw	r16,0(sp)
    9848:	dec00304 	addi	sp,sp,12
    984c:	f800283a 	ret
    9850:	80c00017 	ldw	r3,0(r16)
    9854:	183ff926 	beq	r3,zero,983c <_fstat_r+0x38>
    9858:	88c00015 	stw	r3,0(r17)
    985c:	003ff706 	br	983c <_fstat_r+0x38>

00009860 <_isatty_r>:
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dc000015 	stw	r16,0(sp)
    9868:	04000074 	movhi	r16,1
    986c:	dc400115 	stw	r17,4(sp)
    9870:	840e4d04 	addi	r16,r16,14644
    9874:	2023883a 	mov	r17,r4
    9878:	2809883a 	mov	r4,r5
    987c:	dfc00215 	stw	ra,8(sp)
    9880:	80000015 	stw	zero,0(r16)
    9884:	000d8040 	call	d804 <isatty>
    9888:	00ffffc4 	movi	r3,-1
    988c:	10c00526 	beq	r2,r3,98a4 <_isatty_r+0x44>
    9890:	dfc00217 	ldw	ra,8(sp)
    9894:	dc400117 	ldw	r17,4(sp)
    9898:	dc000017 	ldw	r16,0(sp)
    989c:	dec00304 	addi	sp,sp,12
    98a0:	f800283a 	ret
    98a4:	80c00017 	ldw	r3,0(r16)
    98a8:	183ff926 	beq	r3,zero,9890 <_isatty_r+0x30>
    98ac:	88c00015 	stw	r3,0(r17)
    98b0:	003ff706 	br	9890 <_isatty_r+0x30>

000098b4 <_lseek_r>:
    98b4:	defffd04 	addi	sp,sp,-12
    98b8:	2805883a 	mov	r2,r5
    98bc:	dc000015 	stw	r16,0(sp)
    98c0:	04000074 	movhi	r16,1
    98c4:	dc400115 	stw	r17,4(sp)
    98c8:	300b883a 	mov	r5,r6
    98cc:	840e4d04 	addi	r16,r16,14644
    98d0:	2023883a 	mov	r17,r4
    98d4:	380d883a 	mov	r6,r7
    98d8:	1009883a 	mov	r4,r2
    98dc:	dfc00215 	stw	ra,8(sp)
    98e0:	80000015 	stw	zero,0(r16)
    98e4:	000d9d80 	call	d9d8 <lseek>
    98e8:	00ffffc4 	movi	r3,-1
    98ec:	10c00526 	beq	r2,r3,9904 <_lseek_r+0x50>
    98f0:	dfc00217 	ldw	ra,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	80c00017 	ldw	r3,0(r16)
    9908:	183ff926 	beq	r3,zero,98f0 <_lseek_r+0x3c>
    990c:	88c00015 	stw	r3,0(r17)
    9910:	003ff706 	br	98f0 <_lseek_r+0x3c>

00009914 <_read_r>:
    9914:	defffd04 	addi	sp,sp,-12
    9918:	2805883a 	mov	r2,r5
    991c:	dc000015 	stw	r16,0(sp)
    9920:	04000074 	movhi	r16,1
    9924:	dc400115 	stw	r17,4(sp)
    9928:	300b883a 	mov	r5,r6
    992c:	840e4d04 	addi	r16,r16,14644
    9930:	2023883a 	mov	r17,r4
    9934:	380d883a 	mov	r6,r7
    9938:	1009883a 	mov	r4,r2
    993c:	dfc00215 	stw	ra,8(sp)
    9940:	80000015 	stw	zero,0(r16)
    9944:	000de1c0 	call	de1c <read>
    9948:	00ffffc4 	movi	r3,-1
    994c:	10c00526 	beq	r2,r3,9964 <_read_r+0x50>
    9950:	dfc00217 	ldw	ra,8(sp)
    9954:	dc400117 	ldw	r17,4(sp)
    9958:	dc000017 	ldw	r16,0(sp)
    995c:	dec00304 	addi	sp,sp,12
    9960:	f800283a 	ret
    9964:	80c00017 	ldw	r3,0(r16)
    9968:	183ff926 	beq	r3,zero,9950 <_read_r+0x3c>
    996c:	88c00015 	stw	r3,0(r17)
    9970:	003ff706 	br	9950 <_read_r+0x3c>

00009974 <__swbuf_r>:
    9974:	defffb04 	addi	sp,sp,-20
    9978:	dcc00315 	stw	r19,12(sp)
    997c:	dc800215 	stw	r18,8(sp)
    9980:	dc000015 	stw	r16,0(sp)
    9984:	dfc00415 	stw	ra,16(sp)
    9988:	dc400115 	stw	r17,4(sp)
    998c:	2025883a 	mov	r18,r4
    9990:	2827883a 	mov	r19,r5
    9994:	3021883a 	mov	r16,r6
    9998:	20000226 	beq	r4,zero,99a4 <__swbuf_r+0x30>
    999c:	20800e17 	ldw	r2,56(r4)
    99a0:	10004226 	beq	r2,zero,9aac <__swbuf_r+0x138>
    99a4:	80800617 	ldw	r2,24(r16)
    99a8:	8100030b 	ldhu	r4,12(r16)
    99ac:	80800215 	stw	r2,8(r16)
    99b0:	2080020c 	andi	r2,r4,8
    99b4:	10003626 	beq	r2,zero,9a90 <__swbuf_r+0x11c>
    99b8:	80c00417 	ldw	r3,16(r16)
    99bc:	18003426 	beq	r3,zero,9a90 <__swbuf_r+0x11c>
    99c0:	2088000c 	andi	r2,r4,8192
    99c4:	9c403fcc 	andi	r17,r19,255
    99c8:	10001a26 	beq	r2,zero,9a34 <__swbuf_r+0xc0>
    99cc:	80800017 	ldw	r2,0(r16)
    99d0:	81000517 	ldw	r4,20(r16)
    99d4:	10c7c83a 	sub	r3,r2,r3
    99d8:	1900200e 	bge	r3,r4,9a5c <__swbuf_r+0xe8>
    99dc:	18c00044 	addi	r3,r3,1
    99e0:	81000217 	ldw	r4,8(r16)
    99e4:	11400044 	addi	r5,r2,1
    99e8:	81400015 	stw	r5,0(r16)
    99ec:	213fffc4 	addi	r4,r4,-1
    99f0:	81000215 	stw	r4,8(r16)
    99f4:	14c00005 	stb	r19,0(r2)
    99f8:	80800517 	ldw	r2,20(r16)
    99fc:	10c01e26 	beq	r2,r3,9a78 <__swbuf_r+0x104>
    9a00:	8080030b 	ldhu	r2,12(r16)
    9a04:	1080004c 	andi	r2,r2,1
    9a08:	10000226 	beq	r2,zero,9a14 <__swbuf_r+0xa0>
    9a0c:	00800284 	movi	r2,10
    9a10:	88801926 	beq	r17,r2,9a78 <__swbuf_r+0x104>
    9a14:	8805883a 	mov	r2,r17
    9a18:	dfc00417 	ldw	ra,16(sp)
    9a1c:	dcc00317 	ldw	r19,12(sp)
    9a20:	dc800217 	ldw	r18,8(sp)
    9a24:	dc400117 	ldw	r17,4(sp)
    9a28:	dc000017 	ldw	r16,0(sp)
    9a2c:	dec00504 	addi	sp,sp,20
    9a30:	f800283a 	ret
    9a34:	81401917 	ldw	r5,100(r16)
    9a38:	00b7ffc4 	movi	r2,-8193
    9a3c:	21080014 	ori	r4,r4,8192
    9a40:	2884703a 	and	r2,r5,r2
    9a44:	80801915 	stw	r2,100(r16)
    9a48:	80800017 	ldw	r2,0(r16)
    9a4c:	8100030d 	sth	r4,12(r16)
    9a50:	81000517 	ldw	r4,20(r16)
    9a54:	10c7c83a 	sub	r3,r2,r3
    9a58:	193fe016 	blt	r3,r4,99dc <__swbuf_r+0x68>
    9a5c:	800b883a 	mov	r5,r16
    9a60:	9009883a 	mov	r4,r18
    9a64:	00045600 	call	4560 <_fflush_r>
    9a68:	1000071e 	bne	r2,zero,9a88 <__swbuf_r+0x114>
    9a6c:	80800017 	ldw	r2,0(r16)
    9a70:	00c00044 	movi	r3,1
    9a74:	003fda06 	br	99e0 <__swbuf_r+0x6c>
    9a78:	800b883a 	mov	r5,r16
    9a7c:	9009883a 	mov	r4,r18
    9a80:	00045600 	call	4560 <_fflush_r>
    9a84:	103fe326 	beq	r2,zero,9a14 <__swbuf_r+0xa0>
    9a88:	00bfffc4 	movi	r2,-1
    9a8c:	003fe206 	br	9a18 <__swbuf_r+0xa4>
    9a90:	800b883a 	mov	r5,r16
    9a94:	9009883a 	mov	r4,r18
    9a98:	00029400 	call	2940 <__swsetup_r>
    9a9c:	103ffa1e 	bne	r2,zero,9a88 <__swbuf_r+0x114>
    9aa0:	8100030b 	ldhu	r4,12(r16)
    9aa4:	80c00417 	ldw	r3,16(r16)
    9aa8:	003fc506 	br	99c0 <__swbuf_r+0x4c>
    9aac:	000494c0 	call	494c <__sinit>
    9ab0:	003fbc06 	br	99a4 <__swbuf_r+0x30>

00009ab4 <__swbuf>:
    9ab4:	00800074 	movhi	r2,1
    9ab8:	10877d04 	addi	r2,r2,7668
    9abc:	280d883a 	mov	r6,r5
    9ac0:	200b883a 	mov	r5,r4
    9ac4:	11000017 	ldw	r4,0(r2)
    9ac8:	00099741 	jmpi	9974 <__swbuf_r>

00009acc <_wcrtomb_r>:
    9acc:	defff604 	addi	sp,sp,-40
    9ad0:	00800074 	movhi	r2,1
    9ad4:	dc800815 	stw	r18,32(sp)
    9ad8:	dc400715 	stw	r17,28(sp)
    9adc:	dc000615 	stw	r16,24(sp)
    9ae0:	10878104 	addi	r2,r2,7684
    9ae4:	dfc00915 	stw	ra,36(sp)
    9ae8:	2021883a 	mov	r16,r4
    9aec:	3823883a 	mov	r17,r7
    9af0:	14800017 	ldw	r18,0(r2)
    9af4:	28001426 	beq	r5,zero,9b48 <_wcrtomb_r+0x7c>
    9af8:	d9400415 	stw	r5,16(sp)
    9afc:	d9800515 	stw	r6,20(sp)
    9b00:	000549c0 	call	549c <__locale_charset>
    9b04:	d9800517 	ldw	r6,20(sp)
    9b08:	d9400417 	ldw	r5,16(sp)
    9b0c:	100f883a 	mov	r7,r2
    9b10:	dc400015 	stw	r17,0(sp)
    9b14:	8009883a 	mov	r4,r16
    9b18:	903ee83a 	callr	r18
    9b1c:	00ffffc4 	movi	r3,-1
    9b20:	10c0031e 	bne	r2,r3,9b30 <_wcrtomb_r+0x64>
    9b24:	88000015 	stw	zero,0(r17)
    9b28:	00c02284 	movi	r3,138
    9b2c:	80c00015 	stw	r3,0(r16)
    9b30:	dfc00917 	ldw	ra,36(sp)
    9b34:	dc800817 	ldw	r18,32(sp)
    9b38:	dc400717 	ldw	r17,28(sp)
    9b3c:	dc000617 	ldw	r16,24(sp)
    9b40:	dec00a04 	addi	sp,sp,40
    9b44:	f800283a 	ret
    9b48:	000549c0 	call	549c <__locale_charset>
    9b4c:	100f883a 	mov	r7,r2
    9b50:	dc400015 	stw	r17,0(sp)
    9b54:	000d883a 	mov	r6,zero
    9b58:	d9400104 	addi	r5,sp,4
    9b5c:	8009883a 	mov	r4,r16
    9b60:	903ee83a 	callr	r18
    9b64:	003fed06 	br	9b1c <_wcrtomb_r+0x50>

00009b68 <wcrtomb>:
    9b68:	defff604 	addi	sp,sp,-40
    9b6c:	00800074 	movhi	r2,1
    9b70:	dc800615 	stw	r18,24(sp)
    9b74:	dc400515 	stw	r17,20(sp)
    9b78:	10877d04 	addi	r2,r2,7668
    9b7c:	dfc00915 	stw	ra,36(sp)
    9b80:	dd000815 	stw	r20,32(sp)
    9b84:	dcc00715 	stw	r19,28(sp)
    9b88:	dc000415 	stw	r16,16(sp)
    9b8c:	3025883a 	mov	r18,r6
    9b90:	14400017 	ldw	r17,0(r2)
    9b94:	20001926 	beq	r4,zero,9bfc <wcrtomb+0x94>
    9b98:	00800074 	movhi	r2,1
    9b9c:	10878104 	addi	r2,r2,7684
    9ba0:	15000017 	ldw	r20,0(r2)
    9ba4:	2021883a 	mov	r16,r4
    9ba8:	2827883a 	mov	r19,r5
    9bac:	000549c0 	call	549c <__locale_charset>
    9bb0:	100f883a 	mov	r7,r2
    9bb4:	dc800015 	stw	r18,0(sp)
    9bb8:	980d883a 	mov	r6,r19
    9bbc:	800b883a 	mov	r5,r16
    9bc0:	8809883a 	mov	r4,r17
    9bc4:	a03ee83a 	callr	r20
    9bc8:	00ffffc4 	movi	r3,-1
    9bcc:	10c0031e 	bne	r2,r3,9bdc <wcrtomb+0x74>
    9bd0:	90000015 	stw	zero,0(r18)
    9bd4:	00c02284 	movi	r3,138
    9bd8:	88c00015 	stw	r3,0(r17)
    9bdc:	dfc00917 	ldw	ra,36(sp)
    9be0:	dd000817 	ldw	r20,32(sp)
    9be4:	dcc00717 	ldw	r19,28(sp)
    9be8:	dc800617 	ldw	r18,24(sp)
    9bec:	dc400517 	ldw	r17,20(sp)
    9bf0:	dc000417 	ldw	r16,16(sp)
    9bf4:	dec00a04 	addi	sp,sp,40
    9bf8:	f800283a 	ret
    9bfc:	00800074 	movhi	r2,1
    9c00:	10878104 	addi	r2,r2,7684
    9c04:	14000017 	ldw	r16,0(r2)
    9c08:	000549c0 	call	549c <__locale_charset>
    9c0c:	100f883a 	mov	r7,r2
    9c10:	dc800015 	stw	r18,0(sp)
    9c14:	000d883a 	mov	r6,zero
    9c18:	d9400104 	addi	r5,sp,4
    9c1c:	8809883a 	mov	r4,r17
    9c20:	803ee83a 	callr	r16
    9c24:	003fe806 	br	9bc8 <wcrtomb+0x60>

00009c28 <__ascii_wctomb>:
    9c28:	28000526 	beq	r5,zero,9c40 <__ascii_wctomb+0x18>
    9c2c:	00803fc4 	movi	r2,255
    9c30:	11800536 	bltu	r2,r6,9c48 <__ascii_wctomb+0x20>
    9c34:	29800005 	stb	r6,0(r5)
    9c38:	00800044 	movi	r2,1
    9c3c:	f800283a 	ret
    9c40:	0005883a 	mov	r2,zero
    9c44:	f800283a 	ret
    9c48:	00802284 	movi	r2,138
    9c4c:	20800015 	stw	r2,0(r4)
    9c50:	00bfffc4 	movi	r2,-1
    9c54:	f800283a 	ret

00009c58 <_wctomb_r>:
    9c58:	00800074 	movhi	r2,1
    9c5c:	defff904 	addi	sp,sp,-28
    9c60:	10878104 	addi	r2,r2,7684
    9c64:	dfc00615 	stw	ra,24(sp)
    9c68:	dc400515 	stw	r17,20(sp)
    9c6c:	dc000415 	stw	r16,16(sp)
    9c70:	3823883a 	mov	r17,r7
    9c74:	14000017 	ldw	r16,0(r2)
    9c78:	d9000115 	stw	r4,4(sp)
    9c7c:	d9400215 	stw	r5,8(sp)
    9c80:	d9800315 	stw	r6,12(sp)
    9c84:	000549c0 	call	549c <__locale_charset>
    9c88:	d9800317 	ldw	r6,12(sp)
    9c8c:	d9400217 	ldw	r5,8(sp)
    9c90:	d9000117 	ldw	r4,4(sp)
    9c94:	100f883a 	mov	r7,r2
    9c98:	dc400015 	stw	r17,0(sp)
    9c9c:	803ee83a 	callr	r16
    9ca0:	dfc00617 	ldw	ra,24(sp)
    9ca4:	dc400517 	ldw	r17,20(sp)
    9ca8:	dc000417 	ldw	r16,16(sp)
    9cac:	dec00704 	addi	sp,sp,28
    9cb0:	f800283a 	ret

00009cb4 <__udivdi3>:
    9cb4:	defff404 	addi	sp,sp,-48
    9cb8:	dcc00515 	stw	r19,20(sp)
    9cbc:	dc000215 	stw	r16,8(sp)
    9cc0:	dfc00b15 	stw	ra,44(sp)
    9cc4:	df000a15 	stw	fp,40(sp)
    9cc8:	ddc00915 	stw	r23,36(sp)
    9ccc:	dd800815 	stw	r22,32(sp)
    9cd0:	dd400715 	stw	r21,28(sp)
    9cd4:	dd000615 	stw	r20,24(sp)
    9cd8:	dc800415 	stw	r18,16(sp)
    9cdc:	dc400315 	stw	r17,12(sp)
    9ce0:	2027883a 	mov	r19,r4
    9ce4:	2821883a 	mov	r16,r5
    9ce8:	3800461e 	bne	r7,zero,9e04 <__udivdi3+0x150>
    9cec:	3023883a 	mov	r17,r6
    9cf0:	2025883a 	mov	r18,r4
    9cf4:	2980572e 	bgeu	r5,r6,9e54 <__udivdi3+0x1a0>
    9cf8:	00bfffd4 	movui	r2,65535
    9cfc:	282d883a 	mov	r22,r5
    9d00:	1180b236 	bltu	r2,r6,9fcc <__udivdi3+0x318>
    9d04:	00803fc4 	movi	r2,255
    9d08:	1185803a 	cmpltu	r2,r2,r6
    9d0c:	100490fa 	slli	r2,r2,3
    9d10:	3086d83a 	srl	r3,r6,r2
    9d14:	01000074 	movhi	r4,1
    9d18:	21008404 	addi	r4,r4,528
    9d1c:	20c7883a 	add	r3,r4,r3
    9d20:	18c00003 	ldbu	r3,0(r3)
    9d24:	1885883a 	add	r2,r3,r2
    9d28:	00c00804 	movi	r3,32
    9d2c:	1887c83a 	sub	r3,r3,r2
    9d30:	18000526 	beq	r3,zero,9d48 <__udivdi3+0x94>
    9d34:	80e0983a 	sll	r16,r16,r3
    9d38:	9884d83a 	srl	r2,r19,r2
    9d3c:	30e2983a 	sll	r17,r6,r3
    9d40:	98e4983a 	sll	r18,r19,r3
    9d44:	142cb03a 	or	r22,r2,r16
    9d48:	882ad43a 	srli	r21,r17,16
    9d4c:	b009883a 	mov	r4,r22
    9d50:	8d3fffcc 	andi	r20,r17,65535
    9d54:	a80b883a 	mov	r5,r21
    9d58:	000a9d00 	call	a9d0 <__umodsi3>
    9d5c:	b009883a 	mov	r4,r22
    9d60:	a80b883a 	mov	r5,r21
    9d64:	1027883a 	mov	r19,r2
    9d68:	000a96c0 	call	a96c <__udivsi3>
    9d6c:	100b883a 	mov	r5,r2
    9d70:	a009883a 	mov	r4,r20
    9d74:	102d883a 	mov	r22,r2
    9d78:	000aa280 	call	aa28 <__mulsi3>
    9d7c:	9826943a 	slli	r19,r19,16
    9d80:	9006d43a 	srli	r3,r18,16
    9d84:	1cc6b03a 	or	r3,r3,r19
    9d88:	1880052e 	bgeu	r3,r2,9da0 <__udivdi3+0xec>
    9d8c:	1c47883a 	add	r3,r3,r17
    9d90:	b13fffc4 	addi	r4,r22,-1
    9d94:	1c400136 	bltu	r3,r17,9d9c <__udivdi3+0xe8>
    9d98:	18814236 	bltu	r3,r2,a2a4 <__udivdi3+0x5f0>
    9d9c:	202d883a 	mov	r22,r4
    9da0:	18a1c83a 	sub	r16,r3,r2
    9da4:	8009883a 	mov	r4,r16
    9da8:	a80b883a 	mov	r5,r21
    9dac:	000a9d00 	call	a9d0 <__umodsi3>
    9db0:	1027883a 	mov	r19,r2
    9db4:	8009883a 	mov	r4,r16
    9db8:	a80b883a 	mov	r5,r21
    9dbc:	9826943a 	slli	r19,r19,16
    9dc0:	000a96c0 	call	a96c <__udivsi3>
    9dc4:	100b883a 	mov	r5,r2
    9dc8:	a009883a 	mov	r4,r20
    9dcc:	94bfffcc 	andi	r18,r18,65535
    9dd0:	1021883a 	mov	r16,r2
    9dd4:	94e4b03a 	or	r18,r18,r19
    9dd8:	000aa280 	call	aa28 <__mulsi3>
    9ddc:	9080052e 	bgeu	r18,r2,9df4 <__udivdi3+0x140>
    9de0:	8ca5883a 	add	r18,r17,r18
    9de4:	80ffffc4 	addi	r3,r16,-1
    9de8:	94410c36 	bltu	r18,r17,a21c <__udivdi3+0x568>
    9dec:	90810b2e 	bgeu	r18,r2,a21c <__udivdi3+0x568>
    9df0:	843fff84 	addi	r16,r16,-2
    9df4:	b004943a 	slli	r2,r22,16
    9df8:	0007883a 	mov	r3,zero
    9dfc:	1404b03a 	or	r2,r2,r16
    9e00:	00005e06 	br	9f7c <__udivdi3+0x2c8>
    9e04:	29c05b36 	bltu	r5,r7,9f74 <__udivdi3+0x2c0>
    9e08:	00bfffd4 	movui	r2,65535
    9e0c:	11c0672e 	bgeu	r2,r7,9fac <__udivdi3+0x2f8>
    9e10:	00804034 	movhi	r2,256
    9e14:	10bfffc4 	addi	r2,r2,-1
    9e18:	11c10a36 	bltu	r2,r7,a244 <__udivdi3+0x590>
    9e1c:	00800404 	movi	r2,16
    9e20:	3886d83a 	srl	r3,r7,r2
    9e24:	01000074 	movhi	r4,1
    9e28:	21008404 	addi	r4,r4,528
    9e2c:	20c7883a 	add	r3,r4,r3
    9e30:	18c00003 	ldbu	r3,0(r3)
    9e34:	05c00804 	movi	r23,32
    9e38:	1885883a 	add	r2,r3,r2
    9e3c:	b8afc83a 	sub	r23,r23,r2
    9e40:	b800671e 	bne	r23,zero,9fe0 <__udivdi3+0x32c>
    9e44:	3c010536 	bltu	r7,r16,a25c <__udivdi3+0x5a8>
    9e48:	9985403a 	cmpgeu	r2,r19,r6
    9e4c:	0007883a 	mov	r3,zero
    9e50:	00004a06 	br	9f7c <__udivdi3+0x2c8>
    9e54:	3000041e 	bne	r6,zero,9e68 <__udivdi3+0x1b4>
    9e58:	000b883a 	mov	r5,zero
    9e5c:	01000044 	movi	r4,1
    9e60:	000a96c0 	call	a96c <__udivsi3>
    9e64:	1023883a 	mov	r17,r2
    9e68:	00bfffd4 	movui	r2,65535
    9e6c:	1440532e 	bgeu	r2,r17,9fbc <__udivdi3+0x308>
    9e70:	00804034 	movhi	r2,256
    9e74:	10bfffc4 	addi	r2,r2,-1
    9e78:	1440f436 	bltu	r2,r17,a24c <__udivdi3+0x598>
    9e7c:	00800404 	movi	r2,16
    9e80:	8886d83a 	srl	r3,r17,r2
    9e84:	01000074 	movhi	r4,1
    9e88:	21008404 	addi	r4,r4,528
    9e8c:	20c7883a 	add	r3,r4,r3
    9e90:	18c00003 	ldbu	r3,0(r3)
    9e94:	1885883a 	add	r2,r3,r2
    9e98:	00c00804 	movi	r3,32
    9e9c:	1887c83a 	sub	r3,r3,r2
    9ea0:	1800a51e 	bne	r3,zero,a138 <__udivdi3+0x484>
    9ea4:	882ad43a 	srli	r21,r17,16
    9ea8:	8461c83a 	sub	r16,r16,r17
    9eac:	8d3fffcc 	andi	r20,r17,65535
    9eb0:	00c00044 	movi	r3,1
    9eb4:	a80b883a 	mov	r5,r21
    9eb8:	8009883a 	mov	r4,r16
    9ebc:	d8c00115 	stw	r3,4(sp)
    9ec0:	000a9d00 	call	a9d0 <__umodsi3>
    9ec4:	a80b883a 	mov	r5,r21
    9ec8:	8009883a 	mov	r4,r16
    9ecc:	1027883a 	mov	r19,r2
    9ed0:	000a96c0 	call	a96c <__udivsi3>
    9ed4:	a00b883a 	mov	r5,r20
    9ed8:	1009883a 	mov	r4,r2
    9edc:	102d883a 	mov	r22,r2
    9ee0:	000aa280 	call	aa28 <__mulsi3>
    9ee4:	9826943a 	slli	r19,r19,16
    9ee8:	900ed43a 	srli	r7,r18,16
    9eec:	d8c00117 	ldw	r3,4(sp)
    9ef0:	3cceb03a 	or	r7,r7,r19
    9ef4:	3880052e 	bgeu	r7,r2,9f0c <__udivdi3+0x258>
    9ef8:	3c4f883a 	add	r7,r7,r17
    9efc:	b13fffc4 	addi	r4,r22,-1
    9f00:	3c400136 	bltu	r7,r17,9f08 <__udivdi3+0x254>
    9f04:	3880e436 	bltu	r7,r2,a298 <__udivdi3+0x5e4>
    9f08:	202d883a 	mov	r22,r4
    9f0c:	38a1c83a 	sub	r16,r7,r2
    9f10:	8009883a 	mov	r4,r16
    9f14:	a80b883a 	mov	r5,r21
    9f18:	d8c00115 	stw	r3,4(sp)
    9f1c:	000a9d00 	call	a9d0 <__umodsi3>
    9f20:	1027883a 	mov	r19,r2
    9f24:	8009883a 	mov	r4,r16
    9f28:	a80b883a 	mov	r5,r21
    9f2c:	9826943a 	slli	r19,r19,16
    9f30:	000a96c0 	call	a96c <__udivsi3>
    9f34:	a00b883a 	mov	r5,r20
    9f38:	1009883a 	mov	r4,r2
    9f3c:	94bfffcc 	andi	r18,r18,65535
    9f40:	1021883a 	mov	r16,r2
    9f44:	94e4b03a 	or	r18,r18,r19
    9f48:	000aa280 	call	aa28 <__mulsi3>
    9f4c:	d8c00117 	ldw	r3,4(sp)
    9f50:	9080052e 	bgeu	r18,r2,9f68 <__udivdi3+0x2b4>
    9f54:	8ca5883a 	add	r18,r17,r18
    9f58:	813fffc4 	addi	r4,r16,-1
    9f5c:	9440ad36 	bltu	r18,r17,a214 <__udivdi3+0x560>
    9f60:	9080ac2e 	bgeu	r18,r2,a214 <__udivdi3+0x560>
    9f64:	843fff84 	addi	r16,r16,-2
    9f68:	b004943a 	slli	r2,r22,16
    9f6c:	1404b03a 	or	r2,r2,r16
    9f70:	00000206 	br	9f7c <__udivdi3+0x2c8>
    9f74:	0007883a 	mov	r3,zero
    9f78:	0005883a 	mov	r2,zero
    9f7c:	dfc00b17 	ldw	ra,44(sp)
    9f80:	df000a17 	ldw	fp,40(sp)
    9f84:	ddc00917 	ldw	r23,36(sp)
    9f88:	dd800817 	ldw	r22,32(sp)
    9f8c:	dd400717 	ldw	r21,28(sp)
    9f90:	dd000617 	ldw	r20,24(sp)
    9f94:	dcc00517 	ldw	r19,20(sp)
    9f98:	dc800417 	ldw	r18,16(sp)
    9f9c:	dc400317 	ldw	r17,12(sp)
    9fa0:	dc000217 	ldw	r16,8(sp)
    9fa4:	dec00c04 	addi	sp,sp,48
    9fa8:	f800283a 	ret
    9fac:	00803fc4 	movi	r2,255
    9fb0:	11c5803a 	cmpltu	r2,r2,r7
    9fb4:	100490fa 	slli	r2,r2,3
    9fb8:	003f9906 	br	9e20 <__udivdi3+0x16c>
    9fbc:	00803fc4 	movi	r2,255
    9fc0:	1445803a 	cmpltu	r2,r2,r17
    9fc4:	100490fa 	slli	r2,r2,3
    9fc8:	003fad06 	br	9e80 <__udivdi3+0x1cc>
    9fcc:	00804034 	movhi	r2,256
    9fd0:	10bfffc4 	addi	r2,r2,-1
    9fd4:	11809f36 	bltu	r2,r6,a254 <__udivdi3+0x5a0>
    9fd8:	00800404 	movi	r2,16
    9fdc:	003f4c06 	br	9d10 <__udivdi3+0x5c>
    9fe0:	3dce983a 	sll	r7,r7,r23
    9fe4:	30b8d83a 	srl	fp,r6,r2
    9fe8:	80a2d83a 	srl	r17,r16,r2
    9fec:	35cc983a 	sll	r6,r6,r23
    9ff0:	3f38b03a 	or	fp,r7,fp
    9ff4:	e024d43a 	srli	r18,fp,16
    9ff8:	9884d83a 	srl	r2,r19,r2
    9ffc:	85e0983a 	sll	r16,r16,r23
    a000:	8809883a 	mov	r4,r17
    a004:	900b883a 	mov	r5,r18
    a008:	d9800015 	stw	r6,0(sp)
    a00c:	1420b03a 	or	r16,r2,r16
    a010:	000a9d00 	call	a9d0 <__umodsi3>
    a014:	900b883a 	mov	r5,r18
    a018:	8809883a 	mov	r4,r17
    a01c:	1029883a 	mov	r20,r2
    a020:	e5bfffcc 	andi	r22,fp,65535
    a024:	000a96c0 	call	a96c <__udivsi3>
    a028:	100b883a 	mov	r5,r2
    a02c:	b009883a 	mov	r4,r22
    a030:	102b883a 	mov	r21,r2
    a034:	000aa280 	call	aa28 <__mulsi3>
    a038:	a028943a 	slli	r20,r20,16
    a03c:	8006d43a 	srli	r3,r16,16
    a040:	1d06b03a 	or	r3,r3,r20
    a044:	1880042e 	bgeu	r3,r2,a058 <__udivdi3+0x3a4>
    a048:	1f07883a 	add	r3,r3,fp
    a04c:	a93fffc4 	addi	r4,r21,-1
    a050:	1f00892e 	bgeu	r3,fp,a278 <__udivdi3+0x5c4>
    a054:	202b883a 	mov	r21,r4
    a058:	18a3c83a 	sub	r17,r3,r2
    a05c:	8809883a 	mov	r4,r17
    a060:	900b883a 	mov	r5,r18
    a064:	000a9d00 	call	a9d0 <__umodsi3>
    a068:	1029883a 	mov	r20,r2
    a06c:	8809883a 	mov	r4,r17
    a070:	900b883a 	mov	r5,r18
    a074:	a028943a 	slli	r20,r20,16
    a078:	000a96c0 	call	a96c <__udivsi3>
    a07c:	100b883a 	mov	r5,r2
    a080:	b009883a 	mov	r4,r22
    a084:	843fffcc 	andi	r16,r16,65535
    a088:	1023883a 	mov	r17,r2
    a08c:	8520b03a 	or	r16,r16,r20
    a090:	000aa280 	call	aa28 <__mulsi3>
    a094:	8080042e 	bgeu	r16,r2,a0a8 <__udivdi3+0x3f4>
    a098:	8721883a 	add	r16,r16,fp
    a09c:	88ffffc4 	addi	r3,r17,-1
    a0a0:	8700712e 	bgeu	r16,fp,a268 <__udivdi3+0x5b4>
    a0a4:	1823883a 	mov	r17,r3
    a0a8:	a80e943a 	slli	r7,r21,16
    a0ac:	d8c00017 	ldw	r3,0(sp)
    a0b0:	80a1c83a 	sub	r16,r16,r2
    a0b4:	3c64b03a 	or	r18,r7,r17
    a0b8:	1d3fffcc 	andi	r20,r3,65535
    a0bc:	9022d43a 	srli	r17,r18,16
    a0c0:	95bfffcc 	andi	r22,r18,65535
    a0c4:	a00b883a 	mov	r5,r20
    a0c8:	b009883a 	mov	r4,r22
    a0cc:	182ad43a 	srli	r21,r3,16
    a0d0:	000aa280 	call	aa28 <__mulsi3>
    a0d4:	a00b883a 	mov	r5,r20
    a0d8:	8809883a 	mov	r4,r17
    a0dc:	1039883a 	mov	fp,r2
    a0e0:	000aa280 	call	aa28 <__mulsi3>
    a0e4:	8809883a 	mov	r4,r17
    a0e8:	a80b883a 	mov	r5,r21
    a0ec:	1029883a 	mov	r20,r2
    a0f0:	000aa280 	call	aa28 <__mulsi3>
    a0f4:	a80b883a 	mov	r5,r21
    a0f8:	b009883a 	mov	r4,r22
    a0fc:	1023883a 	mov	r17,r2
    a100:	000aa280 	call	aa28 <__mulsi3>
    a104:	e006d43a 	srli	r3,fp,16
    a108:	1505883a 	add	r2,r2,r20
    a10c:	1887883a 	add	r3,r3,r2
    a110:	1d00022e 	bgeu	r3,r20,a11c <__udivdi3+0x468>
    a114:	00800074 	movhi	r2,1
    a118:	88a3883a 	add	r17,r17,r2
    a11c:	1804d43a 	srli	r2,r3,16
    a120:	1463883a 	add	r17,r2,r17
    a124:	84404436 	bltu	r16,r17,a238 <__udivdi3+0x584>
    a128:	84403e26 	beq	r16,r17,a224 <__udivdi3+0x570>
    a12c:	9005883a 	mov	r2,r18
    a130:	0007883a 	mov	r3,zero
    a134:	003f9106 	br	9f7c <__udivdi3+0x2c8>
    a138:	88e2983a 	sll	r17,r17,r3
    a13c:	80aed83a 	srl	r23,r16,r2
    a140:	80e0983a 	sll	r16,r16,r3
    a144:	882ad43a 	srli	r21,r17,16
    a148:	9884d83a 	srl	r2,r19,r2
    a14c:	b809883a 	mov	r4,r23
    a150:	a80b883a 	mov	r5,r21
    a154:	98e4983a 	sll	r18,r19,r3
    a158:	142cb03a 	or	r22,r2,r16
    a15c:	000a9d00 	call	a9d0 <__umodsi3>
    a160:	b809883a 	mov	r4,r23
    a164:	a80b883a 	mov	r5,r21
    a168:	1027883a 	mov	r19,r2
    a16c:	8d3fffcc 	andi	r20,r17,65535
    a170:	000a96c0 	call	a96c <__udivsi3>
    a174:	a009883a 	mov	r4,r20
    a178:	100b883a 	mov	r5,r2
    a17c:	102f883a 	mov	r23,r2
    a180:	000aa280 	call	aa28 <__mulsi3>
    a184:	9826943a 	slli	r19,r19,16
    a188:	b008d43a 	srli	r4,r22,16
    a18c:	24c8b03a 	or	r4,r4,r19
    a190:	2080062e 	bgeu	r4,r2,a1ac <__udivdi3+0x4f8>
    a194:	2449883a 	add	r4,r4,r17
    a198:	b8ffffc4 	addi	r3,r23,-1
    a19c:	24403c36 	bltu	r4,r17,a290 <__udivdi3+0x5dc>
    a1a0:	20803b2e 	bgeu	r4,r2,a290 <__udivdi3+0x5dc>
    a1a4:	bdffff84 	addi	r23,r23,-2
    a1a8:	2449883a 	add	r4,r4,r17
    a1ac:	20a1c83a 	sub	r16,r4,r2
    a1b0:	a80b883a 	mov	r5,r21
    a1b4:	8009883a 	mov	r4,r16
    a1b8:	000a9d00 	call	a9d0 <__umodsi3>
    a1bc:	a80b883a 	mov	r5,r21
    a1c0:	8009883a 	mov	r4,r16
    a1c4:	1027883a 	mov	r19,r2
    a1c8:	000a96c0 	call	a96c <__udivsi3>
    a1cc:	a009883a 	mov	r4,r20
    a1d0:	100b883a 	mov	r5,r2
    a1d4:	9826943a 	slli	r19,r19,16
    a1d8:	1039883a 	mov	fp,r2
    a1dc:	000aa280 	call	aa28 <__mulsi3>
    a1e0:	b13fffcc 	andi	r4,r22,65535
    a1e4:	24c8b03a 	or	r4,r4,r19
    a1e8:	2080062e 	bgeu	r4,r2,a204 <__udivdi3+0x550>
    a1ec:	2449883a 	add	r4,r4,r17
    a1f0:	e0ffffc4 	addi	r3,fp,-1
    a1f4:	24402436 	bltu	r4,r17,a288 <__udivdi3+0x5d4>
    a1f8:	2080232e 	bgeu	r4,r2,a288 <__udivdi3+0x5d4>
    a1fc:	e73fff84 	addi	fp,fp,-2
    a200:	2449883a 	add	r4,r4,r17
    a204:	b82e943a 	slli	r23,r23,16
    a208:	20a1c83a 	sub	r16,r4,r2
    a20c:	bf06b03a 	or	r3,r23,fp
    a210:	003f2806 	br	9eb4 <__udivdi3+0x200>
    a214:	2021883a 	mov	r16,r4
    a218:	003f5306 	br	9f68 <__udivdi3+0x2b4>
    a21c:	1821883a 	mov	r16,r3
    a220:	003ef406 	br	9df4 <__udivdi3+0x140>
    a224:	1806943a 	slli	r3,r3,16
    a228:	9de6983a 	sll	r19,r19,r23
    a22c:	e73fffcc 	andi	fp,fp,65535
    a230:	1f07883a 	add	r3,r3,fp
    a234:	98ffbd2e 	bgeu	r19,r3,a12c <__udivdi3+0x478>
    a238:	90bfffc4 	addi	r2,r18,-1
    a23c:	0007883a 	mov	r3,zero
    a240:	003f4e06 	br	9f7c <__udivdi3+0x2c8>
    a244:	00800604 	movi	r2,24
    a248:	003ef506 	br	9e20 <__udivdi3+0x16c>
    a24c:	00800604 	movi	r2,24
    a250:	003f0b06 	br	9e80 <__udivdi3+0x1cc>
    a254:	00800604 	movi	r2,24
    a258:	003ead06 	br	9d10 <__udivdi3+0x5c>
    a25c:	0007883a 	mov	r3,zero
    a260:	00800044 	movi	r2,1
    a264:	003f4506 	br	9f7c <__udivdi3+0x2c8>
    a268:	80bf8e2e 	bgeu	r16,r2,a0a4 <__udivdi3+0x3f0>
    a26c:	8c7fff84 	addi	r17,r17,-2
    a270:	8721883a 	add	r16,r16,fp
    a274:	003f8c06 	br	a0a8 <__udivdi3+0x3f4>
    a278:	18bf762e 	bgeu	r3,r2,a054 <__udivdi3+0x3a0>
    a27c:	ad7fff84 	addi	r21,r21,-2
    a280:	1f07883a 	add	r3,r3,fp
    a284:	003f7406 	br	a058 <__udivdi3+0x3a4>
    a288:	1839883a 	mov	fp,r3
    a28c:	003fdd06 	br	a204 <__udivdi3+0x550>
    a290:	182f883a 	mov	r23,r3
    a294:	003fc506 	br	a1ac <__udivdi3+0x4f8>
    a298:	b5bfff84 	addi	r22,r22,-2
    a29c:	3c4f883a 	add	r7,r7,r17
    a2a0:	003f1a06 	br	9f0c <__udivdi3+0x258>
    a2a4:	b5bfff84 	addi	r22,r22,-2
    a2a8:	1c47883a 	add	r3,r3,r17
    a2ac:	003ebc06 	br	9da0 <__udivdi3+0xec>

0000a2b0 <__umoddi3>:
    a2b0:	defff304 	addi	sp,sp,-52
    a2b4:	df000b15 	stw	fp,44(sp)
    a2b8:	dc400415 	stw	r17,16(sp)
    a2bc:	dc000315 	stw	r16,12(sp)
    a2c0:	dfc00c15 	stw	ra,48(sp)
    a2c4:	ddc00a15 	stw	r23,40(sp)
    a2c8:	dd800915 	stw	r22,36(sp)
    a2cc:	dd400815 	stw	r21,32(sp)
    a2d0:	dd000715 	stw	r20,28(sp)
    a2d4:	dcc00615 	stw	r19,24(sp)
    a2d8:	dc800515 	stw	r18,20(sp)
    a2dc:	2021883a 	mov	r16,r4
    a2e0:	2823883a 	mov	r17,r5
    a2e4:	2839883a 	mov	fp,r5
    a2e8:	3800401e 	bne	r7,zero,a3ec <__umoddi3+0x13c>
    a2ec:	3027883a 	mov	r19,r6
    a2f0:	2029883a 	mov	r20,r4
    a2f4:	2980552e 	bgeu	r5,r6,a44c <__umoddi3+0x19c>
    a2f8:	00bfffd4 	movui	r2,65535
    a2fc:	1180a236 	bltu	r2,r6,a588 <__umoddi3+0x2d8>
    a300:	01003fc4 	movi	r4,255
    a304:	2189803a 	cmpltu	r4,r4,r6
    a308:	200890fa 	slli	r4,r4,3
    a30c:	3104d83a 	srl	r2,r6,r4
    a310:	00c00074 	movhi	r3,1
    a314:	18c08404 	addi	r3,r3,528
    a318:	1885883a 	add	r2,r3,r2
    a31c:	10c00003 	ldbu	r3,0(r2)
    a320:	00800804 	movi	r2,32
    a324:	1909883a 	add	r4,r3,r4
    a328:	1125c83a 	sub	r18,r2,r4
    a32c:	90000526 	beq	r18,zero,a344 <__umoddi3+0x94>
    a330:	8ca2983a 	sll	r17,r17,r18
    a334:	8108d83a 	srl	r4,r16,r4
    a338:	34a6983a 	sll	r19,r6,r18
    a33c:	84a8983a 	sll	r20,r16,r18
    a340:	2478b03a 	or	fp,r4,r17
    a344:	982cd43a 	srli	r22,r19,16
    a348:	e009883a 	mov	r4,fp
    a34c:	9dffffcc 	andi	r23,r19,65535
    a350:	b00b883a 	mov	r5,r22
    a354:	000a9d00 	call	a9d0 <__umodsi3>
    a358:	b00b883a 	mov	r5,r22
    a35c:	e009883a 	mov	r4,fp
    a360:	102b883a 	mov	r21,r2
    a364:	000a96c0 	call	a96c <__udivsi3>
    a368:	100b883a 	mov	r5,r2
    a36c:	b809883a 	mov	r4,r23
    a370:	000aa280 	call	aa28 <__mulsi3>
    a374:	a82a943a 	slli	r21,r21,16
    a378:	a006d43a 	srli	r3,r20,16
    a37c:	1d46b03a 	or	r3,r3,r21
    a380:	1880032e 	bgeu	r3,r2,a390 <__umoddi3+0xe0>
    a384:	1cc7883a 	add	r3,r3,r19
    a388:	1cc00136 	bltu	r3,r19,a390 <__umoddi3+0xe0>
    a38c:	18813136 	bltu	r3,r2,a854 <__umoddi3+0x5a4>
    a390:	18a1c83a 	sub	r16,r3,r2
    a394:	b00b883a 	mov	r5,r22
    a398:	8009883a 	mov	r4,r16
    a39c:	000a9d00 	call	a9d0 <__umodsi3>
    a3a0:	b00b883a 	mov	r5,r22
    a3a4:	8009883a 	mov	r4,r16
    a3a8:	1023883a 	mov	r17,r2
    a3ac:	000a96c0 	call	a96c <__udivsi3>
    a3b0:	100b883a 	mov	r5,r2
    a3b4:	b809883a 	mov	r4,r23
    a3b8:	8822943a 	slli	r17,r17,16
    a3bc:	000aa280 	call	aa28 <__mulsi3>
    a3c0:	a0ffffcc 	andi	r3,r20,65535
    a3c4:	1c46b03a 	or	r3,r3,r17
    a3c8:	1880042e 	bgeu	r3,r2,a3dc <__umoddi3+0x12c>
    a3cc:	1cc7883a 	add	r3,r3,r19
    a3d0:	1cc00236 	bltu	r3,r19,a3dc <__umoddi3+0x12c>
    a3d4:	1880012e 	bgeu	r3,r2,a3dc <__umoddi3+0x12c>
    a3d8:	1cc7883a 	add	r3,r3,r19
    a3dc:	1885c83a 	sub	r2,r3,r2
    a3e0:	1484d83a 	srl	r2,r2,r18
    a3e4:	0007883a 	mov	r3,zero
    a3e8:	00005306 	br	a538 <__umoddi3+0x288>
    a3ec:	29c05036 	bltu	r5,r7,a530 <__umoddi3+0x280>
    a3f0:	00bfffd4 	movui	r2,65535
    a3f4:	11c05c2e 	bgeu	r2,r7,a568 <__umoddi3+0x2b8>
    a3f8:	00804034 	movhi	r2,256
    a3fc:	10bfffc4 	addi	r2,r2,-1
    a400:	11c10636 	bltu	r2,r7,a81c <__umoddi3+0x56c>
    a404:	01000404 	movi	r4,16
    a408:	3904d83a 	srl	r2,r7,r4
    a40c:	00c00074 	movhi	r3,1
    a410:	18c08404 	addi	r3,r3,528
    a414:	1885883a 	add	r2,r3,r2
    a418:	14c00003 	ldbu	r19,0(r2)
    a41c:	00c00804 	movi	r3,32
    a420:	9927883a 	add	r19,r19,r4
    a424:	1ce9c83a 	sub	r20,r3,r19
    a428:	a0005c1e 	bne	r20,zero,a59c <__umoddi3+0x2ec>
    a42c:	3c400136 	bltu	r7,r17,a434 <__umoddi3+0x184>
    a430:	81810a36 	bltu	r16,r6,a85c <__umoddi3+0x5ac>
    a434:	8185c83a 	sub	r2,r16,r6
    a438:	89e3c83a 	sub	r17,r17,r7
    a43c:	8089803a 	cmpltu	r4,r16,r2
    a440:	8939c83a 	sub	fp,r17,r4
    a444:	e007883a 	mov	r3,fp
    a448:	00003b06 	br	a538 <__umoddi3+0x288>
    a44c:	3000041e 	bne	r6,zero,a460 <__umoddi3+0x1b0>
    a450:	000b883a 	mov	r5,zero
    a454:	01000044 	movi	r4,1
    a458:	000a96c0 	call	a96c <__udivsi3>
    a45c:	1027883a 	mov	r19,r2
    a460:	00bfffd4 	movui	r2,65535
    a464:	14c0442e 	bgeu	r2,r19,a578 <__umoddi3+0x2c8>
    a468:	00804034 	movhi	r2,256
    a46c:	10bfffc4 	addi	r2,r2,-1
    a470:	14c0ec36 	bltu	r2,r19,a824 <__umoddi3+0x574>
    a474:	00800404 	movi	r2,16
    a478:	9886d83a 	srl	r3,r19,r2
    a47c:	01000074 	movhi	r4,1
    a480:	21008404 	addi	r4,r4,528
    a484:	20c7883a 	add	r3,r4,r3
    a488:	18c00003 	ldbu	r3,0(r3)
    a48c:	1887883a 	add	r3,r3,r2
    a490:	00800804 	movi	r2,32
    a494:	10e5c83a 	sub	r18,r2,r3
    a498:	9000ab1e 	bne	r18,zero,a748 <__umoddi3+0x498>
    a49c:	982cd43a 	srli	r22,r19,16
    a4a0:	8ce3c83a 	sub	r17,r17,r19
    a4a4:	9dffffcc 	andi	r23,r19,65535
    a4a8:	b00b883a 	mov	r5,r22
    a4ac:	8809883a 	mov	r4,r17
    a4b0:	000a9d00 	call	a9d0 <__umodsi3>
    a4b4:	b00b883a 	mov	r5,r22
    a4b8:	8809883a 	mov	r4,r17
    a4bc:	102b883a 	mov	r21,r2
    a4c0:	000a96c0 	call	a96c <__udivsi3>
    a4c4:	b80b883a 	mov	r5,r23
    a4c8:	1009883a 	mov	r4,r2
    a4cc:	000aa280 	call	aa28 <__mulsi3>
    a4d0:	a82a943a 	slli	r21,r21,16
    a4d4:	a006d43a 	srli	r3,r20,16
    a4d8:	1d46b03a 	or	r3,r3,r21
    a4dc:	1880042e 	bgeu	r3,r2,a4f0 <__umoddi3+0x240>
    a4e0:	1cc7883a 	add	r3,r3,r19
    a4e4:	1cc00236 	bltu	r3,r19,a4f0 <__umoddi3+0x240>
    a4e8:	1880012e 	bgeu	r3,r2,a4f0 <__umoddi3+0x240>
    a4ec:	1cc7883a 	add	r3,r3,r19
    a4f0:	18a1c83a 	sub	r16,r3,r2
    a4f4:	b00b883a 	mov	r5,r22
    a4f8:	8009883a 	mov	r4,r16
    a4fc:	000a9d00 	call	a9d0 <__umodsi3>
    a500:	1023883a 	mov	r17,r2
    a504:	b00b883a 	mov	r5,r22
    a508:	8009883a 	mov	r4,r16
    a50c:	000a96c0 	call	a96c <__udivsi3>
    a510:	8822943a 	slli	r17,r17,16
    a514:	b80b883a 	mov	r5,r23
    a518:	1009883a 	mov	r4,r2
    a51c:	000aa280 	call	aa28 <__mulsi3>
    a520:	a53fffcc 	andi	r20,r20,65535
    a524:	a446b03a 	or	r3,r20,r17
    a528:	18bfac2e 	bgeu	r3,r2,a3dc <__umoddi3+0x12c>
    a52c:	003fa706 	br	a3cc <__umoddi3+0x11c>
    a530:	2005883a 	mov	r2,r4
    a534:	2807883a 	mov	r3,r5
    a538:	dfc00c17 	ldw	ra,48(sp)
    a53c:	df000b17 	ldw	fp,44(sp)
    a540:	ddc00a17 	ldw	r23,40(sp)
    a544:	dd800917 	ldw	r22,36(sp)
    a548:	dd400817 	ldw	r21,32(sp)
    a54c:	dd000717 	ldw	r20,28(sp)
    a550:	dcc00617 	ldw	r19,24(sp)
    a554:	dc800517 	ldw	r18,20(sp)
    a558:	dc400417 	ldw	r17,16(sp)
    a55c:	dc000317 	ldw	r16,12(sp)
    a560:	dec00d04 	addi	sp,sp,52
    a564:	f800283a 	ret
    a568:	04c03fc4 	movi	r19,255
    a56c:	99c9803a 	cmpltu	r4,r19,r7
    a570:	200890fa 	slli	r4,r4,3
    a574:	003fa406 	br	a408 <__umoddi3+0x158>
    a578:	00803fc4 	movi	r2,255
    a57c:	14c5803a 	cmpltu	r2,r2,r19
    a580:	100490fa 	slli	r2,r2,3
    a584:	003fbc06 	br	a478 <__umoddi3+0x1c8>
    a588:	00804034 	movhi	r2,256
    a58c:	10bfffc4 	addi	r2,r2,-1
    a590:	1180a636 	bltu	r2,r6,a82c <__umoddi3+0x57c>
    a594:	01000404 	movi	r4,16
    a598:	003f5c06 	br	a30c <__umoddi3+0x5c>
    a59c:	3d0e983a 	sll	r7,r7,r20
    a5a0:	34ead83a 	srl	r21,r6,r19
    a5a4:	8cc6d83a 	srl	r3,r17,r19
    a5a8:	8d10983a 	sll	r8,r17,r20
    a5ac:	3d6ab03a 	or	r21,r7,r21
    a5b0:	a82cd43a 	srli	r22,r21,16
    a5b4:	84e2d83a 	srl	r17,r16,r19
    a5b8:	1809883a 	mov	r4,r3
    a5bc:	b00b883a 	mov	r5,r22
    a5c0:	8a22b03a 	or	r17,r17,r8
    a5c4:	3524983a 	sll	r18,r6,r20
    a5c8:	dc400015 	stw	r17,0(sp)
    a5cc:	d8c00115 	stw	r3,4(sp)
    a5d0:	000a9d00 	call	a9d0 <__umodsi3>
    a5d4:	d8c00117 	ldw	r3,4(sp)
    a5d8:	b00b883a 	mov	r5,r22
    a5dc:	1039883a 	mov	fp,r2
    a5e0:	1809883a 	mov	r4,r3
    a5e4:	000a96c0 	call	a96c <__udivsi3>
    a5e8:	adffffcc 	andi	r23,r21,65535
    a5ec:	100b883a 	mov	r5,r2
    a5f0:	b809883a 	mov	r4,r23
    a5f4:	1023883a 	mov	r17,r2
    a5f8:	000aa280 	call	aa28 <__mulsi3>
    a5fc:	d9400017 	ldw	r5,0(sp)
    a600:	e008943a 	slli	r4,fp,16
    a604:	8520983a 	sll	r16,r16,r20
    a608:	2806d43a 	srli	r3,r5,16
    a60c:	1906b03a 	or	r3,r3,r4
    a610:	1880042e 	bgeu	r3,r2,a624 <__umoddi3+0x374>
    a614:	1d47883a 	add	r3,r3,r21
    a618:	893fffc4 	addi	r4,r17,-1
    a61c:	1d40892e 	bgeu	r3,r21,a844 <__umoddi3+0x594>
    a620:	2023883a 	mov	r17,r4
    a624:	18b9c83a 	sub	fp,r3,r2
    a628:	b00b883a 	mov	r5,r22
    a62c:	e009883a 	mov	r4,fp
    a630:	000a9d00 	call	a9d0 <__umodsi3>
    a634:	b00b883a 	mov	r5,r22
    a638:	e009883a 	mov	r4,fp
    a63c:	d8800215 	stw	r2,8(sp)
    a640:	000a96c0 	call	a96c <__udivsi3>
    a644:	100b883a 	mov	r5,r2
    a648:	b809883a 	mov	r4,r23
    a64c:	102d883a 	mov	r22,r2
    a650:	000aa280 	call	aa28 <__mulsi3>
    a654:	d9800217 	ldw	r6,8(sp)
    a658:	d8c00017 	ldw	r3,0(sp)
    a65c:	300c943a 	slli	r6,r6,16
    a660:	1a3fffcc 	andi	r8,r3,65535
    a664:	4190b03a 	or	r8,r8,r6
    a668:	4080042e 	bgeu	r8,r2,a67c <__umoddi3+0x3cc>
    a66c:	4551883a 	add	r8,r8,r21
    a670:	b0ffffc4 	addi	r3,r22,-1
    a674:	45406f2e 	bgeu	r8,r21,a834 <__umoddi3+0x584>
    a678:	182d883a 	mov	r22,r3
    a67c:	880e943a 	slli	r7,r17,16
    a680:	9006d43a 	srli	r3,r18,16
    a684:	91bfffcc 	andi	r6,r18,65535
    a688:	3dacb03a 	or	r22,r7,r22
    a68c:	b02ed43a 	srli	r23,r22,16
    a690:	b5bfffcc 	andi	r22,r22,65535
    a694:	300b883a 	mov	r5,r6
    a698:	b009883a 	mov	r4,r22
    a69c:	40a3c83a 	sub	r17,r8,r2
    a6a0:	d8c00115 	stw	r3,4(sp)
    a6a4:	d9800215 	stw	r6,8(sp)
    a6a8:	000aa280 	call	aa28 <__mulsi3>
    a6ac:	d9800217 	ldw	r6,8(sp)
    a6b0:	b809883a 	mov	r4,r23
    a6b4:	1039883a 	mov	fp,r2
    a6b8:	300b883a 	mov	r5,r6
    a6bc:	000aa280 	call	aa28 <__mulsi3>
    a6c0:	d8c00117 	ldw	r3,4(sp)
    a6c4:	b809883a 	mov	r4,r23
    a6c8:	d8800215 	stw	r2,8(sp)
    a6cc:	180b883a 	mov	r5,r3
    a6d0:	000aa280 	call	aa28 <__mulsi3>
    a6d4:	d8c00117 	ldw	r3,4(sp)
    a6d8:	b009883a 	mov	r4,r22
    a6dc:	102f883a 	mov	r23,r2
    a6e0:	180b883a 	mov	r5,r3
    a6e4:	000aa280 	call	aa28 <__mulsi3>
    a6e8:	d9800217 	ldw	r6,8(sp)
    a6ec:	e006d43a 	srli	r3,fp,16
    a6f0:	1185883a 	add	r2,r2,r6
    a6f4:	1885883a 	add	r2,r3,r2
    a6f8:	1180022e 	bgeu	r2,r6,a704 <__umoddi3+0x454>
    a6fc:	00c00074 	movhi	r3,1
    a700:	b8ef883a 	add	r23,r23,r3
    a704:	1006d43a 	srli	r3,r2,16
    a708:	1004943a 	slli	r2,r2,16
    a70c:	e73fffcc 	andi	fp,fp,65535
    a710:	1dc7883a 	add	r3,r3,r23
    a714:	1739883a 	add	fp,r2,fp
    a718:	88c03a36 	bltu	r17,r3,a804 <__umoddi3+0x554>
    a71c:	88c05126 	beq	r17,r3,a864 <__umoddi3+0x5b4>
    a720:	88c9c83a 	sub	r4,r17,r3
    a724:	e00f883a 	mov	r7,fp
    a728:	81cfc83a 	sub	r7,r16,r7
    a72c:	81c7803a 	cmpltu	r3,r16,r7
    a730:	20c7c83a 	sub	r3,r4,r3
    a734:	1cc4983a 	sll	r2,r3,r19
    a738:	3d0ed83a 	srl	r7,r7,r20
    a73c:	1d06d83a 	srl	r3,r3,r20
    a740:	11c4b03a 	or	r2,r2,r7
    a744:	003f7c06 	br	a538 <__umoddi3+0x288>
    a748:	9ca6983a 	sll	r19,r19,r18
    a74c:	88f8d83a 	srl	fp,r17,r3
    a750:	80c4d83a 	srl	r2,r16,r3
    a754:	982cd43a 	srli	r22,r19,16
    a758:	8ca2983a 	sll	r17,r17,r18
    a75c:	e009883a 	mov	r4,fp
    a760:	b00b883a 	mov	r5,r22
    a764:	146ab03a 	or	r21,r2,r17
    a768:	000a9d00 	call	a9d0 <__umodsi3>
    a76c:	b00b883a 	mov	r5,r22
    a770:	e009883a 	mov	r4,fp
    a774:	1029883a 	mov	r20,r2
    a778:	9dffffcc 	andi	r23,r19,65535
    a77c:	000a96c0 	call	a96c <__udivsi3>
    a780:	b809883a 	mov	r4,r23
    a784:	100b883a 	mov	r5,r2
    a788:	000aa280 	call	aa28 <__mulsi3>
    a78c:	a008943a 	slli	r4,r20,16
    a790:	a806d43a 	srli	r3,r21,16
    a794:	84a8983a 	sll	r20,r16,r18
    a798:	1906b03a 	or	r3,r3,r4
    a79c:	1880042e 	bgeu	r3,r2,a7b0 <__umoddi3+0x500>
    a7a0:	1cc7883a 	add	r3,r3,r19
    a7a4:	1cc00236 	bltu	r3,r19,a7b0 <__umoddi3+0x500>
    a7a8:	1880012e 	bgeu	r3,r2,a7b0 <__umoddi3+0x500>
    a7ac:	1cc7883a 	add	r3,r3,r19
    a7b0:	18a3c83a 	sub	r17,r3,r2
    a7b4:	b00b883a 	mov	r5,r22
    a7b8:	8809883a 	mov	r4,r17
    a7bc:	000a9d00 	call	a9d0 <__umodsi3>
    a7c0:	b00b883a 	mov	r5,r22
    a7c4:	8809883a 	mov	r4,r17
    a7c8:	1021883a 	mov	r16,r2
    a7cc:	000a96c0 	call	a96c <__udivsi3>
    a7d0:	100b883a 	mov	r5,r2
    a7d4:	b809883a 	mov	r4,r23
    a7d8:	8020943a 	slli	r16,r16,16
    a7dc:	000aa280 	call	aa28 <__mulsi3>
    a7e0:	a8ffffcc 	andi	r3,r21,65535
    a7e4:	1c06b03a 	or	r3,r3,r16
    a7e8:	1880042e 	bgeu	r3,r2,a7fc <__umoddi3+0x54c>
    a7ec:	1cc7883a 	add	r3,r3,r19
    a7f0:	1cc00236 	bltu	r3,r19,a7fc <__umoddi3+0x54c>
    a7f4:	1880012e 	bgeu	r3,r2,a7fc <__umoddi3+0x54c>
    a7f8:	1cc7883a 	add	r3,r3,r19
    a7fc:	18a3c83a 	sub	r17,r3,r2
    a800:	003f2906 	br	a4a8 <__umoddi3+0x1f8>
    a804:	e48fc83a 	sub	r7,fp,r18
    a808:	1d49c83a 	sub	r4,r3,r21
    a80c:	e1f9803a 	cmpltu	fp,fp,r7
    a810:	2739c83a 	sub	fp,r4,fp
    a814:	8f09c83a 	sub	r4,r17,fp
    a818:	003fc306 	br	a728 <__umoddi3+0x478>
    a81c:	01000604 	movi	r4,24
    a820:	003ef906 	br	a408 <__umoddi3+0x158>
    a824:	00800604 	movi	r2,24
    a828:	003f1306 	br	a478 <__umoddi3+0x1c8>
    a82c:	01000604 	movi	r4,24
    a830:	003eb606 	br	a30c <__umoddi3+0x5c>
    a834:	40bf902e 	bgeu	r8,r2,a678 <__umoddi3+0x3c8>
    a838:	b5bfff84 	addi	r22,r22,-2
    a83c:	4551883a 	add	r8,r8,r21
    a840:	003f8e06 	br	a67c <__umoddi3+0x3cc>
    a844:	18bf762e 	bgeu	r3,r2,a620 <__umoddi3+0x370>
    a848:	8c7fff84 	addi	r17,r17,-2
    a84c:	1d47883a 	add	r3,r3,r21
    a850:	003f7406 	br	a624 <__umoddi3+0x374>
    a854:	1cc7883a 	add	r3,r3,r19
    a858:	003ecd06 	br	a390 <__umoddi3+0xe0>
    a85c:	8005883a 	mov	r2,r16
    a860:	003ef806 	br	a444 <__umoddi3+0x194>
    a864:	873fe736 	bltu	r16,fp,a804 <__umoddi3+0x554>
    a868:	e00f883a 	mov	r7,fp
    a86c:	0009883a 	mov	r4,zero
    a870:	003fad06 	br	a728 <__umoddi3+0x478>

0000a874 <__divsi3>:
    a874:	20001b16 	blt	r4,zero,a8e4 <__divsi3+0x70>
    a878:	000f883a 	mov	r7,zero
    a87c:	28001616 	blt	r5,zero,a8d8 <__divsi3+0x64>
    a880:	200d883a 	mov	r6,r4
    a884:	29001a2e 	bgeu	r5,r4,a8f0 <__divsi3+0x7c>
    a888:	00800804 	movi	r2,32
    a88c:	00c00044 	movi	r3,1
    a890:	00000106 	br	a898 <__divsi3+0x24>
    a894:	10000d26 	beq	r2,zero,a8cc <__divsi3+0x58>
    a898:	294b883a 	add	r5,r5,r5
    a89c:	10bfffc4 	addi	r2,r2,-1
    a8a0:	18c7883a 	add	r3,r3,r3
    a8a4:	293ffb36 	bltu	r5,r4,a894 <__divsi3+0x20>
    a8a8:	0005883a 	mov	r2,zero
    a8ac:	18000726 	beq	r3,zero,a8cc <__divsi3+0x58>
    a8b0:	0005883a 	mov	r2,zero
    a8b4:	31400236 	bltu	r6,r5,a8c0 <__divsi3+0x4c>
    a8b8:	314dc83a 	sub	r6,r6,r5
    a8bc:	10c4b03a 	or	r2,r2,r3
    a8c0:	1806d07a 	srli	r3,r3,1
    a8c4:	280ad07a 	srli	r5,r5,1
    a8c8:	183ffa1e 	bne	r3,zero,a8b4 <__divsi3+0x40>
    a8cc:	38000126 	beq	r7,zero,a8d4 <__divsi3+0x60>
    a8d0:	0085c83a 	sub	r2,zero,r2
    a8d4:	f800283a 	ret
    a8d8:	014bc83a 	sub	r5,zero,r5
    a8dc:	39c0005c 	xori	r7,r7,1
    a8e0:	003fe706 	br	a880 <__divsi3+0xc>
    a8e4:	0109c83a 	sub	r4,zero,r4
    a8e8:	01c00044 	movi	r7,1
    a8ec:	003fe306 	br	a87c <__divsi3+0x8>
    a8f0:	00c00044 	movi	r3,1
    a8f4:	003fee06 	br	a8b0 <__divsi3+0x3c>

0000a8f8 <__modsi3>:
    a8f8:	20001716 	blt	r4,zero,a958 <__modsi3+0x60>
    a8fc:	000f883a 	mov	r7,zero
    a900:	2005883a 	mov	r2,r4
    a904:	28001216 	blt	r5,zero,a950 <__modsi3+0x58>
    a908:	2900162e 	bgeu	r5,r4,a964 <__modsi3+0x6c>
    a90c:	01800804 	movi	r6,32
    a910:	00c00044 	movi	r3,1
    a914:	00000106 	br	a91c <__modsi3+0x24>
    a918:	30000a26 	beq	r6,zero,a944 <__modsi3+0x4c>
    a91c:	294b883a 	add	r5,r5,r5
    a920:	31bfffc4 	addi	r6,r6,-1
    a924:	18c7883a 	add	r3,r3,r3
    a928:	293ffb36 	bltu	r5,r4,a918 <__modsi3+0x20>
    a92c:	18000526 	beq	r3,zero,a944 <__modsi3+0x4c>
    a930:	1806d07a 	srli	r3,r3,1
    a934:	11400136 	bltu	r2,r5,a93c <__modsi3+0x44>
    a938:	1145c83a 	sub	r2,r2,r5
    a93c:	280ad07a 	srli	r5,r5,1
    a940:	183ffb1e 	bne	r3,zero,a930 <__modsi3+0x38>
    a944:	38000126 	beq	r7,zero,a94c <__modsi3+0x54>
    a948:	0085c83a 	sub	r2,zero,r2
    a94c:	f800283a 	ret
    a950:	014bc83a 	sub	r5,zero,r5
    a954:	003fec06 	br	a908 <__modsi3+0x10>
    a958:	0109c83a 	sub	r4,zero,r4
    a95c:	01c00044 	movi	r7,1
    a960:	003fe706 	br	a900 <__modsi3+0x8>
    a964:	00c00044 	movi	r3,1
    a968:	003ff106 	br	a930 <__modsi3+0x38>

0000a96c <__udivsi3>:
    a96c:	200d883a 	mov	r6,r4
    a970:	2900152e 	bgeu	r5,r4,a9c8 <__udivsi3+0x5c>
    a974:	28001416 	blt	r5,zero,a9c8 <__udivsi3+0x5c>
    a978:	00800804 	movi	r2,32
    a97c:	00c00044 	movi	r3,1
    a980:	00000206 	br	a98c <__udivsi3+0x20>
    a984:	10000e26 	beq	r2,zero,a9c0 <__udivsi3+0x54>
    a988:	28000516 	blt	r5,zero,a9a0 <__udivsi3+0x34>
    a98c:	294b883a 	add	r5,r5,r5
    a990:	10bfffc4 	addi	r2,r2,-1
    a994:	18c7883a 	add	r3,r3,r3
    a998:	293ffa36 	bltu	r5,r4,a984 <__udivsi3+0x18>
    a99c:	18000826 	beq	r3,zero,a9c0 <__udivsi3+0x54>
    a9a0:	0005883a 	mov	r2,zero
    a9a4:	31400236 	bltu	r6,r5,a9b0 <__udivsi3+0x44>
    a9a8:	314dc83a 	sub	r6,r6,r5
    a9ac:	10c4b03a 	or	r2,r2,r3
    a9b0:	1806d07a 	srli	r3,r3,1
    a9b4:	280ad07a 	srli	r5,r5,1
    a9b8:	183ffa1e 	bne	r3,zero,a9a4 <__udivsi3+0x38>
    a9bc:	f800283a 	ret
    a9c0:	0005883a 	mov	r2,zero
    a9c4:	f800283a 	ret
    a9c8:	00c00044 	movi	r3,1
    a9cc:	003ff406 	br	a9a0 <__udivsi3+0x34>

0000a9d0 <__umodsi3>:
    a9d0:	2005883a 	mov	r2,r4
    a9d4:	2900122e 	bgeu	r5,r4,aa20 <__umodsi3+0x50>
    a9d8:	28001116 	blt	r5,zero,aa20 <__umodsi3+0x50>
    a9dc:	01800804 	movi	r6,32
    a9e0:	00c00044 	movi	r3,1
    a9e4:	00000206 	br	a9f0 <__umodsi3+0x20>
    a9e8:	30000c26 	beq	r6,zero,aa1c <__umodsi3+0x4c>
    a9ec:	28000516 	blt	r5,zero,aa04 <__umodsi3+0x34>
    a9f0:	294b883a 	add	r5,r5,r5
    a9f4:	31bfffc4 	addi	r6,r6,-1
    a9f8:	18c7883a 	add	r3,r3,r3
    a9fc:	293ffa36 	bltu	r5,r4,a9e8 <__umodsi3+0x18>
    aa00:	18000626 	beq	r3,zero,aa1c <__umodsi3+0x4c>
    aa04:	1806d07a 	srli	r3,r3,1
    aa08:	11400136 	bltu	r2,r5,aa10 <__umodsi3+0x40>
    aa0c:	1145c83a 	sub	r2,r2,r5
    aa10:	280ad07a 	srli	r5,r5,1
    aa14:	183ffb1e 	bne	r3,zero,aa04 <__umodsi3+0x34>
    aa18:	f800283a 	ret
    aa1c:	f800283a 	ret
    aa20:	00c00044 	movi	r3,1
    aa24:	003ff706 	br	aa04 <__umodsi3+0x34>

0000aa28 <__mulsi3>:
    aa28:	0005883a 	mov	r2,zero
    aa2c:	20000726 	beq	r4,zero,aa4c <__mulsi3+0x24>
    aa30:	20c0004c 	andi	r3,r4,1
    aa34:	2008d07a 	srli	r4,r4,1
    aa38:	18000126 	beq	r3,zero,aa40 <__mulsi3+0x18>
    aa3c:	1145883a 	add	r2,r2,r5
    aa40:	294b883a 	add	r5,r5,r5
    aa44:	203ffa1e 	bne	r4,zero,aa30 <__mulsi3+0x8>
    aa48:	f800283a 	ret
    aa4c:	f800283a 	ret

0000aa50 <__adddf3>:
    aa50:	02c00434 	movhi	r11,16
    aa54:	5affffc4 	addi	r11,r11,-1
    aa58:	2806d7fa 	srli	r3,r5,31
    aa5c:	2ad4703a 	and	r10,r5,r11
    aa60:	3ad2703a 	and	r9,r7,r11
    aa64:	3804d53a 	srli	r2,r7,20
    aa68:	3018d77a 	srli	r12,r6,29
    aa6c:	280ad53a 	srli	r5,r5,20
    aa70:	501490fa 	slli	r10,r10,3
    aa74:	2010d77a 	srli	r8,r4,29
    aa78:	481290fa 	slli	r9,r9,3
    aa7c:	380ed7fa 	srli	r7,r7,31
    aa80:	defffb04 	addi	sp,sp,-20
    aa84:	dc800215 	stw	r18,8(sp)
    aa88:	dc400115 	stw	r17,4(sp)
    aa8c:	dc000015 	stw	r16,0(sp)
    aa90:	dfc00415 	stw	ra,16(sp)
    aa94:	dcc00315 	stw	r19,12(sp)
    aa98:	1c803fcc 	andi	r18,r3,255
    aa9c:	2c01ffcc 	andi	r16,r5,2047
    aaa0:	5210b03a 	or	r8,r10,r8
    aaa4:	202290fa 	slli	r17,r4,3
    aaa8:	1081ffcc 	andi	r2,r2,2047
    aaac:	4b12b03a 	or	r9,r9,r12
    aab0:	300c90fa 	slli	r6,r6,3
    aab4:	91c07526 	beq	r18,r7,ac8c <__adddf3+0x23c>
    aab8:	8087c83a 	sub	r3,r16,r2
    aabc:	00c0ab0e 	bge	zero,r3,ad6c <__adddf3+0x31c>
    aac0:	10002a1e 	bne	r2,zero,ab6c <__adddf3+0x11c>
    aac4:	4984b03a 	or	r2,r9,r6
    aac8:	1000961e 	bne	r2,zero,ad24 <__adddf3+0x2d4>
    aacc:	888001cc 	andi	r2,r17,7
    aad0:	10000726 	beq	r2,zero,aaf0 <__adddf3+0xa0>
    aad4:	888003cc 	andi	r2,r17,15
    aad8:	00c00104 	movi	r3,4
    aadc:	10c00426 	beq	r2,r3,aaf0 <__adddf3+0xa0>
    aae0:	88c7883a 	add	r3,r17,r3
    aae4:	1c63803a 	cmpltu	r17,r3,r17
    aae8:	4451883a 	add	r8,r8,r17
    aaec:	1823883a 	mov	r17,r3
    aaf0:	4080202c 	andhi	r2,r8,128
    aaf4:	10005926 	beq	r2,zero,ac5c <__adddf3+0x20c>
    aaf8:	84000044 	addi	r16,r16,1
    aafc:	0081ffc4 	movi	r2,2047
    ab00:	8080ba26 	beq	r16,r2,adec <__adddf3+0x39c>
    ab04:	00bfe034 	movhi	r2,65408
    ab08:	10bfffc4 	addi	r2,r2,-1
    ab0c:	4090703a 	and	r8,r8,r2
    ab10:	4004977a 	slli	r2,r8,29
    ab14:	4010927a 	slli	r8,r8,9
    ab18:	8822d0fa 	srli	r17,r17,3
    ab1c:	8401ffcc 	andi	r16,r16,2047
    ab20:	4010d33a 	srli	r8,r8,12
    ab24:	9007883a 	mov	r3,r18
    ab28:	1444b03a 	or	r2,r2,r17
    ab2c:	8401ffcc 	andi	r16,r16,2047
    ab30:	8020953a 	slli	r16,r16,20
    ab34:	18c03fcc 	andi	r3,r3,255
    ab38:	01000434 	movhi	r4,16
    ab3c:	213fffc4 	addi	r4,r4,-1
    ab40:	180697fa 	slli	r3,r3,31
    ab44:	4110703a 	and	r8,r8,r4
    ab48:	4410b03a 	or	r8,r8,r16
    ab4c:	40c6b03a 	or	r3,r8,r3
    ab50:	dfc00417 	ldw	ra,16(sp)
    ab54:	dcc00317 	ldw	r19,12(sp)
    ab58:	dc800217 	ldw	r18,8(sp)
    ab5c:	dc400117 	ldw	r17,4(sp)
    ab60:	dc000017 	ldw	r16,0(sp)
    ab64:	dec00504 	addi	sp,sp,20
    ab68:	f800283a 	ret
    ab6c:	0081ffc4 	movi	r2,2047
    ab70:	80bfd626 	beq	r16,r2,aacc <__adddf3+0x7c>
    ab74:	4a402034 	orhi	r9,r9,128
    ab78:	00800e04 	movi	r2,56
    ab7c:	10c09f16 	blt	r2,r3,adfc <__adddf3+0x3ac>
    ab80:	008007c4 	movi	r2,31
    ab84:	10c0c216 	blt	r2,r3,ae90 <__adddf3+0x440>
    ab88:	00800804 	movi	r2,32
    ab8c:	10c5c83a 	sub	r2,r2,r3
    ab90:	488a983a 	sll	r5,r9,r2
    ab94:	30c8d83a 	srl	r4,r6,r3
    ab98:	3084983a 	sll	r2,r6,r2
    ab9c:	48c6d83a 	srl	r3,r9,r3
    aba0:	290cb03a 	or	r6,r5,r4
    aba4:	1004c03a 	cmpne	r2,r2,zero
    aba8:	308cb03a 	or	r6,r6,r2
    abac:	898dc83a 	sub	r6,r17,r6
    abb0:	89a3803a 	cmpltu	r17,r17,r6
    abb4:	40d1c83a 	sub	r8,r8,r3
    abb8:	4451c83a 	sub	r8,r8,r17
    abbc:	3023883a 	mov	r17,r6
    abc0:	4080202c 	andhi	r2,r8,128
    abc4:	10002326 	beq	r2,zero,ac54 <__adddf3+0x204>
    abc8:	04c02034 	movhi	r19,128
    abcc:	9cffffc4 	addi	r19,r19,-1
    abd0:	44e6703a 	and	r19,r8,r19
    abd4:	98007626 	beq	r19,zero,adb0 <__adddf3+0x360>
    abd8:	9809883a 	mov	r4,r19
    abdc:	000d2900 	call	d290 <__clzsi2>
    abe0:	10fffe04 	addi	r3,r2,-8
    abe4:	010007c4 	movi	r4,31
    abe8:	20c07716 	blt	r4,r3,adc8 <__adddf3+0x378>
    abec:	00800804 	movi	r2,32
    abf0:	10c5c83a 	sub	r2,r2,r3
    abf4:	8884d83a 	srl	r2,r17,r2
    abf8:	98d0983a 	sll	r8,r19,r3
    abfc:	88e2983a 	sll	r17,r17,r3
    ac00:	1204b03a 	or	r2,r2,r8
    ac04:	1c007416 	blt	r3,r16,add8 <__adddf3+0x388>
    ac08:	1c21c83a 	sub	r16,r3,r16
    ac0c:	82000044 	addi	r8,r16,1
    ac10:	00c007c4 	movi	r3,31
    ac14:	1a009116 	blt	r3,r8,ae5c <__adddf3+0x40c>
    ac18:	00c00804 	movi	r3,32
    ac1c:	1a07c83a 	sub	r3,r3,r8
    ac20:	8a08d83a 	srl	r4,r17,r8
    ac24:	88e2983a 	sll	r17,r17,r3
    ac28:	10c6983a 	sll	r3,r2,r3
    ac2c:	1210d83a 	srl	r8,r2,r8
    ac30:	8804c03a 	cmpne	r2,r17,zero
    ac34:	1906b03a 	or	r3,r3,r4
    ac38:	18a2b03a 	or	r17,r3,r2
    ac3c:	0021883a 	mov	r16,zero
    ac40:	003fa206 	br	aacc <__adddf3+0x7c>
    ac44:	1890b03a 	or	r8,r3,r2
    ac48:	40017d26 	beq	r8,zero,b240 <__adddf3+0x7f0>
    ac4c:	1011883a 	mov	r8,r2
    ac50:	1823883a 	mov	r17,r3
    ac54:	888001cc 	andi	r2,r17,7
    ac58:	103f9e1e 	bne	r2,zero,aad4 <__adddf3+0x84>
    ac5c:	4004977a 	slli	r2,r8,29
    ac60:	8822d0fa 	srli	r17,r17,3
    ac64:	4010d0fa 	srli	r8,r8,3
    ac68:	9007883a 	mov	r3,r18
    ac6c:	1444b03a 	or	r2,r2,r17
    ac70:	0101ffc4 	movi	r4,2047
    ac74:	81002426 	beq	r16,r4,ad08 <__adddf3+0x2b8>
    ac78:	8120703a 	and	r16,r16,r4
    ac7c:	01000434 	movhi	r4,16
    ac80:	213fffc4 	addi	r4,r4,-1
    ac84:	4110703a 	and	r8,r8,r4
    ac88:	003fa806 	br	ab2c <__adddf3+0xdc>
    ac8c:	8089c83a 	sub	r4,r16,r2
    ac90:	01005e0e 	bge	zero,r4,ae0c <__adddf3+0x3bc>
    ac94:	10002b26 	beq	r2,zero,ad44 <__adddf3+0x2f4>
    ac98:	0081ffc4 	movi	r2,2047
    ac9c:	80bf8b26 	beq	r16,r2,aacc <__adddf3+0x7c>
    aca0:	4a402034 	orhi	r9,r9,128
    aca4:	00800e04 	movi	r2,56
    aca8:	1100a40e 	bge	r2,r4,af3c <__adddf3+0x4ec>
    acac:	498cb03a 	or	r6,r9,r6
    acb0:	300ac03a 	cmpne	r5,r6,zero
    acb4:	0013883a 	mov	r9,zero
    acb8:	2c4b883a 	add	r5,r5,r17
    acbc:	2c63803a 	cmpltu	r17,r5,r17
    acc0:	4a11883a 	add	r8,r9,r8
    acc4:	8a11883a 	add	r8,r17,r8
    acc8:	2823883a 	mov	r17,r5
    accc:	4080202c 	andhi	r2,r8,128
    acd0:	103fe026 	beq	r2,zero,ac54 <__adddf3+0x204>
    acd4:	84000044 	addi	r16,r16,1
    acd8:	0081ffc4 	movi	r2,2047
    acdc:	8080d226 	beq	r16,r2,b028 <__adddf3+0x5d8>
    ace0:	00bfe034 	movhi	r2,65408
    ace4:	10bfffc4 	addi	r2,r2,-1
    ace8:	4090703a 	and	r8,r8,r2
    acec:	880ad07a 	srli	r5,r17,1
    acf0:	400897fa 	slli	r4,r8,31
    acf4:	88c0004c 	andi	r3,r17,1
    acf8:	28e2b03a 	or	r17,r5,r3
    acfc:	4010d07a 	srli	r8,r8,1
    ad00:	2462b03a 	or	r17,r4,r17
    ad04:	003f7106 	br	aacc <__adddf3+0x7c>
    ad08:	4088b03a 	or	r4,r8,r2
    ad0c:	20014526 	beq	r4,zero,b224 <__adddf3+0x7d4>
    ad10:	01000434 	movhi	r4,16
    ad14:	42000234 	orhi	r8,r8,8
    ad18:	213fffc4 	addi	r4,r4,-1
    ad1c:	4110703a 	and	r8,r8,r4
    ad20:	003f8206 	br	ab2c <__adddf3+0xdc>
    ad24:	18ffffc4 	addi	r3,r3,-1
    ad28:	1800491e 	bne	r3,zero,ae50 <__adddf3+0x400>
    ad2c:	898bc83a 	sub	r5,r17,r6
    ad30:	8963803a 	cmpltu	r17,r17,r5
    ad34:	4251c83a 	sub	r8,r8,r9
    ad38:	4451c83a 	sub	r8,r8,r17
    ad3c:	2823883a 	mov	r17,r5
    ad40:	003f9f06 	br	abc0 <__adddf3+0x170>
    ad44:	4984b03a 	or	r2,r9,r6
    ad48:	103f6026 	beq	r2,zero,aacc <__adddf3+0x7c>
    ad4c:	213fffc4 	addi	r4,r4,-1
    ad50:	2000931e 	bne	r4,zero,afa0 <__adddf3+0x550>
    ad54:	898d883a 	add	r6,r17,r6
    ad58:	3463803a 	cmpltu	r17,r6,r17
    ad5c:	4251883a 	add	r8,r8,r9
    ad60:	8a11883a 	add	r8,r17,r8
    ad64:	3023883a 	mov	r17,r6
    ad68:	003fd806 	br	accc <__adddf3+0x27c>
    ad6c:	1800541e 	bne	r3,zero,aec0 <__adddf3+0x470>
    ad70:	80800044 	addi	r2,r16,1
    ad74:	1081ffcc 	andi	r2,r2,2047
    ad78:	00c00044 	movi	r3,1
    ad7c:	1880a00e 	bge	r3,r2,b000 <__adddf3+0x5b0>
    ad80:	8989c83a 	sub	r4,r17,r6
    ad84:	8905803a 	cmpltu	r2,r17,r4
    ad88:	4267c83a 	sub	r19,r8,r9
    ad8c:	98a7c83a 	sub	r19,r19,r2
    ad90:	9880202c 	andhi	r2,r19,128
    ad94:	10006326 	beq	r2,zero,af24 <__adddf3+0x4d4>
    ad98:	3463c83a 	sub	r17,r6,r17
    ad9c:	4a07c83a 	sub	r3,r9,r8
    ada0:	344d803a 	cmpltu	r6,r6,r17
    ada4:	19a7c83a 	sub	r19,r3,r6
    ada8:	3825883a 	mov	r18,r7
    adac:	983f8a1e 	bne	r19,zero,abd8 <__adddf3+0x188>
    adb0:	8809883a 	mov	r4,r17
    adb4:	000d2900 	call	d290 <__clzsi2>
    adb8:	10800804 	addi	r2,r2,32
    adbc:	10fffe04 	addi	r3,r2,-8
    adc0:	010007c4 	movi	r4,31
    adc4:	20ff890e 	bge	r4,r3,abec <__adddf3+0x19c>
    adc8:	10bff604 	addi	r2,r2,-40
    adcc:	8884983a 	sll	r2,r17,r2
    add0:	0023883a 	mov	r17,zero
    add4:	1c3f8c0e 	bge	r3,r16,ac08 <__adddf3+0x1b8>
    add8:	023fe034 	movhi	r8,65408
    addc:	423fffc4 	addi	r8,r8,-1
    ade0:	80e1c83a 	sub	r16,r16,r3
    ade4:	1210703a 	and	r8,r2,r8
    ade8:	003f3806 	br	aacc <__adddf3+0x7c>
    adec:	9007883a 	mov	r3,r18
    adf0:	0011883a 	mov	r8,zero
    adf4:	0005883a 	mov	r2,zero
    adf8:	003f4c06 	br	ab2c <__adddf3+0xdc>
    adfc:	498cb03a 	or	r6,r9,r6
    ae00:	300cc03a 	cmpne	r6,r6,zero
    ae04:	0007883a 	mov	r3,zero
    ae08:	003f6806 	br	abac <__adddf3+0x15c>
    ae0c:	20009c1e 	bne	r4,zero,b080 <__adddf3+0x630>
    ae10:	80800044 	addi	r2,r16,1
    ae14:	1141ffcc 	andi	r5,r2,2047
    ae18:	01000044 	movi	r4,1
    ae1c:	2140670e 	bge	r4,r5,afbc <__adddf3+0x56c>
    ae20:	0101ffc4 	movi	r4,2047
    ae24:	11007f26 	beq	r2,r4,b024 <__adddf3+0x5d4>
    ae28:	898d883a 	add	r6,r17,r6
    ae2c:	4247883a 	add	r3,r8,r9
    ae30:	3451803a 	cmpltu	r8,r6,r17
    ae34:	40d1883a 	add	r8,r8,r3
    ae38:	402297fa 	slli	r17,r8,31
    ae3c:	300cd07a 	srli	r6,r6,1
    ae40:	4010d07a 	srli	r8,r8,1
    ae44:	1021883a 	mov	r16,r2
    ae48:	89a2b03a 	or	r17,r17,r6
    ae4c:	003f1f06 	br	aacc <__adddf3+0x7c>
    ae50:	0081ffc4 	movi	r2,2047
    ae54:	80bf481e 	bne	r16,r2,ab78 <__adddf3+0x128>
    ae58:	003f1c06 	br	aacc <__adddf3+0x7c>
    ae5c:	843ff844 	addi	r16,r16,-31
    ae60:	01000804 	movi	r4,32
    ae64:	1406d83a 	srl	r3,r2,r16
    ae68:	41005026 	beq	r8,r4,afac <__adddf3+0x55c>
    ae6c:	01001004 	movi	r4,64
    ae70:	2211c83a 	sub	r8,r4,r8
    ae74:	1204983a 	sll	r2,r2,r8
    ae78:	88a2b03a 	or	r17,r17,r2
    ae7c:	8822c03a 	cmpne	r17,r17,zero
    ae80:	1c62b03a 	or	r17,r3,r17
    ae84:	0011883a 	mov	r8,zero
    ae88:	0021883a 	mov	r16,zero
    ae8c:	003f7106 	br	ac54 <__adddf3+0x204>
    ae90:	193ff804 	addi	r4,r3,-32
    ae94:	00800804 	movi	r2,32
    ae98:	4908d83a 	srl	r4,r9,r4
    ae9c:	18804526 	beq	r3,r2,afb4 <__adddf3+0x564>
    aea0:	00801004 	movi	r2,64
    aea4:	10c5c83a 	sub	r2,r2,r3
    aea8:	4886983a 	sll	r3,r9,r2
    aeac:	198cb03a 	or	r6,r3,r6
    aeb0:	300cc03a 	cmpne	r6,r6,zero
    aeb4:	218cb03a 	or	r6,r4,r6
    aeb8:	0007883a 	mov	r3,zero
    aebc:	003f3b06 	br	abac <__adddf3+0x15c>
    aec0:	80002a26 	beq	r16,zero,af6c <__adddf3+0x51c>
    aec4:	0101ffc4 	movi	r4,2047
    aec8:	11006826 	beq	r2,r4,b06c <__adddf3+0x61c>
    aecc:	00c7c83a 	sub	r3,zero,r3
    aed0:	42002034 	orhi	r8,r8,128
    aed4:	01000e04 	movi	r4,56
    aed8:	20c07c16 	blt	r4,r3,b0cc <__adddf3+0x67c>
    aedc:	010007c4 	movi	r4,31
    aee0:	20c0da16 	blt	r4,r3,b24c <__adddf3+0x7fc>
    aee4:	01000804 	movi	r4,32
    aee8:	20c9c83a 	sub	r4,r4,r3
    aeec:	4114983a 	sll	r10,r8,r4
    aef0:	88cad83a 	srl	r5,r17,r3
    aef4:	8908983a 	sll	r4,r17,r4
    aef8:	40c6d83a 	srl	r3,r8,r3
    aefc:	5162b03a 	or	r17,r10,r5
    af00:	2008c03a 	cmpne	r4,r4,zero
    af04:	8922b03a 	or	r17,r17,r4
    af08:	3463c83a 	sub	r17,r6,r17
    af0c:	48c7c83a 	sub	r3,r9,r3
    af10:	344d803a 	cmpltu	r6,r6,r17
    af14:	1991c83a 	sub	r8,r3,r6
    af18:	1021883a 	mov	r16,r2
    af1c:	3825883a 	mov	r18,r7
    af20:	003f2706 	br	abc0 <__adddf3+0x170>
    af24:	24d0b03a 	or	r8,r4,r19
    af28:	40001b1e 	bne	r8,zero,af98 <__adddf3+0x548>
    af2c:	0005883a 	mov	r2,zero
    af30:	0007883a 	mov	r3,zero
    af34:	0021883a 	mov	r16,zero
    af38:	003f4d06 	br	ac70 <__adddf3+0x220>
    af3c:	008007c4 	movi	r2,31
    af40:	11003c16 	blt	r2,r4,b034 <__adddf3+0x5e4>
    af44:	00800804 	movi	r2,32
    af48:	1105c83a 	sub	r2,r2,r4
    af4c:	488e983a 	sll	r7,r9,r2
    af50:	310ad83a 	srl	r5,r6,r4
    af54:	3084983a 	sll	r2,r6,r2
    af58:	4912d83a 	srl	r9,r9,r4
    af5c:	394ab03a 	or	r5,r7,r5
    af60:	1004c03a 	cmpne	r2,r2,zero
    af64:	288ab03a 	or	r5,r5,r2
    af68:	003f5306 	br	acb8 <__adddf3+0x268>
    af6c:	4448b03a 	or	r4,r8,r17
    af70:	20003e26 	beq	r4,zero,b06c <__adddf3+0x61c>
    af74:	00c6303a 	nor	r3,zero,r3
    af78:	18003a1e 	bne	r3,zero,b064 <__adddf3+0x614>
    af7c:	3463c83a 	sub	r17,r6,r17
    af80:	4a07c83a 	sub	r3,r9,r8
    af84:	344d803a 	cmpltu	r6,r6,r17
    af88:	1991c83a 	sub	r8,r3,r6
    af8c:	1021883a 	mov	r16,r2
    af90:	3825883a 	mov	r18,r7
    af94:	003f0a06 	br	abc0 <__adddf3+0x170>
    af98:	2023883a 	mov	r17,r4
    af9c:	003f0d06 	br	abd4 <__adddf3+0x184>
    afa0:	0081ffc4 	movi	r2,2047
    afa4:	80bf3f1e 	bne	r16,r2,aca4 <__adddf3+0x254>
    afa8:	003ec806 	br	aacc <__adddf3+0x7c>
    afac:	0005883a 	mov	r2,zero
    afb0:	003fb106 	br	ae78 <__adddf3+0x428>
    afb4:	0007883a 	mov	r3,zero
    afb8:	003fbc06 	br	aeac <__adddf3+0x45c>
    afbc:	4444b03a 	or	r2,r8,r17
    afc0:	8000871e 	bne	r16,zero,b1e0 <__adddf3+0x790>
    afc4:	1000ba26 	beq	r2,zero,b2b0 <__adddf3+0x860>
    afc8:	4984b03a 	or	r2,r9,r6
    afcc:	103ebf26 	beq	r2,zero,aacc <__adddf3+0x7c>
    afd0:	8985883a 	add	r2,r17,r6
    afd4:	4247883a 	add	r3,r8,r9
    afd8:	1451803a 	cmpltu	r8,r2,r17
    afdc:	40d1883a 	add	r8,r8,r3
    afe0:	40c0202c 	andhi	r3,r8,128
    afe4:	1023883a 	mov	r17,r2
    afe8:	183f1a26 	beq	r3,zero,ac54 <__adddf3+0x204>
    afec:	00bfe034 	movhi	r2,65408
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	2021883a 	mov	r16,r4
    aff8:	4090703a 	and	r8,r8,r2
    affc:	003eb306 	br	aacc <__adddf3+0x7c>
    b000:	4444b03a 	or	r2,r8,r17
    b004:	8000291e 	bne	r16,zero,b0ac <__adddf3+0x65c>
    b008:	10004b1e 	bne	r2,zero,b138 <__adddf3+0x6e8>
    b00c:	4990b03a 	or	r8,r9,r6
    b010:	40008b26 	beq	r8,zero,b240 <__adddf3+0x7f0>
    b014:	4811883a 	mov	r8,r9
    b018:	3023883a 	mov	r17,r6
    b01c:	3825883a 	mov	r18,r7
    b020:	003eaa06 	br	aacc <__adddf3+0x7c>
    b024:	1021883a 	mov	r16,r2
    b028:	0011883a 	mov	r8,zero
    b02c:	0005883a 	mov	r2,zero
    b030:	003f0f06 	br	ac70 <__adddf3+0x220>
    b034:	217ff804 	addi	r5,r4,-32
    b038:	00800804 	movi	r2,32
    b03c:	494ad83a 	srl	r5,r9,r5
    b040:	20807d26 	beq	r4,r2,b238 <__adddf3+0x7e8>
    b044:	00801004 	movi	r2,64
    b048:	1109c83a 	sub	r4,r2,r4
    b04c:	4912983a 	sll	r9,r9,r4
    b050:	498cb03a 	or	r6,r9,r6
    b054:	300cc03a 	cmpne	r6,r6,zero
    b058:	298ab03a 	or	r5,r5,r6
    b05c:	0013883a 	mov	r9,zero
    b060:	003f1506 	br	acb8 <__adddf3+0x268>
    b064:	0101ffc4 	movi	r4,2047
    b068:	113f9a1e 	bne	r2,r4,aed4 <__adddf3+0x484>
    b06c:	4811883a 	mov	r8,r9
    b070:	3023883a 	mov	r17,r6
    b074:	1021883a 	mov	r16,r2
    b078:	3825883a 	mov	r18,r7
    b07c:	003e9306 	br	aacc <__adddf3+0x7c>
    b080:	8000161e 	bne	r16,zero,b0dc <__adddf3+0x68c>
    b084:	444ab03a 	or	r5,r8,r17
    b088:	28005126 	beq	r5,zero,b1d0 <__adddf3+0x780>
    b08c:	0108303a 	nor	r4,zero,r4
    b090:	20004d1e 	bne	r4,zero,b1c8 <__adddf3+0x778>
    b094:	89a3883a 	add	r17,r17,r6
    b098:	4253883a 	add	r9,r8,r9
    b09c:	898d803a 	cmpltu	r6,r17,r6
    b0a0:	3251883a 	add	r8,r6,r9
    b0a4:	1021883a 	mov	r16,r2
    b0a8:	003f0806 	br	accc <__adddf3+0x27c>
    b0ac:	1000301e 	bne	r2,zero,b170 <__adddf3+0x720>
    b0b0:	4984b03a 	or	r2,r9,r6
    b0b4:	10007126 	beq	r2,zero,b27c <__adddf3+0x82c>
    b0b8:	4811883a 	mov	r8,r9
    b0bc:	3023883a 	mov	r17,r6
    b0c0:	3825883a 	mov	r18,r7
    b0c4:	0401ffc4 	movi	r16,2047
    b0c8:	003e8006 	br	aacc <__adddf3+0x7c>
    b0cc:	4462b03a 	or	r17,r8,r17
    b0d0:	8822c03a 	cmpne	r17,r17,zero
    b0d4:	0007883a 	mov	r3,zero
    b0d8:	003f8b06 	br	af08 <__adddf3+0x4b8>
    b0dc:	0141ffc4 	movi	r5,2047
    b0e0:	11403b26 	beq	r2,r5,b1d0 <__adddf3+0x780>
    b0e4:	0109c83a 	sub	r4,zero,r4
    b0e8:	42002034 	orhi	r8,r8,128
    b0ec:	01400e04 	movi	r5,56
    b0f0:	29006716 	blt	r5,r4,b290 <__adddf3+0x840>
    b0f4:	014007c4 	movi	r5,31
    b0f8:	29007016 	blt	r5,r4,b2bc <__adddf3+0x86c>
    b0fc:	01400804 	movi	r5,32
    b100:	290bc83a 	sub	r5,r5,r4
    b104:	4154983a 	sll	r10,r8,r5
    b108:	890ed83a 	srl	r7,r17,r4
    b10c:	894a983a 	sll	r5,r17,r5
    b110:	4108d83a 	srl	r4,r8,r4
    b114:	51e2b03a 	or	r17,r10,r7
    b118:	280ac03a 	cmpne	r5,r5,zero
    b11c:	8962b03a 	or	r17,r17,r5
    b120:	89a3883a 	add	r17,r17,r6
    b124:	2253883a 	add	r9,r4,r9
    b128:	898d803a 	cmpltu	r6,r17,r6
    b12c:	3251883a 	add	r8,r6,r9
    b130:	1021883a 	mov	r16,r2
    b134:	003ee506 	br	accc <__adddf3+0x27c>
    b138:	4984b03a 	or	r2,r9,r6
    b13c:	103e6326 	beq	r2,zero,aacc <__adddf3+0x7c>
    b140:	8987c83a 	sub	r3,r17,r6
    b144:	88c9803a 	cmpltu	r4,r17,r3
    b148:	4245c83a 	sub	r2,r8,r9
    b14c:	1105c83a 	sub	r2,r2,r4
    b150:	1100202c 	andhi	r4,r2,128
    b154:	203ebb26 	beq	r4,zero,ac44 <__adddf3+0x1f4>
    b158:	3463c83a 	sub	r17,r6,r17
    b15c:	4a07c83a 	sub	r3,r9,r8
    b160:	344d803a 	cmpltu	r6,r6,r17
    b164:	1991c83a 	sub	r8,r3,r6
    b168:	3825883a 	mov	r18,r7
    b16c:	003e5706 	br	aacc <__adddf3+0x7c>
    b170:	4984b03a 	or	r2,r9,r6
    b174:	10002e26 	beq	r2,zero,b230 <__adddf3+0x7e0>
    b178:	4004d0fa 	srli	r2,r8,3
    b17c:	8822d0fa 	srli	r17,r17,3
    b180:	4010977a 	slli	r8,r8,29
    b184:	10c0022c 	andhi	r3,r2,8
    b188:	4462b03a 	or	r17,r8,r17
    b18c:	18000826 	beq	r3,zero,b1b0 <__adddf3+0x760>
    b190:	4808d0fa 	srli	r4,r9,3
    b194:	20c0022c 	andhi	r3,r4,8
    b198:	1800051e 	bne	r3,zero,b1b0 <__adddf3+0x760>
    b19c:	300cd0fa 	srli	r6,r6,3
    b1a0:	4806977a 	slli	r3,r9,29
    b1a4:	2005883a 	mov	r2,r4
    b1a8:	3825883a 	mov	r18,r7
    b1ac:	19a2b03a 	or	r17,r3,r6
    b1b0:	8810d77a 	srli	r8,r17,29
    b1b4:	100490fa 	slli	r2,r2,3
    b1b8:	882290fa 	slli	r17,r17,3
    b1bc:	0401ffc4 	movi	r16,2047
    b1c0:	4090b03a 	or	r8,r8,r2
    b1c4:	003e4106 	br	aacc <__adddf3+0x7c>
    b1c8:	0141ffc4 	movi	r5,2047
    b1cc:	117fc71e 	bne	r2,r5,b0ec <__adddf3+0x69c>
    b1d0:	4811883a 	mov	r8,r9
    b1d4:	3023883a 	mov	r17,r6
    b1d8:	1021883a 	mov	r16,r2
    b1dc:	003e3b06 	br	aacc <__adddf3+0x7c>
    b1e0:	10002f26 	beq	r2,zero,b2a0 <__adddf3+0x850>
    b1e4:	4984b03a 	or	r2,r9,r6
    b1e8:	10001126 	beq	r2,zero,b230 <__adddf3+0x7e0>
    b1ec:	4004d0fa 	srli	r2,r8,3
    b1f0:	8822d0fa 	srli	r17,r17,3
    b1f4:	4010977a 	slli	r8,r8,29
    b1f8:	10c0022c 	andhi	r3,r2,8
    b1fc:	4462b03a 	or	r17,r8,r17
    b200:	183feb26 	beq	r3,zero,b1b0 <__adddf3+0x760>
    b204:	4808d0fa 	srli	r4,r9,3
    b208:	20c0022c 	andhi	r3,r4,8
    b20c:	183fe81e 	bne	r3,zero,b1b0 <__adddf3+0x760>
    b210:	300cd0fa 	srli	r6,r6,3
    b214:	4806977a 	slli	r3,r9,29
    b218:	2005883a 	mov	r2,r4
    b21c:	19a2b03a 	or	r17,r3,r6
    b220:	003fe306 	br	b1b0 <__adddf3+0x760>
    b224:	0011883a 	mov	r8,zero
    b228:	0005883a 	mov	r2,zero
    b22c:	003e3f06 	br	ab2c <__adddf3+0xdc>
    b230:	0401ffc4 	movi	r16,2047
    b234:	003e2506 	br	aacc <__adddf3+0x7c>
    b238:	0013883a 	mov	r9,zero
    b23c:	003f8406 	br	b050 <__adddf3+0x600>
    b240:	0005883a 	mov	r2,zero
    b244:	0007883a 	mov	r3,zero
    b248:	003e8906 	br	ac70 <__adddf3+0x220>
    b24c:	197ff804 	addi	r5,r3,-32
    b250:	01000804 	movi	r4,32
    b254:	414ad83a 	srl	r5,r8,r5
    b258:	19002426 	beq	r3,r4,b2ec <__adddf3+0x89c>
    b25c:	01001004 	movi	r4,64
    b260:	20c7c83a 	sub	r3,r4,r3
    b264:	40c6983a 	sll	r3,r8,r3
    b268:	1c46b03a 	or	r3,r3,r17
    b26c:	1806c03a 	cmpne	r3,r3,zero
    b270:	28e2b03a 	or	r17,r5,r3
    b274:	0007883a 	mov	r3,zero
    b278:	003f2306 	br	af08 <__adddf3+0x4b8>
    b27c:	0007883a 	mov	r3,zero
    b280:	5811883a 	mov	r8,r11
    b284:	00bfffc4 	movi	r2,-1
    b288:	0401ffc4 	movi	r16,2047
    b28c:	003e7806 	br	ac70 <__adddf3+0x220>
    b290:	4462b03a 	or	r17,r8,r17
    b294:	8822c03a 	cmpne	r17,r17,zero
    b298:	0009883a 	mov	r4,zero
    b29c:	003fa006 	br	b120 <__adddf3+0x6d0>
    b2a0:	4811883a 	mov	r8,r9
    b2a4:	3023883a 	mov	r17,r6
    b2a8:	0401ffc4 	movi	r16,2047
    b2ac:	003e0706 	br	aacc <__adddf3+0x7c>
    b2b0:	4811883a 	mov	r8,r9
    b2b4:	3023883a 	mov	r17,r6
    b2b8:	003e0406 	br	aacc <__adddf3+0x7c>
    b2bc:	21fff804 	addi	r7,r4,-32
    b2c0:	01400804 	movi	r5,32
    b2c4:	41ced83a 	srl	r7,r8,r7
    b2c8:	21400a26 	beq	r4,r5,b2f4 <__adddf3+0x8a4>
    b2cc:	01401004 	movi	r5,64
    b2d0:	2909c83a 	sub	r4,r5,r4
    b2d4:	4108983a 	sll	r4,r8,r4
    b2d8:	2448b03a 	or	r4,r4,r17
    b2dc:	2008c03a 	cmpne	r4,r4,zero
    b2e0:	3922b03a 	or	r17,r7,r4
    b2e4:	0009883a 	mov	r4,zero
    b2e8:	003f8d06 	br	b120 <__adddf3+0x6d0>
    b2ec:	0007883a 	mov	r3,zero
    b2f0:	003fdd06 	br	b268 <__adddf3+0x818>
    b2f4:	0009883a 	mov	r4,zero
    b2f8:	003ff706 	br	b2d8 <__adddf3+0x888>

0000b2fc <__divdf3>:
    b2fc:	defff004 	addi	sp,sp,-64
    b300:	dc800815 	stw	r18,32(sp)
    b304:	2824d53a 	srli	r18,r5,20
    b308:	dd800c15 	stw	r22,48(sp)
    b30c:	282cd7fa 	srli	r22,r5,31
    b310:	dc000615 	stw	r16,24(sp)
    b314:	04000434 	movhi	r16,16
    b318:	843fffc4 	addi	r16,r16,-1
    b31c:	dfc00f15 	stw	ra,60(sp)
    b320:	df000e15 	stw	fp,56(sp)
    b324:	ddc00d15 	stw	r23,52(sp)
    b328:	dd400b15 	stw	r21,44(sp)
    b32c:	dd000a15 	stw	r20,40(sp)
    b330:	dcc00915 	stw	r19,36(sp)
    b334:	dc400715 	stw	r17,28(sp)
    b338:	9481ffcc 	andi	r18,r18,2047
    b33c:	2c20703a 	and	r16,r5,r16
    b340:	b2003fcc 	andi	r8,r22,255
    b344:	90006126 	beq	r18,zero,b4cc <__divdf3+0x1d0>
    b348:	0081ffc4 	movi	r2,2047
    b34c:	202b883a 	mov	r21,r4
    b350:	90803726 	beq	r18,r2,b430 <__divdf3+0x134>
    b354:	80800434 	orhi	r2,r16,16
    b358:	100490fa 	slli	r2,r2,3
    b35c:	2020d77a 	srli	r16,r4,29
    b360:	202a90fa 	slli	r21,r4,3
    b364:	94bf0044 	addi	r18,r18,-1023
    b368:	80a0b03a 	or	r16,r16,r2
    b36c:	0013883a 	mov	r9,zero
    b370:	000b883a 	mov	r5,zero
    b374:	3806d53a 	srli	r3,r7,20
    b378:	382ed7fa 	srli	r23,r7,31
    b37c:	04400434 	movhi	r17,16
    b380:	8c7fffc4 	addi	r17,r17,-1
    b384:	18c1ffcc 	andi	r3,r3,2047
    b388:	3029883a 	mov	r20,r6
    b38c:	3c62703a 	and	r17,r7,r17
    b390:	bf003fcc 	andi	fp,r23,255
    b394:	18006e26 	beq	r3,zero,b550 <__divdf3+0x254>
    b398:	0081ffc4 	movi	r2,2047
    b39c:	18806626 	beq	r3,r2,b538 <__divdf3+0x23c>
    b3a0:	88800434 	orhi	r2,r17,16
    b3a4:	100490fa 	slli	r2,r2,3
    b3a8:	3022d77a 	srli	r17,r6,29
    b3ac:	302890fa 	slli	r20,r6,3
    b3b0:	18ff0044 	addi	r3,r3,-1023
    b3b4:	88a2b03a 	or	r17,r17,r2
    b3b8:	000f883a 	mov	r7,zero
    b3bc:	b5e6f03a 	xor	r19,r22,r23
    b3c0:	3a4cb03a 	or	r6,r7,r9
    b3c4:	008003c4 	movi	r2,15
    b3c8:	9809883a 	mov	r4,r19
    b3cc:	90c7c83a 	sub	r3,r18,r3
    b3d0:	9cc03fcc 	andi	r19,r19,255
    b3d4:	11809636 	bltu	r2,r6,b630 <__divdf3+0x334>
    b3d8:	300c90ba 	slli	r6,r6,2
    b3dc:	00800074 	movhi	r2,1
    b3e0:	10acfc04 	addi	r2,r2,-19472
    b3e4:	308d883a 	add	r6,r6,r2
    b3e8:	30800017 	ldw	r2,0(r6)
    b3ec:	1000683a 	jmp	r2
    b3f0:	0000b630 	cmpltui	zero,zero,728
    b3f4:	0000b468 	cmpgeui	zero,zero,721
    b3f8:	0000b620 	cmpeqi	zero,zero,728
    b3fc:	0000b45c 	xori	zero,zero,721
    b400:	0000b620 	cmpeqi	zero,zero,728
    b404:	0000b5f4 	movhi	zero,727
    b408:	0000b620 	cmpeqi	zero,zero,728
    b40c:	0000b45c 	xori	zero,zero,721
    b410:	0000b468 	cmpgeui	zero,zero,721
    b414:	0000b468 	cmpgeui	zero,zero,721
    b418:	0000b5f4 	movhi	zero,727
    b41c:	0000b45c 	xori	zero,zero,721
    b420:	0000b44c 	andi	zero,zero,721
    b424:	0000b44c 	andi	zero,zero,721
    b428:	0000b44c 	andi	zero,zero,721
    b42c:	0000b9b8 	rdprs	zero,zero,742
    b430:	2404b03a 	or	r2,r4,r16
    b434:	10006c1e 	bne	r2,zero,b5e8 <__divdf3+0x2ec>
    b438:	02400204 	movi	r9,8
    b43c:	0021883a 	mov	r16,zero
    b440:	002b883a 	mov	r21,zero
    b444:	01400084 	movi	r5,2
    b448:	003fca06 	br	b374 <__divdf3+0x78>
    b44c:	8023883a 	mov	r17,r16
    b450:	a829883a 	mov	r20,r21
    b454:	4039883a 	mov	fp,r8
    b458:	280f883a 	mov	r7,r5
    b45c:	00800084 	movi	r2,2
    b460:	3881601e 	bne	r7,r2,b9e4 <__divdf3+0x6e8>
    b464:	e027883a 	mov	r19,fp
    b468:	9900004c 	andi	r4,r19,1
    b46c:	0081ffc4 	movi	r2,2047
    b470:	0021883a 	mov	r16,zero
    b474:	002b883a 	mov	r21,zero
    b478:	1004953a 	slli	r2,r2,20
    b47c:	20c03fcc 	andi	r3,r4,255
    b480:	01400434 	movhi	r5,16
    b484:	297fffc4 	addi	r5,r5,-1
    b488:	180697fa 	slli	r3,r3,31
    b48c:	8160703a 	and	r16,r16,r5
    b490:	80a0b03a 	or	r16,r16,r2
    b494:	80c6b03a 	or	r3,r16,r3
    b498:	a805883a 	mov	r2,r21
    b49c:	dfc00f17 	ldw	ra,60(sp)
    b4a0:	df000e17 	ldw	fp,56(sp)
    b4a4:	ddc00d17 	ldw	r23,52(sp)
    b4a8:	dd800c17 	ldw	r22,48(sp)
    b4ac:	dd400b17 	ldw	r21,44(sp)
    b4b0:	dd000a17 	ldw	r20,40(sp)
    b4b4:	dcc00917 	ldw	r19,36(sp)
    b4b8:	dc800817 	ldw	r18,32(sp)
    b4bc:	dc400717 	ldw	r17,28(sp)
    b4c0:	dc000617 	ldw	r16,24(sp)
    b4c4:	dec01004 	addi	sp,sp,64
    b4c8:	f800283a 	ret
    b4cc:	2404b03a 	or	r2,r4,r16
    b4d0:	2023883a 	mov	r17,r4
    b4d4:	10003f26 	beq	r2,zero,b5d4 <__divdf3+0x2d8>
    b4d8:	80015e26 	beq	r16,zero,ba54 <__divdf3+0x758>
    b4dc:	8009883a 	mov	r4,r16
    b4e0:	d9800215 	stw	r6,8(sp)
    b4e4:	d9c00515 	stw	r7,20(sp)
    b4e8:	da000415 	stw	r8,16(sp)
    b4ec:	000d2900 	call	d290 <__clzsi2>
    b4f0:	d9800217 	ldw	r6,8(sp)
    b4f4:	d9c00517 	ldw	r7,20(sp)
    b4f8:	da000417 	ldw	r8,16(sp)
    b4fc:	113ffd44 	addi	r4,r2,-11
    b500:	00c00704 	movi	r3,28
    b504:	19014f16 	blt	r3,r4,ba44 <__divdf3+0x748>
    b508:	00c00744 	movi	r3,29
    b50c:	157ffe04 	addi	r21,r2,-8
    b510:	1907c83a 	sub	r3,r3,r4
    b514:	8560983a 	sll	r16,r16,r21
    b518:	88c6d83a 	srl	r3,r17,r3
    b51c:	8d6a983a 	sll	r21,r17,r21
    b520:	1c20b03a 	or	r16,r3,r16
    b524:	1080fcc4 	addi	r2,r2,1011
    b528:	00a5c83a 	sub	r18,zero,r2
    b52c:	0013883a 	mov	r9,zero
    b530:	000b883a 	mov	r5,zero
    b534:	003f8f06 	br	b374 <__divdf3+0x78>
    b538:	3444b03a 	or	r2,r6,r17
    b53c:	1000231e 	bne	r2,zero,b5cc <__divdf3+0x2d0>
    b540:	0023883a 	mov	r17,zero
    b544:	0029883a 	mov	r20,zero
    b548:	01c00084 	movi	r7,2
    b54c:	003f9b06 	br	b3bc <__divdf3+0xc0>
    b550:	3444b03a 	or	r2,r6,r17
    b554:	10001926 	beq	r2,zero,b5bc <__divdf3+0x2c0>
    b558:	88014b26 	beq	r17,zero,ba88 <__divdf3+0x78c>
    b55c:	8809883a 	mov	r4,r17
    b560:	d9400115 	stw	r5,4(sp)
    b564:	d9800215 	stw	r6,8(sp)
    b568:	da000415 	stw	r8,16(sp)
    b56c:	da400315 	stw	r9,12(sp)
    b570:	000d2900 	call	d290 <__clzsi2>
    b574:	d9400117 	ldw	r5,4(sp)
    b578:	d9800217 	ldw	r6,8(sp)
    b57c:	da000417 	ldw	r8,16(sp)
    b580:	da400317 	ldw	r9,12(sp)
    b584:	113ffd44 	addi	r4,r2,-11
    b588:	00c00704 	movi	r3,28
    b58c:	19013a16 	blt	r3,r4,ba78 <__divdf3+0x77c>
    b590:	00c00744 	movi	r3,29
    b594:	153ffe04 	addi	r20,r2,-8
    b598:	1907c83a 	sub	r3,r3,r4
    b59c:	8d22983a 	sll	r17,r17,r20
    b5a0:	30c6d83a 	srl	r3,r6,r3
    b5a4:	3528983a 	sll	r20,r6,r20
    b5a8:	1c62b03a 	or	r17,r3,r17
    b5ac:	1080fcc4 	addi	r2,r2,1011
    b5b0:	0087c83a 	sub	r3,zero,r2
    b5b4:	000f883a 	mov	r7,zero
    b5b8:	003f8006 	br	b3bc <__divdf3+0xc0>
    b5bc:	0023883a 	mov	r17,zero
    b5c0:	0029883a 	mov	r20,zero
    b5c4:	01c00044 	movi	r7,1
    b5c8:	003f7c06 	br	b3bc <__divdf3+0xc0>
    b5cc:	01c000c4 	movi	r7,3
    b5d0:	003f7a06 	br	b3bc <__divdf3+0xc0>
    b5d4:	02400104 	movi	r9,4
    b5d8:	0021883a 	mov	r16,zero
    b5dc:	002b883a 	mov	r21,zero
    b5e0:	01400044 	movi	r5,1
    b5e4:	003f6306 	br	b374 <__divdf3+0x78>
    b5e8:	02400304 	movi	r9,12
    b5ec:	014000c4 	movi	r5,3
    b5f0:	003f6006 	br	b374 <__divdf3+0x78>
    b5f4:	04000434 	movhi	r16,16
    b5f8:	0009883a 	mov	r4,zero
    b5fc:	843fffc4 	addi	r16,r16,-1
    b600:	057fffc4 	movi	r21,-1
    b604:	0081ffc4 	movi	r2,2047
    b608:	003f9b06 	br	b478 <__divdf3+0x17c>
    b60c:	00c00044 	movi	r3,1
    b610:	1887c83a 	sub	r3,r3,r2
    b614:	01000e04 	movi	r4,56
    b618:	20c1530e 	bge	r4,r3,bb68 <__divdf3+0x86c>
    b61c:	9900004c 	andi	r4,r19,1
    b620:	0005883a 	mov	r2,zero
    b624:	0021883a 	mov	r16,zero
    b628:	002b883a 	mov	r21,zero
    b62c:	003f9206 	br	b478 <__divdf3+0x17c>
    b630:	8c012e36 	bltu	r17,r16,baec <__divdf3+0x7f0>
    b634:	84412c26 	beq	r16,r17,bae8 <__divdf3+0x7ec>
    b638:	a82f883a 	mov	r23,r21
    b63c:	18ffffc4 	addi	r3,r3,-1
    b640:	002b883a 	mov	r21,zero
    b644:	a004d63a 	srli	r2,r20,24
    b648:	8822923a 	slli	r17,r17,8
    b64c:	a028923a 	slli	r20,r20,8
    b650:	8009883a 	mov	r4,r16
    b654:	88acb03a 	or	r22,r17,r2
    b658:	dd000015 	stw	r20,0(sp)
    b65c:	b028d43a 	srli	r20,r22,16
    b660:	d8c00215 	stw	r3,8(sp)
    b664:	b4bfffcc 	andi	r18,r22,65535
    b668:	a00b883a 	mov	r5,r20
    b66c:	000a96c0 	call	a96c <__udivsi3>
    b670:	100b883a 	mov	r5,r2
    b674:	9009883a 	mov	r4,r18
    b678:	1023883a 	mov	r17,r2
    b67c:	000aa280 	call	aa28 <__mulsi3>
    b680:	8009883a 	mov	r4,r16
    b684:	a00b883a 	mov	r5,r20
    b688:	1039883a 	mov	fp,r2
    b68c:	000a9d00 	call	a9d0 <__umodsi3>
    b690:	1004943a 	slli	r2,r2,16
    b694:	b808d43a 	srli	r4,r23,16
    b698:	d8c00217 	ldw	r3,8(sp)
    b69c:	2084b03a 	or	r2,r4,r2
    b6a0:	1700062e 	bgeu	r2,fp,b6bc <__divdf3+0x3c0>
    b6a4:	1585883a 	add	r2,r2,r22
    b6a8:	893fffc4 	addi	r4,r17,-1
    b6ac:	15811d36 	bltu	r2,r22,bb24 <__divdf3+0x828>
    b6b0:	17011c2e 	bgeu	r2,fp,bb24 <__divdf3+0x828>
    b6b4:	8c7fff84 	addi	r17,r17,-2
    b6b8:	1585883a 	add	r2,r2,r22
    b6bc:	1739c83a 	sub	fp,r2,fp
    b6c0:	a00b883a 	mov	r5,r20
    b6c4:	e009883a 	mov	r4,fp
    b6c8:	d8c00215 	stw	r3,8(sp)
    b6cc:	000a96c0 	call	a96c <__udivsi3>
    b6d0:	100b883a 	mov	r5,r2
    b6d4:	9009883a 	mov	r4,r18
    b6d8:	1021883a 	mov	r16,r2
    b6dc:	000aa280 	call	aa28 <__mulsi3>
    b6e0:	a00b883a 	mov	r5,r20
    b6e4:	e009883a 	mov	r4,fp
    b6e8:	d8800415 	stw	r2,16(sp)
    b6ec:	000a9d00 	call	a9d0 <__umodsi3>
    b6f0:	1004943a 	slli	r2,r2,16
    b6f4:	da000417 	ldw	r8,16(sp)
    b6f8:	bdffffcc 	andi	r23,r23,65535
    b6fc:	b884b03a 	or	r2,r23,r2
    b700:	d8c00217 	ldw	r3,8(sp)
    b704:	1200062e 	bgeu	r2,r8,b720 <__divdf3+0x424>
    b708:	1585883a 	add	r2,r2,r22
    b70c:	813fffc4 	addi	r4,r16,-1
    b710:	15810236 	bltu	r2,r22,bb1c <__divdf3+0x820>
    b714:	1201012e 	bgeu	r2,r8,bb1c <__divdf3+0x820>
    b718:	843fff84 	addi	r16,r16,-2
    b71c:	1585883a 	add	r2,r2,r22
    b720:	8822943a 	slli	r17,r17,16
    b724:	d9800017 	ldw	r6,0(sp)
    b728:	1211c83a 	sub	r8,r2,r8
    b72c:	8c22b03a 	or	r17,r17,r16
    b730:	373fffcc 	andi	fp,r6,65535
    b734:	8abfffcc 	andi	r10,r17,65535
    b738:	8820d43a 	srli	r16,r17,16
    b73c:	5009883a 	mov	r4,r10
    b740:	e00b883a 	mov	r5,fp
    b744:	302ed43a 	srli	r23,r6,16
    b748:	d8c00215 	stw	r3,8(sp)
    b74c:	da000415 	stw	r8,16(sp)
    b750:	da800115 	stw	r10,4(sp)
    b754:	000aa280 	call	aa28 <__mulsi3>
    b758:	800b883a 	mov	r5,r16
    b75c:	e009883a 	mov	r4,fp
    b760:	d8800515 	stw	r2,20(sp)
    b764:	000aa280 	call	aa28 <__mulsi3>
    b768:	8009883a 	mov	r4,r16
    b76c:	b80b883a 	mov	r5,r23
    b770:	d8800315 	stw	r2,12(sp)
    b774:	000aa280 	call	aa28 <__mulsi3>
    b778:	da800117 	ldw	r10,4(sp)
    b77c:	b80b883a 	mov	r5,r23
    b780:	1021883a 	mov	r16,r2
    b784:	5009883a 	mov	r4,r10
    b788:	000aa280 	call	aa28 <__mulsi3>
    b78c:	d9c00517 	ldw	r7,20(sp)
    b790:	da400317 	ldw	r9,12(sp)
    b794:	d8c00217 	ldw	r3,8(sp)
    b798:	3808d43a 	srli	r4,r7,16
    b79c:	1245883a 	add	r2,r2,r9
    b7a0:	da000417 	ldw	r8,16(sp)
    b7a4:	2085883a 	add	r2,r4,r2
    b7a8:	1240022e 	bgeu	r2,r9,b7b4 <__divdf3+0x4b8>
    b7ac:	01000074 	movhi	r4,1
    b7b0:	8121883a 	add	r16,r16,r4
    b7b4:	1008d43a 	srli	r4,r2,16
    b7b8:	1004943a 	slli	r2,r2,16
    b7bc:	39ffffcc 	andi	r7,r7,65535
    b7c0:	2409883a 	add	r4,r4,r16
    b7c4:	11c5883a 	add	r2,r2,r7
    b7c8:	4100bb36 	bltu	r8,r4,bab8 <__divdf3+0x7bc>
    b7cc:	4100d726 	beq	r8,r4,bb2c <__divdf3+0x830>
    b7d0:	4109c83a 	sub	r4,r8,r4
    b7d4:	a8a1c83a 	sub	r16,r21,r2
    b7d8:	ac2b803a 	cmpltu	r21,r21,r16
    b7dc:	256bc83a 	sub	r21,r4,r21
    b7e0:	b540d926 	beq	r22,r21,bb48 <__divdf3+0x84c>
    b7e4:	a00b883a 	mov	r5,r20
    b7e8:	a809883a 	mov	r4,r21
    b7ec:	d8c00215 	stw	r3,8(sp)
    b7f0:	000a96c0 	call	a96c <__udivsi3>
    b7f4:	100b883a 	mov	r5,r2
    b7f8:	9009883a 	mov	r4,r18
    b7fc:	d8800515 	stw	r2,20(sp)
    b800:	000aa280 	call	aa28 <__mulsi3>
    b804:	a809883a 	mov	r4,r21
    b808:	a00b883a 	mov	r5,r20
    b80c:	d8800415 	stw	r2,16(sp)
    b810:	000a9d00 	call	a9d0 <__umodsi3>
    b814:	1004943a 	slli	r2,r2,16
    b818:	8008d43a 	srli	r4,r16,16
    b81c:	da000417 	ldw	r8,16(sp)
    b820:	d8c00217 	ldw	r3,8(sp)
    b824:	2084b03a 	or	r2,r4,r2
    b828:	d9c00517 	ldw	r7,20(sp)
    b82c:	1200062e 	bgeu	r2,r8,b848 <__divdf3+0x54c>
    b830:	1585883a 	add	r2,r2,r22
    b834:	393fffc4 	addi	r4,r7,-1
    b838:	1580c536 	bltu	r2,r22,bb50 <__divdf3+0x854>
    b83c:	1200c42e 	bgeu	r2,r8,bb50 <__divdf3+0x854>
    b840:	39ffff84 	addi	r7,r7,-2
    b844:	1585883a 	add	r2,r2,r22
    b848:	122bc83a 	sub	r21,r2,r8
    b84c:	a00b883a 	mov	r5,r20
    b850:	a809883a 	mov	r4,r21
    b854:	d8c00215 	stw	r3,8(sp)
    b858:	d9c00515 	stw	r7,20(sp)
    b85c:	000a96c0 	call	a96c <__udivsi3>
    b860:	9009883a 	mov	r4,r18
    b864:	100b883a 	mov	r5,r2
    b868:	d8800415 	stw	r2,16(sp)
    b86c:	000aa280 	call	aa28 <__mulsi3>
    b870:	a809883a 	mov	r4,r21
    b874:	a00b883a 	mov	r5,r20
    b878:	1025883a 	mov	r18,r2
    b87c:	000a9d00 	call	a9d0 <__umodsi3>
    b880:	1004943a 	slli	r2,r2,16
    b884:	813fffcc 	andi	r4,r16,65535
    b888:	d8c00217 	ldw	r3,8(sp)
    b88c:	20a0b03a 	or	r16,r4,r2
    b890:	d9c00517 	ldw	r7,20(sp)
    b894:	da000417 	ldw	r8,16(sp)
    b898:	8480062e 	bgeu	r16,r18,b8b4 <__divdf3+0x5b8>
    b89c:	85a1883a 	add	r16,r16,r22
    b8a0:	40bfffc4 	addi	r2,r8,-1
    b8a4:	8580ac36 	bltu	r16,r22,bb58 <__divdf3+0x85c>
    b8a8:	8480ab2e 	bgeu	r16,r18,bb58 <__divdf3+0x85c>
    b8ac:	423fff84 	addi	r8,r8,-2
    b8b0:	85a1883a 	add	r16,r16,r22
    b8b4:	3804943a 	slli	r2,r7,16
    b8b8:	84a1c83a 	sub	r16,r16,r18
    b8bc:	e009883a 	mov	r4,fp
    b8c0:	1228b03a 	or	r20,r2,r8
    b8c4:	a1ffffcc 	andi	r7,r20,65535
    b8c8:	a024d43a 	srli	r18,r20,16
    b8cc:	380b883a 	mov	r5,r7
    b8d0:	d8c00215 	stw	r3,8(sp)
    b8d4:	d9c00515 	stw	r7,20(sp)
    b8d8:	000aa280 	call	aa28 <__mulsi3>
    b8dc:	900b883a 	mov	r5,r18
    b8e0:	e009883a 	mov	r4,fp
    b8e4:	102b883a 	mov	r21,r2
    b8e8:	000aa280 	call	aa28 <__mulsi3>
    b8ec:	900b883a 	mov	r5,r18
    b8f0:	b809883a 	mov	r4,r23
    b8f4:	1039883a 	mov	fp,r2
    b8f8:	000aa280 	call	aa28 <__mulsi3>
    b8fc:	d9c00517 	ldw	r7,20(sp)
    b900:	b80b883a 	mov	r5,r23
    b904:	1025883a 	mov	r18,r2
    b908:	3809883a 	mov	r4,r7
    b90c:	000aa280 	call	aa28 <__mulsi3>
    b910:	a808d43a 	srli	r4,r21,16
    b914:	1705883a 	add	r2,r2,fp
    b918:	d8c00217 	ldw	r3,8(sp)
    b91c:	2085883a 	add	r2,r4,r2
    b920:	1700022e 	bgeu	r2,fp,b92c <__divdf3+0x630>
    b924:	01000074 	movhi	r4,1
    b928:	9125883a 	add	r18,r18,r4
    b92c:	1008d43a 	srli	r4,r2,16
    b930:	1004943a 	slli	r2,r2,16
    b934:	ad7fffcc 	andi	r21,r21,65535
    b938:	2489883a 	add	r4,r4,r18
    b93c:	1545883a 	add	r2,r2,r21
    b940:	81003836 	bltu	r16,r4,ba24 <__divdf3+0x728>
    b944:	81003626 	beq	r16,r4,ba20 <__divdf3+0x724>
    b948:	a5000054 	ori	r20,r20,1
    b94c:	1880ffc4 	addi	r2,r3,1023
    b950:	00bf2e0e 	bge	zero,r2,b60c <__divdf3+0x310>
    b954:	a10001cc 	andi	r4,r20,7
    b958:	20000726 	beq	r4,zero,b978 <__divdf3+0x67c>
    b95c:	a10003cc 	andi	r4,r20,15
    b960:	01400104 	movi	r5,4
    b964:	21400426 	beq	r4,r5,b978 <__divdf3+0x67c>
    b968:	a149883a 	add	r4,r20,r5
    b96c:	2529803a 	cmpltu	r20,r4,r20
    b970:	8d23883a 	add	r17,r17,r20
    b974:	2029883a 	mov	r20,r4
    b978:	8900402c 	andhi	r4,r17,256
    b97c:	20000426 	beq	r4,zero,b990 <__divdf3+0x694>
    b980:	18810004 	addi	r2,r3,1024
    b984:	00ffc034 	movhi	r3,65280
    b988:	18ffffc4 	addi	r3,r3,-1
    b98c:	88e2703a 	and	r17,r17,r3
    b990:	00c1ff84 	movi	r3,2046
    b994:	18beb416 	blt	r3,r2,b468 <__divdf3+0x16c>
    b998:	a028d0fa 	srli	r20,r20,3
    b99c:	882a977a 	slli	r21,r17,29
    b9a0:	8820927a 	slli	r16,r17,9
    b9a4:	1081ffcc 	andi	r2,r2,2047
    b9a8:	ad2ab03a 	or	r21,r21,r20
    b9ac:	8020d33a 	srli	r16,r16,12
    b9b0:	9900004c 	andi	r4,r19,1
    b9b4:	003eb006 	br	b478 <__divdf3+0x17c>
    b9b8:	8080022c 	andhi	r2,r16,8
    b9bc:	10001226 	beq	r2,zero,ba08 <__divdf3+0x70c>
    b9c0:	8880022c 	andhi	r2,r17,8
    b9c4:	1000101e 	bne	r2,zero,ba08 <__divdf3+0x70c>
    b9c8:	00800434 	movhi	r2,16
    b9cc:	8c000234 	orhi	r16,r17,8
    b9d0:	10bfffc4 	addi	r2,r2,-1
    b9d4:	b809883a 	mov	r4,r23
    b9d8:	80a0703a 	and	r16,r16,r2
    b9dc:	a02b883a 	mov	r21,r20
    b9e0:	003f0806 	br	b604 <__divdf3+0x308>
    b9e4:	008000c4 	movi	r2,3
    b9e8:	3880b126 	beq	r7,r2,bcb0 <__divdf3+0x9b4>
    b9ec:	00800044 	movi	r2,1
    b9f0:	38805b1e 	bne	r7,r2,bb60 <__divdf3+0x864>
    b9f4:	e009883a 	mov	r4,fp
    b9f8:	0005883a 	mov	r2,zero
    b9fc:	0021883a 	mov	r16,zero
    ba00:	002b883a 	mov	r21,zero
    ba04:	003e9c06 	br	b478 <__divdf3+0x17c>
    ba08:	00800434 	movhi	r2,16
    ba0c:	84000234 	orhi	r16,r16,8
    ba10:	10bfffc4 	addi	r2,r2,-1
    ba14:	b009883a 	mov	r4,r22
    ba18:	80a0703a 	and	r16,r16,r2
    ba1c:	003ef906 	br	b604 <__divdf3+0x308>
    ba20:	103fca26 	beq	r2,zero,b94c <__divdf3+0x650>
    ba24:	b421883a 	add	r16,r22,r16
    ba28:	a17fffc4 	addi	r5,r20,-1
    ba2c:	8580422e 	bgeu	r16,r22,bb38 <__divdf3+0x83c>
    ba30:	2829883a 	mov	r20,r5
    ba34:	813fc41e 	bne	r16,r4,b948 <__divdf3+0x64c>
    ba38:	d9800017 	ldw	r6,0(sp)
    ba3c:	30bfc21e 	bne	r6,r2,b948 <__divdf3+0x64c>
    ba40:	003fc206 	br	b94c <__divdf3+0x650>
    ba44:	143ff604 	addi	r16,r2,-40
    ba48:	8c20983a 	sll	r16,r17,r16
    ba4c:	002b883a 	mov	r21,zero
    ba50:	003eb406 	br	b524 <__divdf3+0x228>
    ba54:	d9800215 	stw	r6,8(sp)
    ba58:	d9c00515 	stw	r7,20(sp)
    ba5c:	da000415 	stw	r8,16(sp)
    ba60:	000d2900 	call	d290 <__clzsi2>
    ba64:	10800804 	addi	r2,r2,32
    ba68:	da000417 	ldw	r8,16(sp)
    ba6c:	d9c00517 	ldw	r7,20(sp)
    ba70:	d9800217 	ldw	r6,8(sp)
    ba74:	003ea106 	br	b4fc <__divdf3+0x200>
    ba78:	147ff604 	addi	r17,r2,-40
    ba7c:	3462983a 	sll	r17,r6,r17
    ba80:	0029883a 	mov	r20,zero
    ba84:	003ec906 	br	b5ac <__divdf3+0x2b0>
    ba88:	3009883a 	mov	r4,r6
    ba8c:	d9400115 	stw	r5,4(sp)
    ba90:	d9800215 	stw	r6,8(sp)
    ba94:	da000415 	stw	r8,16(sp)
    ba98:	da400315 	stw	r9,12(sp)
    ba9c:	000d2900 	call	d290 <__clzsi2>
    baa0:	10800804 	addi	r2,r2,32
    baa4:	da400317 	ldw	r9,12(sp)
    baa8:	da000417 	ldw	r8,16(sp)
    baac:	d9800217 	ldw	r6,8(sp)
    bab0:	d9400117 	ldw	r5,4(sp)
    bab4:	003eb306 	br	b584 <__divdf3+0x288>
    bab8:	d9800017 	ldw	r6,0(sp)
    babc:	a9ab883a 	add	r21,r21,r6
    bac0:	a98b803a 	cmpltu	r5,r21,r6
    bac4:	2d8b883a 	add	r5,r5,r22
    bac8:	2a11883a 	add	r8,r5,r8
    bacc:	897fffc4 	addi	r5,r17,-1
    bad0:	b2000c2e 	bgeu	r22,r8,bb04 <__divdf3+0x808>
    bad4:	41003f36 	bltu	r8,r4,bbd4 <__divdf3+0x8d8>
    bad8:	22006c26 	beq	r4,r8,bc8c <__divdf3+0x990>
    badc:	4109c83a 	sub	r4,r8,r4
    bae0:	2823883a 	mov	r17,r5
    bae4:	003f3b06 	br	b7d4 <__divdf3+0x4d8>
    bae8:	ad3ed336 	bltu	r21,r20,b638 <__divdf3+0x33c>
    baec:	a804d07a 	srli	r2,r21,1
    baf0:	802e97fa 	slli	r23,r16,31
    baf4:	a82a97fa 	slli	r21,r21,31
    baf8:	8020d07a 	srli	r16,r16,1
    bafc:	b8aeb03a 	or	r23,r23,r2
    bb00:	003ed006 	br	b644 <__divdf3+0x348>
    bb04:	b23ff51e 	bne	r22,r8,badc <__divdf3+0x7e0>
    bb08:	d9800017 	ldw	r6,0(sp)
    bb0c:	a9bff12e 	bgeu	r21,r6,bad4 <__divdf3+0x7d8>
    bb10:	b109c83a 	sub	r4,r22,r4
    bb14:	2823883a 	mov	r17,r5
    bb18:	003f2e06 	br	b7d4 <__divdf3+0x4d8>
    bb1c:	2021883a 	mov	r16,r4
    bb20:	003eff06 	br	b720 <__divdf3+0x424>
    bb24:	2023883a 	mov	r17,r4
    bb28:	003ee406 	br	b6bc <__divdf3+0x3c0>
    bb2c:	a8bfe236 	bltu	r21,r2,bab8 <__divdf3+0x7bc>
    bb30:	0009883a 	mov	r4,zero
    bb34:	003f2706 	br	b7d4 <__divdf3+0x4d8>
    bb38:	81002d36 	bltu	r16,r4,bbf0 <__divdf3+0x8f4>
    bb3c:	24005626 	beq	r4,r16,bc98 <__divdf3+0x99c>
    bb40:	2829883a 	mov	r20,r5
    bb44:	003f8006 	br	b948 <__divdf3+0x64c>
    bb48:	053fffc4 	movi	r20,-1
    bb4c:	003f7f06 	br	b94c <__divdf3+0x650>
    bb50:	200f883a 	mov	r7,r4
    bb54:	003f3c06 	br	b848 <__divdf3+0x54c>
    bb58:	1011883a 	mov	r8,r2
    bb5c:	003f5506 	br	b8b4 <__divdf3+0x5b8>
    bb60:	e027883a 	mov	r19,fp
    bb64:	003f7906 	br	b94c <__divdf3+0x650>
    bb68:	010007c4 	movi	r4,31
    bb6c:	20c02816 	blt	r4,r3,bc10 <__divdf3+0x914>
    bb70:	00800804 	movi	r2,32
    bb74:	10c5c83a 	sub	r2,r2,r3
    bb78:	888a983a 	sll	r5,r17,r2
    bb7c:	a0c8d83a 	srl	r4,r20,r3
    bb80:	a084983a 	sll	r2,r20,r2
    bb84:	88e2d83a 	srl	r17,r17,r3
    bb88:	2906b03a 	or	r3,r5,r4
    bb8c:	1004c03a 	cmpne	r2,r2,zero
    bb90:	1886b03a 	or	r3,r3,r2
    bb94:	188001cc 	andi	r2,r3,7
    bb98:	10000726 	beq	r2,zero,bbb8 <__divdf3+0x8bc>
    bb9c:	188003cc 	andi	r2,r3,15
    bba0:	01000104 	movi	r4,4
    bba4:	11000426 	beq	r2,r4,bbb8 <__divdf3+0x8bc>
    bba8:	1805883a 	mov	r2,r3
    bbac:	10c00104 	addi	r3,r2,4
    bbb0:	1885803a 	cmpltu	r2,r3,r2
    bbb4:	88a3883a 	add	r17,r17,r2
    bbb8:	8880202c 	andhi	r2,r17,128
    bbbc:	10002926 	beq	r2,zero,bc64 <__divdf3+0x968>
    bbc0:	9900004c 	andi	r4,r19,1
    bbc4:	00800044 	movi	r2,1
    bbc8:	0021883a 	mov	r16,zero
    bbcc:	002b883a 	mov	r21,zero
    bbd0:	003e2906 	br	b478 <__divdf3+0x17c>
    bbd4:	d9800017 	ldw	r6,0(sp)
    bbd8:	8c7fff84 	addi	r17,r17,-2
    bbdc:	a9ab883a 	add	r21,r21,r6
    bbe0:	a98b803a 	cmpltu	r5,r21,r6
    bbe4:	2d8b883a 	add	r5,r5,r22
    bbe8:	2a11883a 	add	r8,r5,r8
    bbec:	003ef806 	br	b7d0 <__divdf3+0x4d4>
    bbf0:	d9800017 	ldw	r6,0(sp)
    bbf4:	318f883a 	add	r7,r6,r6
    bbf8:	398b803a 	cmpltu	r5,r7,r6
    bbfc:	2d8d883a 	add	r6,r5,r22
    bc00:	81a1883a 	add	r16,r16,r6
    bc04:	a17fff84 	addi	r5,r20,-2
    bc08:	d9c00015 	stw	r7,0(sp)
    bc0c:	003f8806 	br	ba30 <__divdf3+0x734>
    bc10:	013ff844 	movi	r4,-31
    bc14:	2085c83a 	sub	r2,r4,r2
    bc18:	8888d83a 	srl	r4,r17,r2
    bc1c:	00800804 	movi	r2,32
    bc20:	18802126 	beq	r3,r2,bca8 <__divdf3+0x9ac>
    bc24:	04001004 	movi	r16,64
    bc28:	80c7c83a 	sub	r3,r16,r3
    bc2c:	88e0983a 	sll	r16,r17,r3
    bc30:	8504b03a 	or	r2,r16,r20
    bc34:	1004c03a 	cmpne	r2,r2,zero
    bc38:	2084b03a 	or	r2,r4,r2
    bc3c:	144001cc 	andi	r17,r2,7
    bc40:	88000d1e 	bne	r17,zero,bc78 <__divdf3+0x97c>
    bc44:	0021883a 	mov	r16,zero
    bc48:	102ad0fa 	srli	r21,r2,3
    bc4c:	9900004c 	andi	r4,r19,1
    bc50:	0005883a 	mov	r2,zero
    bc54:	ac6ab03a 	or	r21,r21,r17
    bc58:	003e0706 	br	b478 <__divdf3+0x17c>
    bc5c:	1007883a 	mov	r3,r2
    bc60:	0023883a 	mov	r17,zero
    bc64:	8820927a 	slli	r16,r17,9
    bc68:	1805883a 	mov	r2,r3
    bc6c:	8822977a 	slli	r17,r17,29
    bc70:	8020d33a 	srli	r16,r16,12
    bc74:	003ff406 	br	bc48 <__divdf3+0x94c>
    bc78:	10c003cc 	andi	r3,r2,15
    bc7c:	01000104 	movi	r4,4
    bc80:	193ff626 	beq	r3,r4,bc5c <__divdf3+0x960>
    bc84:	0023883a 	mov	r17,zero
    bc88:	003fc806 	br	bbac <__divdf3+0x8b0>
    bc8c:	a8bfd136 	bltu	r21,r2,bbd4 <__divdf3+0x8d8>
    bc90:	2823883a 	mov	r17,r5
    bc94:	003fa606 	br	bb30 <__divdf3+0x834>
    bc98:	d9800017 	ldw	r6,0(sp)
    bc9c:	30bfd436 	bltu	r6,r2,bbf0 <__divdf3+0x8f4>
    bca0:	2829883a 	mov	r20,r5
    bca4:	003f6406 	br	ba38 <__divdf3+0x73c>
    bca8:	0021883a 	mov	r16,zero
    bcac:	003fe006 	br	bc30 <__divdf3+0x934>
    bcb0:	00800434 	movhi	r2,16
    bcb4:	8c000234 	orhi	r16,r17,8
    bcb8:	10bfffc4 	addi	r2,r2,-1
    bcbc:	e009883a 	mov	r4,fp
    bcc0:	80a0703a 	and	r16,r16,r2
    bcc4:	a02b883a 	mov	r21,r20
    bcc8:	003e4e06 	br	b604 <__divdf3+0x308>

0000bccc <__eqdf2>:
    bccc:	2804d53a 	srli	r2,r5,20
    bcd0:	3806d53a 	srli	r3,r7,20
    bcd4:	02000434 	movhi	r8,16
    bcd8:	423fffc4 	addi	r8,r8,-1
    bcdc:	1081ffcc 	andi	r2,r2,2047
    bce0:	0281ffc4 	movi	r10,2047
    bce4:	2a12703a 	and	r9,r5,r8
    bce8:	18c1ffcc 	andi	r3,r3,2047
    bcec:	3a10703a 	and	r8,r7,r8
    bcf0:	280ad7fa 	srli	r5,r5,31
    bcf4:	380ed7fa 	srli	r7,r7,31
    bcf8:	12801026 	beq	r2,r10,bd3c <__eqdf2+0x70>
    bcfc:	0281ffc4 	movi	r10,2047
    bd00:	1a800a26 	beq	r3,r10,bd2c <__eqdf2+0x60>
    bd04:	10c00226 	beq	r2,r3,bd10 <__eqdf2+0x44>
    bd08:	00800044 	movi	r2,1
    bd0c:	f800283a 	ret
    bd10:	4a3ffd1e 	bne	r9,r8,bd08 <__eqdf2+0x3c>
    bd14:	21bffc1e 	bne	r4,r6,bd08 <__eqdf2+0x3c>
    bd18:	29c00c26 	beq	r5,r7,bd4c <__eqdf2+0x80>
    bd1c:	103ffa1e 	bne	r2,zero,bd08 <__eqdf2+0x3c>
    bd20:	2244b03a 	or	r2,r4,r9
    bd24:	1004c03a 	cmpne	r2,r2,zero
    bd28:	f800283a 	ret
    bd2c:	3214b03a 	or	r10,r6,r8
    bd30:	503ff426 	beq	r10,zero,bd04 <__eqdf2+0x38>
    bd34:	00800044 	movi	r2,1
    bd38:	f800283a 	ret
    bd3c:	2254b03a 	or	r10,r4,r9
    bd40:	503fee26 	beq	r10,zero,bcfc <__eqdf2+0x30>
    bd44:	00800044 	movi	r2,1
    bd48:	f800283a 	ret
    bd4c:	0005883a 	mov	r2,zero
    bd50:	f800283a 	ret

0000bd54 <__gedf2>:
    bd54:	2804d53a 	srli	r2,r5,20
    bd58:	3806d53a 	srli	r3,r7,20
    bd5c:	02000434 	movhi	r8,16
    bd60:	423fffc4 	addi	r8,r8,-1
    bd64:	1081ffcc 	andi	r2,r2,2047
    bd68:	0241ffc4 	movi	r9,2047
    bd6c:	2a14703a 	and	r10,r5,r8
    bd70:	18c1ffcc 	andi	r3,r3,2047
    bd74:	3a10703a 	and	r8,r7,r8
    bd78:	280ad7fa 	srli	r5,r5,31
    bd7c:	380ed7fa 	srli	r7,r7,31
    bd80:	12401d26 	beq	r2,r9,bdf8 <__gedf2+0xa4>
    bd84:	0241ffc4 	movi	r9,2047
    bd88:	1a401226 	beq	r3,r9,bdd4 <__gedf2+0x80>
    bd8c:	1000081e 	bne	r2,zero,bdb0 <__gedf2+0x5c>
    bd90:	2296b03a 	or	r11,r4,r10
    bd94:	5813003a 	cmpeq	r9,r11,zero
    bd98:	1800091e 	bne	r3,zero,bdc0 <__gedf2+0x6c>
    bd9c:	3218b03a 	or	r12,r6,r8
    bda0:	6000071e 	bne	r12,zero,bdc0 <__gedf2+0x6c>
    bda4:	0005883a 	mov	r2,zero
    bda8:	5800101e 	bne	r11,zero,bdec <__gedf2+0x98>
    bdac:	f800283a 	ret
    bdb0:	18000c1e 	bne	r3,zero,bde4 <__gedf2+0x90>
    bdb4:	3212b03a 	or	r9,r6,r8
    bdb8:	48000c26 	beq	r9,zero,bdec <__gedf2+0x98>
    bdbc:	0013883a 	mov	r9,zero
    bdc0:	39c03fcc 	andi	r7,r7,255
    bdc4:	48000826 	beq	r9,zero,bde8 <__gedf2+0x94>
    bdc8:	38000926 	beq	r7,zero,bdf0 <__gedf2+0x9c>
    bdcc:	00800044 	movi	r2,1
    bdd0:	f800283a 	ret
    bdd4:	3212b03a 	or	r9,r6,r8
    bdd8:	483fec26 	beq	r9,zero,bd8c <__gedf2+0x38>
    bddc:	00bfff84 	movi	r2,-2
    bde0:	f800283a 	ret
    bde4:	39c03fcc 	andi	r7,r7,255
    bde8:	29c00626 	beq	r5,r7,be04 <__gedf2+0xb0>
    bdec:	283ff726 	beq	r5,zero,bdcc <__gedf2+0x78>
    bdf0:	00bfffc4 	movi	r2,-1
    bdf4:	f800283a 	ret
    bdf8:	2292b03a 	or	r9,r4,r10
    bdfc:	483fe126 	beq	r9,zero,bd84 <__gedf2+0x30>
    be00:	003ff606 	br	bddc <__gedf2+0x88>
    be04:	18bff916 	blt	r3,r2,bdec <__gedf2+0x98>
    be08:	10c00316 	blt	r2,r3,be18 <__gedf2+0xc4>
    be0c:	42bff736 	bltu	r8,r10,bdec <__gedf2+0x98>
    be10:	52000326 	beq	r10,r8,be20 <__gedf2+0xcc>
    be14:	5200042e 	bgeu	r10,r8,be28 <__gedf2+0xd4>
    be18:	283fec1e 	bne	r5,zero,bdcc <__gedf2+0x78>
    be1c:	003ff406 	br	bdf0 <__gedf2+0x9c>
    be20:	313ff236 	bltu	r6,r4,bdec <__gedf2+0x98>
    be24:	21bffc36 	bltu	r4,r6,be18 <__gedf2+0xc4>
    be28:	0005883a 	mov	r2,zero
    be2c:	f800283a 	ret

0000be30 <__ledf2>:
    be30:	2804d53a 	srli	r2,r5,20
    be34:	3810d53a 	srli	r8,r7,20
    be38:	00c00434 	movhi	r3,16
    be3c:	18ffffc4 	addi	r3,r3,-1
    be40:	1081ffcc 	andi	r2,r2,2047
    be44:	0241ffc4 	movi	r9,2047
    be48:	28d4703a 	and	r10,r5,r3
    be4c:	4201ffcc 	andi	r8,r8,2047
    be50:	38c6703a 	and	r3,r7,r3
    be54:	280ad7fa 	srli	r5,r5,31
    be58:	380ed7fa 	srli	r7,r7,31
    be5c:	12401f26 	beq	r2,r9,bedc <__ledf2+0xac>
    be60:	0241ffc4 	movi	r9,2047
    be64:	42401426 	beq	r8,r9,beb8 <__ledf2+0x88>
    be68:	1000091e 	bne	r2,zero,be90 <__ledf2+0x60>
    be6c:	2296b03a 	or	r11,r4,r10
    be70:	5813003a 	cmpeq	r9,r11,zero
    be74:	29403fcc 	andi	r5,r5,255
    be78:	40000a1e 	bne	r8,zero,bea4 <__ledf2+0x74>
    be7c:	30d8b03a 	or	r12,r6,r3
    be80:	6000081e 	bne	r12,zero,bea4 <__ledf2+0x74>
    be84:	0005883a 	mov	r2,zero
    be88:	5800111e 	bne	r11,zero,bed0 <__ledf2+0xa0>
    be8c:	f800283a 	ret
    be90:	29403fcc 	andi	r5,r5,255
    be94:	40000c1e 	bne	r8,zero,bec8 <__ledf2+0x98>
    be98:	30d2b03a 	or	r9,r6,r3
    be9c:	48000c26 	beq	r9,zero,bed0 <__ledf2+0xa0>
    bea0:	0013883a 	mov	r9,zero
    bea4:	39c03fcc 	andi	r7,r7,255
    bea8:	48000826 	beq	r9,zero,becc <__ledf2+0x9c>
    beac:	38001126 	beq	r7,zero,bef4 <__ledf2+0xc4>
    beb0:	00800044 	movi	r2,1
    beb4:	f800283a 	ret
    beb8:	30d2b03a 	or	r9,r6,r3
    bebc:	483fea26 	beq	r9,zero,be68 <__ledf2+0x38>
    bec0:	00800084 	movi	r2,2
    bec4:	f800283a 	ret
    bec8:	39c03fcc 	andi	r7,r7,255
    becc:	39400726 	beq	r7,r5,beec <__ledf2+0xbc>
    bed0:	2800081e 	bne	r5,zero,bef4 <__ledf2+0xc4>
    bed4:	00800044 	movi	r2,1
    bed8:	f800283a 	ret
    bedc:	2292b03a 	or	r9,r4,r10
    bee0:	483fdf26 	beq	r9,zero,be60 <__ledf2+0x30>
    bee4:	00800084 	movi	r2,2
    bee8:	f800283a 	ret
    beec:	4080030e 	bge	r8,r2,befc <__ledf2+0xcc>
    bef0:	383fef26 	beq	r7,zero,beb0 <__ledf2+0x80>
    bef4:	00bfffc4 	movi	r2,-1
    bef8:	f800283a 	ret
    befc:	123feb16 	blt	r2,r8,beac <__ledf2+0x7c>
    bf00:	1abff336 	bltu	r3,r10,bed0 <__ledf2+0xa0>
    bf04:	50c00326 	beq	r10,r3,bf14 <__ledf2+0xe4>
    bf08:	50c0042e 	bgeu	r10,r3,bf1c <__ledf2+0xec>
    bf0c:	283fe81e 	bne	r5,zero,beb0 <__ledf2+0x80>
    bf10:	003ff806 	br	bef4 <__ledf2+0xc4>
    bf14:	313fee36 	bltu	r6,r4,bed0 <__ledf2+0xa0>
    bf18:	21bffc36 	bltu	r4,r6,bf0c <__ledf2+0xdc>
    bf1c:	0005883a 	mov	r2,zero
    bf20:	f800283a 	ret

0000bf24 <__muldf3>:
    bf24:	deffee04 	addi	sp,sp,-72
    bf28:	dd000c15 	stw	r20,48(sp)
    bf2c:	2828d53a 	srli	r20,r5,20
    bf30:	ddc00f15 	stw	r23,60(sp)
    bf34:	282ed7fa 	srli	r23,r5,31
    bf38:	dc000815 	stw	r16,32(sp)
    bf3c:	04000434 	movhi	r16,16
    bf40:	dcc00b15 	stw	r19,44(sp)
    bf44:	843fffc4 	addi	r16,r16,-1
    bf48:	dfc01115 	stw	ra,68(sp)
    bf4c:	df001015 	stw	fp,64(sp)
    bf50:	dd800e15 	stw	r22,56(sp)
    bf54:	dd400d15 	stw	r21,52(sp)
    bf58:	dc800a15 	stw	r18,40(sp)
    bf5c:	dc400915 	stw	r17,36(sp)
    bf60:	a501ffcc 	andi	r20,r20,2047
    bf64:	2c20703a 	and	r16,r5,r16
    bf68:	b827883a 	mov	r19,r23
    bf6c:	ba403fcc 	andi	r9,r23,255
    bf70:	a0006026 	beq	r20,zero,c0f4 <__muldf3+0x1d0>
    bf74:	0081ffc4 	movi	r2,2047
    bf78:	202d883a 	mov	r22,r4
    bf7c:	a0803626 	beq	r20,r2,c058 <__muldf3+0x134>
    bf80:	84000434 	orhi	r16,r16,16
    bf84:	200ad77a 	srli	r5,r4,29
    bf88:	800490fa 	slli	r2,r16,3
    bf8c:	202c90fa 	slli	r22,r4,3
    bf90:	a53f0044 	addi	r20,r20,-1023
    bf94:	28a0b03a 	or	r16,r5,r2
    bf98:	002b883a 	mov	r21,zero
    bf9c:	000b883a 	mov	r5,zero
    bfa0:	3804d53a 	srli	r2,r7,20
    bfa4:	3838d7fa 	srli	fp,r7,31
    bfa8:	04400434 	movhi	r17,16
    bfac:	8c7fffc4 	addi	r17,r17,-1
    bfb0:	1081ffcc 	andi	r2,r2,2047
    bfb4:	3025883a 	mov	r18,r6
    bfb8:	3c62703a 	and	r17,r7,r17
    bfbc:	e2803fcc 	andi	r10,fp,255
    bfc0:	10006d26 	beq	r2,zero,c178 <__muldf3+0x254>
    bfc4:	00c1ffc4 	movi	r3,2047
    bfc8:	10c06526 	beq	r2,r3,c160 <__muldf3+0x23c>
    bfcc:	8c400434 	orhi	r17,r17,16
    bfd0:	300ed77a 	srli	r7,r6,29
    bfd4:	880690fa 	slli	r3,r17,3
    bfd8:	302490fa 	slli	r18,r6,3
    bfdc:	10bf0044 	addi	r2,r2,-1023
    bfe0:	38e2b03a 	or	r17,r7,r3
    bfe4:	000f883a 	mov	r7,zero
    bfe8:	a087883a 	add	r3,r20,r2
    bfec:	010003c4 	movi	r4,15
    bff0:	3d44b03a 	or	r2,r7,r21
    bff4:	e5ccf03a 	xor	r6,fp,r23
    bff8:	1a000044 	addi	r8,r3,1
    bffc:	20809b36 	bltu	r4,r2,c26c <__muldf3+0x348>
    c000:	100490ba 	slli	r2,r2,2
    c004:	01000074 	movhi	r4,1
    c008:	21300604 	addi	r4,r4,-16360
    c00c:	1105883a 	add	r2,r2,r4
    c010:	10800017 	ldw	r2,0(r2)
    c014:	1000683a 	jmp	r2
    c018:	0000c26c 	andhi	zero,zero,777
    c01c:	0000c078 	rdprs	zero,zero,769
    c020:	0000c078 	rdprs	zero,zero,769
    c024:	0000c074 	movhi	zero,769
    c028:	0000c248 	cmpgei	zero,zero,777
    c02c:	0000c248 	cmpgei	zero,zero,777
    c030:	0000c230 	cmpltui	zero,zero,776
    c034:	0000c074 	movhi	zero,769
    c038:	0000c248 	cmpgei	zero,zero,777
    c03c:	0000c230 	cmpltui	zero,zero,776
    c040:	0000c248 	cmpgei	zero,zero,777
    c044:	0000c074 	movhi	zero,769
    c048:	0000c258 	cmpnei	zero,zero,777
    c04c:	0000c258 	cmpnei	zero,zero,777
    c050:	0000c258 	cmpnei	zero,zero,777
    c054:	0000c5b8 	rdprs	zero,zero,790
    c058:	2404b03a 	or	r2,r4,r16
    c05c:	1000711e 	bne	r2,zero,c224 <__muldf3+0x300>
    c060:	05400204 	movi	r21,8
    c064:	0021883a 	mov	r16,zero
    c068:	002d883a 	mov	r22,zero
    c06c:	01400084 	movi	r5,2
    c070:	003fcb06 	br	bfa0 <__muldf3+0x7c>
    c074:	500d883a 	mov	r6,r10
    c078:	00800084 	movi	r2,2
    c07c:	38805926 	beq	r7,r2,c1e4 <__muldf3+0x2c0>
    c080:	008000c4 	movi	r2,3
    c084:	3881bb26 	beq	r7,r2,c774 <__muldf3+0x850>
    c088:	00800044 	movi	r2,1
    c08c:	3881961e 	bne	r7,r2,c6e8 <__muldf3+0x7c4>
    c090:	3027883a 	mov	r19,r6
    c094:	0005883a 	mov	r2,zero
    c098:	0021883a 	mov	r16,zero
    c09c:	002d883a 	mov	r22,zero
    c0a0:	1004953a 	slli	r2,r2,20
    c0a4:	98c03fcc 	andi	r3,r19,255
    c0a8:	04400434 	movhi	r17,16
    c0ac:	8c7fffc4 	addi	r17,r17,-1
    c0b0:	180697fa 	slli	r3,r3,31
    c0b4:	8460703a 	and	r16,r16,r17
    c0b8:	80a0b03a 	or	r16,r16,r2
    c0bc:	80c6b03a 	or	r3,r16,r3
    c0c0:	b005883a 	mov	r2,r22
    c0c4:	dfc01117 	ldw	ra,68(sp)
    c0c8:	df001017 	ldw	fp,64(sp)
    c0cc:	ddc00f17 	ldw	r23,60(sp)
    c0d0:	dd800e17 	ldw	r22,56(sp)
    c0d4:	dd400d17 	ldw	r21,52(sp)
    c0d8:	dd000c17 	ldw	r20,48(sp)
    c0dc:	dcc00b17 	ldw	r19,44(sp)
    c0e0:	dc800a17 	ldw	r18,40(sp)
    c0e4:	dc400917 	ldw	r17,36(sp)
    c0e8:	dc000817 	ldw	r16,32(sp)
    c0ec:	dec01204 	addi	sp,sp,72
    c0f0:	f800283a 	ret
    c0f4:	2404b03a 	or	r2,r4,r16
    c0f8:	202b883a 	mov	r21,r4
    c0fc:	10004426 	beq	r2,zero,c210 <__muldf3+0x2ec>
    c100:	80015126 	beq	r16,zero,c648 <__muldf3+0x724>
    c104:	8009883a 	mov	r4,r16
    c108:	d9800715 	stw	r6,28(sp)
    c10c:	d9c00215 	stw	r7,8(sp)
    c110:	da400415 	stw	r9,16(sp)
    c114:	000d2900 	call	d290 <__clzsi2>
    c118:	d9800717 	ldw	r6,28(sp)
    c11c:	d9c00217 	ldw	r7,8(sp)
    c120:	da400417 	ldw	r9,16(sp)
    c124:	113ffd44 	addi	r4,r2,-11
    c128:	00c00704 	movi	r3,28
    c12c:	19014216 	blt	r3,r4,c638 <__muldf3+0x714>
    c130:	00c00744 	movi	r3,29
    c134:	15bffe04 	addi	r22,r2,-8
    c138:	1907c83a 	sub	r3,r3,r4
    c13c:	85a0983a 	sll	r16,r16,r22
    c140:	a8c6d83a 	srl	r3,r21,r3
    c144:	adac983a 	sll	r22,r21,r22
    c148:	1c20b03a 	or	r16,r3,r16
    c14c:	1080fcc4 	addi	r2,r2,1011
    c150:	00a9c83a 	sub	r20,zero,r2
    c154:	002b883a 	mov	r21,zero
    c158:	000b883a 	mov	r5,zero
    c15c:	003f9006 	br	bfa0 <__muldf3+0x7c>
    c160:	3446b03a 	or	r3,r6,r17
    c164:	1800281e 	bne	r3,zero,c208 <__muldf3+0x2e4>
    c168:	0023883a 	mov	r17,zero
    c16c:	0025883a 	mov	r18,zero
    c170:	01c00084 	movi	r7,2
    c174:	003f9c06 	br	bfe8 <__muldf3+0xc4>
    c178:	3446b03a 	or	r3,r6,r17
    c17c:	18001e26 	beq	r3,zero,c1f8 <__muldf3+0x2d4>
    c180:	88012126 	beq	r17,zero,c608 <__muldf3+0x6e4>
    c184:	8809883a 	mov	r4,r17
    c188:	d9400215 	stw	r5,8(sp)
    c18c:	d9800715 	stw	r6,28(sp)
    c190:	da400415 	stw	r9,16(sp)
    c194:	da800315 	stw	r10,12(sp)
    c198:	000d2900 	call	d290 <__clzsi2>
    c19c:	d9400217 	ldw	r5,8(sp)
    c1a0:	d9800717 	ldw	r6,28(sp)
    c1a4:	da400417 	ldw	r9,16(sp)
    c1a8:	da800317 	ldw	r10,12(sp)
    c1ac:	113ffd44 	addi	r4,r2,-11
    c1b0:	00c00704 	movi	r3,28
    c1b4:	19011016 	blt	r3,r4,c5f8 <__muldf3+0x6d4>
    c1b8:	00c00744 	movi	r3,29
    c1bc:	14bffe04 	addi	r18,r2,-8
    c1c0:	1907c83a 	sub	r3,r3,r4
    c1c4:	8ca2983a 	sll	r17,r17,r18
    c1c8:	30c6d83a 	srl	r3,r6,r3
    c1cc:	34a4983a 	sll	r18,r6,r18
    c1d0:	1c62b03a 	or	r17,r3,r17
    c1d4:	1080fcc4 	addi	r2,r2,1011
    c1d8:	0085c83a 	sub	r2,zero,r2
    c1dc:	000f883a 	mov	r7,zero
    c1e0:	003f8106 	br	bfe8 <__muldf3+0xc4>
    c1e4:	3027883a 	mov	r19,r6
    c1e8:	0081ffc4 	movi	r2,2047
    c1ec:	0021883a 	mov	r16,zero
    c1f0:	002d883a 	mov	r22,zero
    c1f4:	003faa06 	br	c0a0 <__muldf3+0x17c>
    c1f8:	0023883a 	mov	r17,zero
    c1fc:	0025883a 	mov	r18,zero
    c200:	01c00044 	movi	r7,1
    c204:	003f7806 	br	bfe8 <__muldf3+0xc4>
    c208:	01c000c4 	movi	r7,3
    c20c:	003f7606 	br	bfe8 <__muldf3+0xc4>
    c210:	05400104 	movi	r21,4
    c214:	0021883a 	mov	r16,zero
    c218:	002d883a 	mov	r22,zero
    c21c:	01400044 	movi	r5,1
    c220:	003f5f06 	br	bfa0 <__muldf3+0x7c>
    c224:	05400304 	movi	r21,12
    c228:	014000c4 	movi	r5,3
    c22c:	003f5c06 	br	bfa0 <__muldf3+0x7c>
    c230:	04000434 	movhi	r16,16
    c234:	0027883a 	mov	r19,zero
    c238:	843fffc4 	addi	r16,r16,-1
    c23c:	05bfffc4 	movi	r22,-1
    c240:	0081ffc4 	movi	r2,2047
    c244:	003f9606 	br	c0a0 <__muldf3+0x17c>
    c248:	8023883a 	mov	r17,r16
    c24c:	b025883a 	mov	r18,r22
    c250:	280f883a 	mov	r7,r5
    c254:	003f8806 	br	c078 <__muldf3+0x154>
    c258:	8023883a 	mov	r17,r16
    c25c:	b025883a 	mov	r18,r22
    c260:	480d883a 	mov	r6,r9
    c264:	280f883a 	mov	r7,r5
    c268:	003f8306 	br	c078 <__muldf3+0x154>
    c26c:	b026d43a 	srli	r19,r22,16
    c270:	902ed43a 	srli	r23,r18,16
    c274:	b5bfffcc 	andi	r22,r22,65535
    c278:	94bfffcc 	andi	r18,r18,65535
    c27c:	b00b883a 	mov	r5,r22
    c280:	9009883a 	mov	r4,r18
    c284:	d8c00515 	stw	r3,20(sp)
    c288:	d9800715 	stw	r6,28(sp)
    c28c:	da000615 	stw	r8,24(sp)
    c290:	000aa280 	call	aa28 <__mulsi3>
    c294:	980b883a 	mov	r5,r19
    c298:	9009883a 	mov	r4,r18
    c29c:	1029883a 	mov	r20,r2
    c2a0:	000aa280 	call	aa28 <__mulsi3>
    c2a4:	b80b883a 	mov	r5,r23
    c2a8:	9809883a 	mov	r4,r19
    c2ac:	102b883a 	mov	r21,r2
    c2b0:	000aa280 	call	aa28 <__mulsi3>
    c2b4:	b809883a 	mov	r4,r23
    c2b8:	b00b883a 	mov	r5,r22
    c2bc:	1039883a 	mov	fp,r2
    c2c0:	000aa280 	call	aa28 <__mulsi3>
    c2c4:	a008d43a 	srli	r4,r20,16
    c2c8:	1545883a 	add	r2,r2,r21
    c2cc:	d8c00517 	ldw	r3,20(sp)
    c2d0:	2085883a 	add	r2,r4,r2
    c2d4:	d9800717 	ldw	r6,28(sp)
    c2d8:	da000617 	ldw	r8,24(sp)
    c2dc:	1540022e 	bgeu	r2,r21,c2e8 <__muldf3+0x3c4>
    c2e0:	01000074 	movhi	r4,1
    c2e4:	e139883a 	add	fp,fp,r4
    c2e8:	100e943a 	slli	r7,r2,16
    c2ec:	1004d43a 	srli	r2,r2,16
    c2f0:	882ad43a 	srli	r21,r17,16
    c2f4:	a53fffcc 	andi	r20,r20,65535
    c2f8:	8c7fffcc 	andi	r17,r17,65535
    c2fc:	3d29883a 	add	r20,r7,r20
    c300:	b00b883a 	mov	r5,r22
    c304:	8809883a 	mov	r4,r17
    c308:	d8c00515 	stw	r3,20(sp)
    c30c:	d9800715 	stw	r6,28(sp)
    c310:	da000615 	stw	r8,24(sp)
    c314:	dd000115 	stw	r20,4(sp)
    c318:	d8800015 	stw	r2,0(sp)
    c31c:	000aa280 	call	aa28 <__mulsi3>
    c320:	980b883a 	mov	r5,r19
    c324:	8809883a 	mov	r4,r17
    c328:	d8800215 	stw	r2,8(sp)
    c32c:	000aa280 	call	aa28 <__mulsi3>
    c330:	9809883a 	mov	r4,r19
    c334:	a80b883a 	mov	r5,r21
    c338:	1029883a 	mov	r20,r2
    c33c:	000aa280 	call	aa28 <__mulsi3>
    c340:	b00b883a 	mov	r5,r22
    c344:	a809883a 	mov	r4,r21
    c348:	d8800415 	stw	r2,16(sp)
    c34c:	000aa280 	call	aa28 <__mulsi3>
    c350:	d9c00217 	ldw	r7,8(sp)
    c354:	1505883a 	add	r2,r2,r20
    c358:	d8c00517 	ldw	r3,20(sp)
    c35c:	3826d43a 	srli	r19,r7,16
    c360:	d9800717 	ldw	r6,28(sp)
    c364:	da000617 	ldw	r8,24(sp)
    c368:	9885883a 	add	r2,r19,r2
    c36c:	da400417 	ldw	r9,16(sp)
    c370:	1500022e 	bgeu	r2,r20,c37c <__muldf3+0x458>
    c374:	01000074 	movhi	r4,1
    c378:	4913883a 	add	r9,r9,r4
    c37c:	1028d43a 	srli	r20,r2,16
    c380:	1004943a 	slli	r2,r2,16
    c384:	802cd43a 	srli	r22,r16,16
    c388:	843fffcc 	andi	r16,r16,65535
    c38c:	3cffffcc 	andi	r19,r7,65535
    c390:	9009883a 	mov	r4,r18
    c394:	800b883a 	mov	r5,r16
    c398:	a269883a 	add	r20,r20,r9
    c39c:	d8c00515 	stw	r3,20(sp)
    c3a0:	d9800715 	stw	r6,28(sp)
    c3a4:	da000615 	stw	r8,24(sp)
    c3a8:	14e7883a 	add	r19,r2,r19
    c3ac:	000aa280 	call	aa28 <__mulsi3>
    c3b0:	9009883a 	mov	r4,r18
    c3b4:	b00b883a 	mov	r5,r22
    c3b8:	d8800315 	stw	r2,12(sp)
    c3bc:	000aa280 	call	aa28 <__mulsi3>
    c3c0:	b809883a 	mov	r4,r23
    c3c4:	b00b883a 	mov	r5,r22
    c3c8:	d8800215 	stw	r2,8(sp)
    c3cc:	000aa280 	call	aa28 <__mulsi3>
    c3d0:	b80b883a 	mov	r5,r23
    c3d4:	8009883a 	mov	r4,r16
    c3d8:	d8800415 	stw	r2,16(sp)
    c3dc:	000aa280 	call	aa28 <__mulsi3>
    c3e0:	da800317 	ldw	r10,12(sp)
    c3e4:	d9c00217 	ldw	r7,8(sp)
    c3e8:	d9000017 	ldw	r4,0(sp)
    c3ec:	502ed43a 	srli	r23,r10,16
    c3f0:	11c5883a 	add	r2,r2,r7
    c3f4:	24e5883a 	add	r18,r4,r19
    c3f8:	b885883a 	add	r2,r23,r2
    c3fc:	d8c00517 	ldw	r3,20(sp)
    c400:	d9800717 	ldw	r6,28(sp)
    c404:	da000617 	ldw	r8,24(sp)
    c408:	da400417 	ldw	r9,16(sp)
    c40c:	11c0022e 	bgeu	r2,r7,c418 <__muldf3+0x4f4>
    c410:	01000074 	movhi	r4,1
    c414:	4913883a 	add	r9,r9,r4
    c418:	100ed43a 	srli	r7,r2,16
    c41c:	1004943a 	slli	r2,r2,16
    c420:	55ffffcc 	andi	r23,r10,65535
    c424:	3a53883a 	add	r9,r7,r9
    c428:	8809883a 	mov	r4,r17
    c42c:	800b883a 	mov	r5,r16
    c430:	d8c00515 	stw	r3,20(sp)
    c434:	d9800715 	stw	r6,28(sp)
    c438:	da000615 	stw	r8,24(sp)
    c43c:	da400415 	stw	r9,16(sp)
    c440:	15ef883a 	add	r23,r2,r23
    c444:	000aa280 	call	aa28 <__mulsi3>
    c448:	8809883a 	mov	r4,r17
    c44c:	b00b883a 	mov	r5,r22
    c450:	d8800215 	stw	r2,8(sp)
    c454:	000aa280 	call	aa28 <__mulsi3>
    c458:	b00b883a 	mov	r5,r22
    c45c:	a809883a 	mov	r4,r21
    c460:	d8800315 	stw	r2,12(sp)
    c464:	000aa280 	call	aa28 <__mulsi3>
    c468:	8009883a 	mov	r4,r16
    c46c:	a80b883a 	mov	r5,r21
    c470:	1023883a 	mov	r17,r2
    c474:	000aa280 	call	aa28 <__mulsi3>
    c478:	d9c00217 	ldw	r7,8(sp)
    c47c:	da800317 	ldw	r10,12(sp)
    c480:	d8c00517 	ldw	r3,20(sp)
    c484:	3808d43a 	srli	r4,r7,16
    c488:	1285883a 	add	r2,r2,r10
    c48c:	d9800717 	ldw	r6,28(sp)
    c490:	2085883a 	add	r2,r4,r2
    c494:	da000617 	ldw	r8,24(sp)
    c498:	da400417 	ldw	r9,16(sp)
    c49c:	1280022e 	bgeu	r2,r10,c4a8 <__muldf3+0x584>
    c4a0:	01000074 	movhi	r4,1
    c4a4:	8923883a 	add	r17,r17,r4
    c4a8:	1008943a 	slli	r4,r2,16
    c4ac:	39ffffcc 	andi	r7,r7,65535
    c4b0:	e4b9883a 	add	fp,fp,r18
    c4b4:	21cf883a 	add	r7,r4,r7
    c4b8:	e4e7803a 	cmpltu	r19,fp,r19
    c4bc:	3d0f883a 	add	r7,r7,r20
    c4c0:	bf39883a 	add	fp,r23,fp
    c4c4:	99c9883a 	add	r4,r19,r7
    c4c8:	e5ef803a 	cmpltu	r23,fp,r23
    c4cc:	490b883a 	add	r5,r9,r4
    c4d0:	1004d43a 	srli	r2,r2,16
    c4d4:	b965883a 	add	r18,r23,r5
    c4d8:	24c9803a 	cmpltu	r4,r4,r19
    c4dc:	3d29803a 	cmpltu	r20,r7,r20
    c4e0:	a128b03a 	or	r20,r20,r4
    c4e4:	95ef803a 	cmpltu	r23,r18,r23
    c4e8:	2a53803a 	cmpltu	r9,r5,r9
    c4ec:	a0a9883a 	add	r20,r20,r2
    c4f0:	4deeb03a 	or	r23,r9,r23
    c4f4:	a5ef883a 	add	r23,r20,r23
    c4f8:	bc63883a 	add	r17,r23,r17
    c4fc:	e004927a 	slli	r2,fp,9
    c500:	d9000117 	ldw	r4,4(sp)
    c504:	882e927a 	slli	r23,r17,9
    c508:	9022d5fa 	srli	r17,r18,23
    c50c:	e038d5fa 	srli	fp,fp,23
    c510:	1104b03a 	or	r2,r2,r4
    c514:	9024927a 	slli	r18,r18,9
    c518:	1004c03a 	cmpne	r2,r2,zero
    c51c:	bc62b03a 	or	r17,r23,r17
    c520:	1738b03a 	or	fp,r2,fp
    c524:	8880402c 	andhi	r2,r17,256
    c528:	e4a4b03a 	or	r18,fp,r18
    c52c:	10000726 	beq	r2,zero,c54c <__muldf3+0x628>
    c530:	9006d07a 	srli	r3,r18,1
    c534:	880497fa 	slli	r2,r17,31
    c538:	9480004c 	andi	r18,r18,1
    c53c:	8822d07a 	srli	r17,r17,1
    c540:	1ca4b03a 	or	r18,r3,r18
    c544:	14a4b03a 	or	r18,r2,r18
    c548:	4007883a 	mov	r3,r8
    c54c:	1880ffc4 	addi	r2,r3,1023
    c550:	0080460e 	bge	zero,r2,c66c <__muldf3+0x748>
    c554:	910001cc 	andi	r4,r18,7
    c558:	20000726 	beq	r4,zero,c578 <__muldf3+0x654>
    c55c:	910003cc 	andi	r4,r18,15
    c560:	01400104 	movi	r5,4
    c564:	21400426 	beq	r4,r5,c578 <__muldf3+0x654>
    c568:	9149883a 	add	r4,r18,r5
    c56c:	24a5803a 	cmpltu	r18,r4,r18
    c570:	8ca3883a 	add	r17,r17,r18
    c574:	2025883a 	mov	r18,r4
    c578:	8900402c 	andhi	r4,r17,256
    c57c:	20000426 	beq	r4,zero,c590 <__muldf3+0x66c>
    c580:	18810004 	addi	r2,r3,1024
    c584:	00ffc034 	movhi	r3,65280
    c588:	18ffffc4 	addi	r3,r3,-1
    c58c:	88e2703a 	and	r17,r17,r3
    c590:	00c1ff84 	movi	r3,2046
    c594:	18bf1316 	blt	r3,r2,c1e4 <__muldf3+0x2c0>
    c598:	882c977a 	slli	r22,r17,29
    c59c:	9024d0fa 	srli	r18,r18,3
    c5a0:	8822927a 	slli	r17,r17,9
    c5a4:	1081ffcc 	andi	r2,r2,2047
    c5a8:	b4acb03a 	or	r22,r22,r18
    c5ac:	8820d33a 	srli	r16,r17,12
    c5b0:	3027883a 	mov	r19,r6
    c5b4:	003eba06 	br	c0a0 <__muldf3+0x17c>
    c5b8:	8080022c 	andhi	r2,r16,8
    c5bc:	10000926 	beq	r2,zero,c5e4 <__muldf3+0x6c0>
    c5c0:	8880022c 	andhi	r2,r17,8
    c5c4:	1000071e 	bne	r2,zero,c5e4 <__muldf3+0x6c0>
    c5c8:	00800434 	movhi	r2,16
    c5cc:	8c000234 	orhi	r16,r17,8
    c5d0:	10bfffc4 	addi	r2,r2,-1
    c5d4:	e027883a 	mov	r19,fp
    c5d8:	80a0703a 	and	r16,r16,r2
    c5dc:	902d883a 	mov	r22,r18
    c5e0:	003f1706 	br	c240 <__muldf3+0x31c>
    c5e4:	00800434 	movhi	r2,16
    c5e8:	84000234 	orhi	r16,r16,8
    c5ec:	10bfffc4 	addi	r2,r2,-1
    c5f0:	80a0703a 	and	r16,r16,r2
    c5f4:	003f1206 	br	c240 <__muldf3+0x31c>
    c5f8:	147ff604 	addi	r17,r2,-40
    c5fc:	3462983a 	sll	r17,r6,r17
    c600:	0025883a 	mov	r18,zero
    c604:	003ef306 	br	c1d4 <__muldf3+0x2b0>
    c608:	3009883a 	mov	r4,r6
    c60c:	d9400215 	stw	r5,8(sp)
    c610:	d9800715 	stw	r6,28(sp)
    c614:	da400415 	stw	r9,16(sp)
    c618:	da800315 	stw	r10,12(sp)
    c61c:	000d2900 	call	d290 <__clzsi2>
    c620:	10800804 	addi	r2,r2,32
    c624:	da800317 	ldw	r10,12(sp)
    c628:	da400417 	ldw	r9,16(sp)
    c62c:	d9800717 	ldw	r6,28(sp)
    c630:	d9400217 	ldw	r5,8(sp)
    c634:	003edd06 	br	c1ac <__muldf3+0x288>
    c638:	143ff604 	addi	r16,r2,-40
    c63c:	ac20983a 	sll	r16,r21,r16
    c640:	002d883a 	mov	r22,zero
    c644:	003ec106 	br	c14c <__muldf3+0x228>
    c648:	d9800715 	stw	r6,28(sp)
    c64c:	d9c00215 	stw	r7,8(sp)
    c650:	da400415 	stw	r9,16(sp)
    c654:	000d2900 	call	d290 <__clzsi2>
    c658:	10800804 	addi	r2,r2,32
    c65c:	da400417 	ldw	r9,16(sp)
    c660:	d9c00217 	ldw	r7,8(sp)
    c664:	d9800717 	ldw	r6,28(sp)
    c668:	003eae06 	br	c124 <__muldf3+0x200>
    c66c:	00c00044 	movi	r3,1
    c670:	1887c83a 	sub	r3,r3,r2
    c674:	01000e04 	movi	r4,56
    c678:	20fe8516 	blt	r4,r3,c090 <__muldf3+0x16c>
    c67c:	010007c4 	movi	r4,31
    c680:	20c01b16 	blt	r4,r3,c6f0 <__muldf3+0x7cc>
    c684:	00800804 	movi	r2,32
    c688:	10c5c83a 	sub	r2,r2,r3
    c68c:	888a983a 	sll	r5,r17,r2
    c690:	90c8d83a 	srl	r4,r18,r3
    c694:	9084983a 	sll	r2,r18,r2
    c698:	88e2d83a 	srl	r17,r17,r3
    c69c:	2906b03a 	or	r3,r5,r4
    c6a0:	1004c03a 	cmpne	r2,r2,zero
    c6a4:	1886b03a 	or	r3,r3,r2
    c6a8:	188001cc 	andi	r2,r3,7
    c6ac:	10000726 	beq	r2,zero,c6cc <__muldf3+0x7a8>
    c6b0:	188003cc 	andi	r2,r3,15
    c6b4:	01000104 	movi	r4,4
    c6b8:	11000426 	beq	r2,r4,c6cc <__muldf3+0x7a8>
    c6bc:	1805883a 	mov	r2,r3
    c6c0:	10c00104 	addi	r3,r2,4
    c6c4:	1885803a 	cmpltu	r2,r3,r2
    c6c8:	88a3883a 	add	r17,r17,r2
    c6cc:	8880202c 	andhi	r2,r17,128
    c6d0:	10001c26 	beq	r2,zero,c744 <__muldf3+0x820>
    c6d4:	3027883a 	mov	r19,r6
    c6d8:	00800044 	movi	r2,1
    c6dc:	0021883a 	mov	r16,zero
    c6e0:	002d883a 	mov	r22,zero
    c6e4:	003e6e06 	br	c0a0 <__muldf3+0x17c>
    c6e8:	4007883a 	mov	r3,r8
    c6ec:	003f9706 	br	c54c <__muldf3+0x628>
    c6f0:	017ff844 	movi	r5,-31
    c6f4:	2885c83a 	sub	r2,r5,r2
    c6f8:	888ad83a 	srl	r5,r17,r2
    c6fc:	00800804 	movi	r2,32
    c700:	18801a26 	beq	r3,r2,c76c <__muldf3+0x848>
    c704:	01001004 	movi	r4,64
    c708:	20c7c83a 	sub	r3,r4,r3
    c70c:	88e2983a 	sll	r17,r17,r3
    c710:	8ca4b03a 	or	r18,r17,r18
    c714:	9004c03a 	cmpne	r2,r18,zero
    c718:	2884b03a 	or	r2,r5,r2
    c71c:	144001cc 	andi	r17,r2,7
    c720:	88000d1e 	bne	r17,zero,c758 <__muldf3+0x834>
    c724:	0021883a 	mov	r16,zero
    c728:	102cd0fa 	srli	r22,r2,3
    c72c:	3027883a 	mov	r19,r6
    c730:	0005883a 	mov	r2,zero
    c734:	b46cb03a 	or	r22,r22,r17
    c738:	003e5906 	br	c0a0 <__muldf3+0x17c>
    c73c:	1007883a 	mov	r3,r2
    c740:	0023883a 	mov	r17,zero
    c744:	8820927a 	slli	r16,r17,9
    c748:	1805883a 	mov	r2,r3
    c74c:	8822977a 	slli	r17,r17,29
    c750:	8020d33a 	srli	r16,r16,12
    c754:	003ff406 	br	c728 <__muldf3+0x804>
    c758:	10c003cc 	andi	r3,r2,15
    c75c:	01000104 	movi	r4,4
    c760:	193ff626 	beq	r3,r4,c73c <__muldf3+0x818>
    c764:	0023883a 	mov	r17,zero
    c768:	003fd506 	br	c6c0 <__muldf3+0x79c>
    c76c:	0023883a 	mov	r17,zero
    c770:	003fe706 	br	c710 <__muldf3+0x7ec>
    c774:	00800434 	movhi	r2,16
    c778:	8c000234 	orhi	r16,r17,8
    c77c:	10bfffc4 	addi	r2,r2,-1
    c780:	3027883a 	mov	r19,r6
    c784:	80a0703a 	and	r16,r16,r2
    c788:	902d883a 	mov	r22,r18
    c78c:	003eac06 	br	c240 <__muldf3+0x31c>

0000c790 <__subdf3>:
    c790:	02000434 	movhi	r8,16
    c794:	423fffc4 	addi	r8,r8,-1
    c798:	defffb04 	addi	sp,sp,-20
    c79c:	2a14703a 	and	r10,r5,r8
    c7a0:	3812d53a 	srli	r9,r7,20
    c7a4:	3a10703a 	and	r8,r7,r8
    c7a8:	2006d77a 	srli	r3,r4,29
    c7ac:	3004d77a 	srli	r2,r6,29
    c7b0:	dc000015 	stw	r16,0(sp)
    c7b4:	501490fa 	slli	r10,r10,3
    c7b8:	2820d53a 	srli	r16,r5,20
    c7bc:	401090fa 	slli	r8,r8,3
    c7c0:	dc800215 	stw	r18,8(sp)
    c7c4:	dc400115 	stw	r17,4(sp)
    c7c8:	dfc00415 	stw	ra,16(sp)
    c7cc:	202290fa 	slli	r17,r4,3
    c7d0:	dcc00315 	stw	r19,12(sp)
    c7d4:	4a41ffcc 	andi	r9,r9,2047
    c7d8:	0101ffc4 	movi	r4,2047
    c7dc:	2824d7fa 	srli	r18,r5,31
    c7e0:	8401ffcc 	andi	r16,r16,2047
    c7e4:	50c6b03a 	or	r3,r10,r3
    c7e8:	380ed7fa 	srli	r7,r7,31
    c7ec:	408ab03a 	or	r5,r8,r2
    c7f0:	300c90fa 	slli	r6,r6,3
    c7f4:	49009626 	beq	r9,r4,ca50 <__subdf3+0x2c0>
    c7f8:	39c0005c 	xori	r7,r7,1
    c7fc:	8245c83a 	sub	r2,r16,r9
    c800:	3c807426 	beq	r7,r18,c9d4 <__subdf3+0x244>
    c804:	0080af0e 	bge	zero,r2,cac4 <__subdf3+0x334>
    c808:	48002a1e 	bne	r9,zero,c8b4 <__subdf3+0x124>
    c80c:	2988b03a 	or	r4,r5,r6
    c810:	20009a1e 	bne	r4,zero,ca7c <__subdf3+0x2ec>
    c814:	888001cc 	andi	r2,r17,7
    c818:	10000726 	beq	r2,zero,c838 <__subdf3+0xa8>
    c81c:	888003cc 	andi	r2,r17,15
    c820:	01000104 	movi	r4,4
    c824:	11000426 	beq	r2,r4,c838 <__subdf3+0xa8>
    c828:	890b883a 	add	r5,r17,r4
    c82c:	2c63803a 	cmpltu	r17,r5,r17
    c830:	1c47883a 	add	r3,r3,r17
    c834:	2823883a 	mov	r17,r5
    c838:	1880202c 	andhi	r2,r3,128
    c83c:	10005926 	beq	r2,zero,c9a4 <__subdf3+0x214>
    c840:	84000044 	addi	r16,r16,1
    c844:	0081ffc4 	movi	r2,2047
    c848:	8080be26 	beq	r16,r2,cb44 <__subdf3+0x3b4>
    c84c:	017fe034 	movhi	r5,65408
    c850:	297fffc4 	addi	r5,r5,-1
    c854:	1946703a 	and	r3,r3,r5
    c858:	1804977a 	slli	r2,r3,29
    c85c:	1806927a 	slli	r3,r3,9
    c860:	8822d0fa 	srli	r17,r17,3
    c864:	8401ffcc 	andi	r16,r16,2047
    c868:	180ad33a 	srli	r5,r3,12
    c86c:	9100004c 	andi	r4,r18,1
    c870:	1444b03a 	or	r2,r2,r17
    c874:	80c1ffcc 	andi	r3,r16,2047
    c878:	1820953a 	slli	r16,r3,20
    c87c:	20c03fcc 	andi	r3,r4,255
    c880:	180897fa 	slli	r4,r3,31
    c884:	00c00434 	movhi	r3,16
    c888:	18ffffc4 	addi	r3,r3,-1
    c88c:	28c6703a 	and	r3,r5,r3
    c890:	1c06b03a 	or	r3,r3,r16
    c894:	1906b03a 	or	r3,r3,r4
    c898:	dfc00417 	ldw	ra,16(sp)
    c89c:	dcc00317 	ldw	r19,12(sp)
    c8a0:	dc800217 	ldw	r18,8(sp)
    c8a4:	dc400117 	ldw	r17,4(sp)
    c8a8:	dc000017 	ldw	r16,0(sp)
    c8ac:	dec00504 	addi	sp,sp,20
    c8b0:	f800283a 	ret
    c8b4:	0101ffc4 	movi	r4,2047
    c8b8:	813fd626 	beq	r16,r4,c814 <__subdf3+0x84>
    c8bc:	29402034 	orhi	r5,r5,128
    c8c0:	01000e04 	movi	r4,56
    c8c4:	2080a316 	blt	r4,r2,cb54 <__subdf3+0x3c4>
    c8c8:	010007c4 	movi	r4,31
    c8cc:	2080c616 	blt	r4,r2,cbe8 <__subdf3+0x458>
    c8d0:	01000804 	movi	r4,32
    c8d4:	2089c83a 	sub	r4,r4,r2
    c8d8:	2910983a 	sll	r8,r5,r4
    c8dc:	308ed83a 	srl	r7,r6,r2
    c8e0:	3108983a 	sll	r4,r6,r4
    c8e4:	2884d83a 	srl	r2,r5,r2
    c8e8:	41ccb03a 	or	r6,r8,r7
    c8ec:	2008c03a 	cmpne	r4,r4,zero
    c8f0:	310cb03a 	or	r6,r6,r4
    c8f4:	898dc83a 	sub	r6,r17,r6
    c8f8:	89a3803a 	cmpltu	r17,r17,r6
    c8fc:	1887c83a 	sub	r3,r3,r2
    c900:	1c47c83a 	sub	r3,r3,r17
    c904:	3023883a 	mov	r17,r6
    c908:	1880202c 	andhi	r2,r3,128
    c90c:	10002326 	beq	r2,zero,c99c <__subdf3+0x20c>
    c910:	04c02034 	movhi	r19,128
    c914:	9cffffc4 	addi	r19,r19,-1
    c918:	1ce6703a 	and	r19,r3,r19
    c91c:	98007a26 	beq	r19,zero,cb08 <__subdf3+0x378>
    c920:	9809883a 	mov	r4,r19
    c924:	000d2900 	call	d290 <__clzsi2>
    c928:	113ffe04 	addi	r4,r2,-8
    c92c:	00c007c4 	movi	r3,31
    c930:	19007b16 	blt	r3,r4,cb20 <__subdf3+0x390>
    c934:	00800804 	movi	r2,32
    c938:	1105c83a 	sub	r2,r2,r4
    c93c:	8884d83a 	srl	r2,r17,r2
    c940:	9906983a 	sll	r3,r19,r4
    c944:	8922983a 	sll	r17,r17,r4
    c948:	10c4b03a 	or	r2,r2,r3
    c94c:	24007816 	blt	r4,r16,cb30 <__subdf3+0x3a0>
    c950:	2421c83a 	sub	r16,r4,r16
    c954:	80c00044 	addi	r3,r16,1
    c958:	010007c4 	movi	r4,31
    c95c:	20c09516 	blt	r4,r3,cbb4 <__subdf3+0x424>
    c960:	01400804 	movi	r5,32
    c964:	28cbc83a 	sub	r5,r5,r3
    c968:	88c8d83a 	srl	r4,r17,r3
    c96c:	8962983a 	sll	r17,r17,r5
    c970:	114a983a 	sll	r5,r2,r5
    c974:	10c6d83a 	srl	r3,r2,r3
    c978:	8804c03a 	cmpne	r2,r17,zero
    c97c:	290ab03a 	or	r5,r5,r4
    c980:	28a2b03a 	or	r17,r5,r2
    c984:	0021883a 	mov	r16,zero
    c988:	003fa206 	br	c814 <__subdf3+0x84>
    c98c:	2090b03a 	or	r8,r4,r2
    c990:	40018e26 	beq	r8,zero,cfcc <__subdf3+0x83c>
    c994:	1007883a 	mov	r3,r2
    c998:	2023883a 	mov	r17,r4
    c99c:	888001cc 	andi	r2,r17,7
    c9a0:	103f9e1e 	bne	r2,zero,c81c <__subdf3+0x8c>
    c9a4:	1804977a 	slli	r2,r3,29
    c9a8:	8822d0fa 	srli	r17,r17,3
    c9ac:	1810d0fa 	srli	r8,r3,3
    c9b0:	9100004c 	andi	r4,r18,1
    c9b4:	1444b03a 	or	r2,r2,r17
    c9b8:	00c1ffc4 	movi	r3,2047
    c9bc:	80c02826 	beq	r16,r3,ca60 <__subdf3+0x2d0>
    c9c0:	01400434 	movhi	r5,16
    c9c4:	297fffc4 	addi	r5,r5,-1
    c9c8:	80e0703a 	and	r16,r16,r3
    c9cc:	414a703a 	and	r5,r8,r5
    c9d0:	003fa806 	br	c874 <__subdf3+0xe4>
    c9d4:	0080630e 	bge	zero,r2,cb64 <__subdf3+0x3d4>
    c9d8:	48003026 	beq	r9,zero,ca9c <__subdf3+0x30c>
    c9dc:	0101ffc4 	movi	r4,2047
    c9e0:	813f8c26 	beq	r16,r4,c814 <__subdf3+0x84>
    c9e4:	29402034 	orhi	r5,r5,128
    c9e8:	01000e04 	movi	r4,56
    c9ec:	2080a90e 	bge	r4,r2,cc94 <__subdf3+0x504>
    c9f0:	298cb03a 	or	r6,r5,r6
    c9f4:	3012c03a 	cmpne	r9,r6,zero
    c9f8:	0005883a 	mov	r2,zero
    c9fc:	4c53883a 	add	r9,r9,r17
    ca00:	4c63803a 	cmpltu	r17,r9,r17
    ca04:	10c7883a 	add	r3,r2,r3
    ca08:	88c7883a 	add	r3,r17,r3
    ca0c:	4823883a 	mov	r17,r9
    ca10:	1880202c 	andhi	r2,r3,128
    ca14:	1000d026 	beq	r2,zero,cd58 <__subdf3+0x5c8>
    ca18:	84000044 	addi	r16,r16,1
    ca1c:	0081ffc4 	movi	r2,2047
    ca20:	8080fe26 	beq	r16,r2,ce1c <__subdf3+0x68c>
    ca24:	00bfe034 	movhi	r2,65408
    ca28:	10bfffc4 	addi	r2,r2,-1
    ca2c:	1886703a 	and	r3,r3,r2
    ca30:	880ad07a 	srli	r5,r17,1
    ca34:	180497fa 	slli	r2,r3,31
    ca38:	8900004c 	andi	r4,r17,1
    ca3c:	2922b03a 	or	r17,r5,r4
    ca40:	1806d07a 	srli	r3,r3,1
    ca44:	1462b03a 	or	r17,r2,r17
    ca48:	3825883a 	mov	r18,r7
    ca4c:	003f7106 	br	c814 <__subdf3+0x84>
    ca50:	2984b03a 	or	r2,r5,r6
    ca54:	103f6826 	beq	r2,zero,c7f8 <__subdf3+0x68>
    ca58:	39c03fcc 	andi	r7,r7,255
    ca5c:	003f6706 	br	c7fc <__subdf3+0x6c>
    ca60:	4086b03a 	or	r3,r8,r2
    ca64:	18015226 	beq	r3,zero,cfb0 <__subdf3+0x820>
    ca68:	00c00434 	movhi	r3,16
    ca6c:	41400234 	orhi	r5,r8,8
    ca70:	18ffffc4 	addi	r3,r3,-1
    ca74:	28ca703a 	and	r5,r5,r3
    ca78:	003f7e06 	br	c874 <__subdf3+0xe4>
    ca7c:	10bfffc4 	addi	r2,r2,-1
    ca80:	1000491e 	bne	r2,zero,cba8 <__subdf3+0x418>
    ca84:	898fc83a 	sub	r7,r17,r6
    ca88:	89e3803a 	cmpltu	r17,r17,r7
    ca8c:	1947c83a 	sub	r3,r3,r5
    ca90:	1c47c83a 	sub	r3,r3,r17
    ca94:	3823883a 	mov	r17,r7
    ca98:	003f9b06 	br	c908 <__subdf3+0x178>
    ca9c:	2988b03a 	or	r4,r5,r6
    caa0:	203f5c26 	beq	r4,zero,c814 <__subdf3+0x84>
    caa4:	10bfffc4 	addi	r2,r2,-1
    caa8:	1000931e 	bne	r2,zero,ccf8 <__subdf3+0x568>
    caac:	898d883a 	add	r6,r17,r6
    cab0:	3463803a 	cmpltu	r17,r6,r17
    cab4:	1947883a 	add	r3,r3,r5
    cab8:	88c7883a 	add	r3,r17,r3
    cabc:	3023883a 	mov	r17,r6
    cac0:	003fd306 	br	ca10 <__subdf3+0x280>
    cac4:	1000541e 	bne	r2,zero,cc18 <__subdf3+0x488>
    cac8:	80800044 	addi	r2,r16,1
    cacc:	1081ffcc 	andi	r2,r2,2047
    cad0:	01000044 	movi	r4,1
    cad4:	2080a20e 	bge	r4,r2,cd60 <__subdf3+0x5d0>
    cad8:	8989c83a 	sub	r4,r17,r6
    cadc:	8905803a 	cmpltu	r2,r17,r4
    cae0:	1967c83a 	sub	r19,r3,r5
    cae4:	98a7c83a 	sub	r19,r19,r2
    cae8:	9880202c 	andhi	r2,r19,128
    caec:	10006326 	beq	r2,zero,cc7c <__subdf3+0x4ec>
    caf0:	3463c83a 	sub	r17,r6,r17
    caf4:	28c7c83a 	sub	r3,r5,r3
    caf8:	344d803a 	cmpltu	r6,r6,r17
    cafc:	19a7c83a 	sub	r19,r3,r6
    cb00:	3825883a 	mov	r18,r7
    cb04:	983f861e 	bne	r19,zero,c920 <__subdf3+0x190>
    cb08:	8809883a 	mov	r4,r17
    cb0c:	000d2900 	call	d290 <__clzsi2>
    cb10:	10800804 	addi	r2,r2,32
    cb14:	113ffe04 	addi	r4,r2,-8
    cb18:	00c007c4 	movi	r3,31
    cb1c:	193f850e 	bge	r3,r4,c934 <__subdf3+0x1a4>
    cb20:	10bff604 	addi	r2,r2,-40
    cb24:	8884983a 	sll	r2,r17,r2
    cb28:	0023883a 	mov	r17,zero
    cb2c:	243f880e 	bge	r4,r16,c950 <__subdf3+0x1c0>
    cb30:	00ffe034 	movhi	r3,65408
    cb34:	18ffffc4 	addi	r3,r3,-1
    cb38:	8121c83a 	sub	r16,r16,r4
    cb3c:	10c6703a 	and	r3,r2,r3
    cb40:	003f3406 	br	c814 <__subdf3+0x84>
    cb44:	9100004c 	andi	r4,r18,1
    cb48:	000b883a 	mov	r5,zero
    cb4c:	0005883a 	mov	r2,zero
    cb50:	003f4806 	br	c874 <__subdf3+0xe4>
    cb54:	298cb03a 	or	r6,r5,r6
    cb58:	300cc03a 	cmpne	r6,r6,zero
    cb5c:	0005883a 	mov	r2,zero
    cb60:	003f6406 	br	c8f4 <__subdf3+0x164>
    cb64:	10009a1e 	bne	r2,zero,cdd0 <__subdf3+0x640>
    cb68:	82400044 	addi	r9,r16,1
    cb6c:	4881ffcc 	andi	r2,r9,2047
    cb70:	02800044 	movi	r10,1
    cb74:	5080670e 	bge	r10,r2,cd14 <__subdf3+0x584>
    cb78:	0081ffc4 	movi	r2,2047
    cb7c:	4880af26 	beq	r9,r2,ce3c <__subdf3+0x6ac>
    cb80:	898d883a 	add	r6,r17,r6
    cb84:	1945883a 	add	r2,r3,r5
    cb88:	3447803a 	cmpltu	r3,r6,r17
    cb8c:	1887883a 	add	r3,r3,r2
    cb90:	182297fa 	slli	r17,r3,31
    cb94:	300cd07a 	srli	r6,r6,1
    cb98:	1806d07a 	srli	r3,r3,1
    cb9c:	4821883a 	mov	r16,r9
    cba0:	89a2b03a 	or	r17,r17,r6
    cba4:	003f1b06 	br	c814 <__subdf3+0x84>
    cba8:	0101ffc4 	movi	r4,2047
    cbac:	813f441e 	bne	r16,r4,c8c0 <__subdf3+0x130>
    cbb0:	003f1806 	br	c814 <__subdf3+0x84>
    cbb4:	843ff844 	addi	r16,r16,-31
    cbb8:	01400804 	movi	r5,32
    cbbc:	1408d83a 	srl	r4,r2,r16
    cbc0:	19405026 	beq	r3,r5,cd04 <__subdf3+0x574>
    cbc4:	01401004 	movi	r5,64
    cbc8:	28c7c83a 	sub	r3,r5,r3
    cbcc:	10c4983a 	sll	r2,r2,r3
    cbd0:	88a2b03a 	or	r17,r17,r2
    cbd4:	8822c03a 	cmpne	r17,r17,zero
    cbd8:	2462b03a 	or	r17,r4,r17
    cbdc:	0007883a 	mov	r3,zero
    cbe0:	0021883a 	mov	r16,zero
    cbe4:	003f6d06 	br	c99c <__subdf3+0x20c>
    cbe8:	11fff804 	addi	r7,r2,-32
    cbec:	01000804 	movi	r4,32
    cbf0:	29ced83a 	srl	r7,r5,r7
    cbf4:	11004526 	beq	r2,r4,cd0c <__subdf3+0x57c>
    cbf8:	01001004 	movi	r4,64
    cbfc:	2089c83a 	sub	r4,r4,r2
    cc00:	2904983a 	sll	r2,r5,r4
    cc04:	118cb03a 	or	r6,r2,r6
    cc08:	300cc03a 	cmpne	r6,r6,zero
    cc0c:	398cb03a 	or	r6,r7,r6
    cc10:	0005883a 	mov	r2,zero
    cc14:	003f3706 	br	c8f4 <__subdf3+0x164>
    cc18:	80002a26 	beq	r16,zero,ccc4 <__subdf3+0x534>
    cc1c:	0101ffc4 	movi	r4,2047
    cc20:	49006626 	beq	r9,r4,cdbc <__subdf3+0x62c>
    cc24:	0085c83a 	sub	r2,zero,r2
    cc28:	18c02034 	orhi	r3,r3,128
    cc2c:	01000e04 	movi	r4,56
    cc30:	20807e16 	blt	r4,r2,ce2c <__subdf3+0x69c>
    cc34:	010007c4 	movi	r4,31
    cc38:	2080e716 	blt	r4,r2,cfd8 <__subdf3+0x848>
    cc3c:	01000804 	movi	r4,32
    cc40:	2089c83a 	sub	r4,r4,r2
    cc44:	1914983a 	sll	r10,r3,r4
    cc48:	8890d83a 	srl	r8,r17,r2
    cc4c:	8908983a 	sll	r4,r17,r4
    cc50:	1884d83a 	srl	r2,r3,r2
    cc54:	5222b03a 	or	r17,r10,r8
    cc58:	2006c03a 	cmpne	r3,r4,zero
    cc5c:	88e2b03a 	or	r17,r17,r3
    cc60:	3463c83a 	sub	r17,r6,r17
    cc64:	2885c83a 	sub	r2,r5,r2
    cc68:	344d803a 	cmpltu	r6,r6,r17
    cc6c:	1187c83a 	sub	r3,r2,r6
    cc70:	4821883a 	mov	r16,r9
    cc74:	3825883a 	mov	r18,r7
    cc78:	003f2306 	br	c908 <__subdf3+0x178>
    cc7c:	24d0b03a 	or	r8,r4,r19
    cc80:	40001b1e 	bne	r8,zero,ccf0 <__subdf3+0x560>
    cc84:	0005883a 	mov	r2,zero
    cc88:	0009883a 	mov	r4,zero
    cc8c:	0021883a 	mov	r16,zero
    cc90:	003f4906 	br	c9b8 <__subdf3+0x228>
    cc94:	010007c4 	movi	r4,31
    cc98:	20803a16 	blt	r4,r2,cd84 <__subdf3+0x5f4>
    cc9c:	01000804 	movi	r4,32
    cca0:	2089c83a 	sub	r4,r4,r2
    cca4:	2912983a 	sll	r9,r5,r4
    cca8:	3090d83a 	srl	r8,r6,r2
    ccac:	3108983a 	sll	r4,r6,r4
    ccb0:	2884d83a 	srl	r2,r5,r2
    ccb4:	4a12b03a 	or	r9,r9,r8
    ccb8:	2008c03a 	cmpne	r4,r4,zero
    ccbc:	4912b03a 	or	r9,r9,r4
    ccc0:	003f4e06 	br	c9fc <__subdf3+0x26c>
    ccc4:	1c48b03a 	or	r4,r3,r17
    ccc8:	20003c26 	beq	r4,zero,cdbc <__subdf3+0x62c>
    cccc:	0084303a 	nor	r2,zero,r2
    ccd0:	1000381e 	bne	r2,zero,cdb4 <__subdf3+0x624>
    ccd4:	3463c83a 	sub	r17,r6,r17
    ccd8:	28c5c83a 	sub	r2,r5,r3
    ccdc:	344d803a 	cmpltu	r6,r6,r17
    cce0:	1187c83a 	sub	r3,r2,r6
    cce4:	4821883a 	mov	r16,r9
    cce8:	3825883a 	mov	r18,r7
    ccec:	003f0606 	br	c908 <__subdf3+0x178>
    ccf0:	2023883a 	mov	r17,r4
    ccf4:	003f0906 	br	c91c <__subdf3+0x18c>
    ccf8:	0101ffc4 	movi	r4,2047
    ccfc:	813f3a1e 	bne	r16,r4,c9e8 <__subdf3+0x258>
    cd00:	003ec406 	br	c814 <__subdf3+0x84>
    cd04:	0005883a 	mov	r2,zero
    cd08:	003fb106 	br	cbd0 <__subdf3+0x440>
    cd0c:	0005883a 	mov	r2,zero
    cd10:	003fbc06 	br	cc04 <__subdf3+0x474>
    cd14:	1c44b03a 	or	r2,r3,r17
    cd18:	80008e1e 	bne	r16,zero,cf54 <__subdf3+0x7c4>
    cd1c:	1000c826 	beq	r2,zero,d040 <__subdf3+0x8b0>
    cd20:	2984b03a 	or	r2,r5,r6
    cd24:	103ebb26 	beq	r2,zero,c814 <__subdf3+0x84>
    cd28:	8989883a 	add	r4,r17,r6
    cd2c:	1945883a 	add	r2,r3,r5
    cd30:	2447803a 	cmpltu	r3,r4,r17
    cd34:	1887883a 	add	r3,r3,r2
    cd38:	1880202c 	andhi	r2,r3,128
    cd3c:	2023883a 	mov	r17,r4
    cd40:	103f1626 	beq	r2,zero,c99c <__subdf3+0x20c>
    cd44:	00bfe034 	movhi	r2,65408
    cd48:	10bfffc4 	addi	r2,r2,-1
    cd4c:	5021883a 	mov	r16,r10
    cd50:	1886703a 	and	r3,r3,r2
    cd54:	003eaf06 	br	c814 <__subdf3+0x84>
    cd58:	3825883a 	mov	r18,r7
    cd5c:	003f0f06 	br	c99c <__subdf3+0x20c>
    cd60:	1c44b03a 	or	r2,r3,r17
    cd64:	8000251e 	bne	r16,zero,cdfc <__subdf3+0x66c>
    cd68:	1000661e 	bne	r2,zero,cf04 <__subdf3+0x774>
    cd6c:	2990b03a 	or	r8,r5,r6
    cd70:	40009626 	beq	r8,zero,cfcc <__subdf3+0x83c>
    cd74:	2807883a 	mov	r3,r5
    cd78:	3023883a 	mov	r17,r6
    cd7c:	3825883a 	mov	r18,r7
    cd80:	003ea406 	br	c814 <__subdf3+0x84>
    cd84:	127ff804 	addi	r9,r2,-32
    cd88:	01000804 	movi	r4,32
    cd8c:	2a52d83a 	srl	r9,r5,r9
    cd90:	11008c26 	beq	r2,r4,cfc4 <__subdf3+0x834>
    cd94:	01001004 	movi	r4,64
    cd98:	2085c83a 	sub	r2,r4,r2
    cd9c:	2884983a 	sll	r2,r5,r2
    cda0:	118cb03a 	or	r6,r2,r6
    cda4:	300cc03a 	cmpne	r6,r6,zero
    cda8:	4992b03a 	or	r9,r9,r6
    cdac:	0005883a 	mov	r2,zero
    cdb0:	003f1206 	br	c9fc <__subdf3+0x26c>
    cdb4:	0101ffc4 	movi	r4,2047
    cdb8:	493f9c1e 	bne	r9,r4,cc2c <__subdf3+0x49c>
    cdbc:	2807883a 	mov	r3,r5
    cdc0:	3023883a 	mov	r17,r6
    cdc4:	4821883a 	mov	r16,r9
    cdc8:	3825883a 	mov	r18,r7
    cdcc:	003e9106 	br	c814 <__subdf3+0x84>
    cdd0:	80001f1e 	bne	r16,zero,ce50 <__subdf3+0x6c0>
    cdd4:	1c48b03a 	or	r4,r3,r17
    cdd8:	20005a26 	beq	r4,zero,cf44 <__subdf3+0x7b4>
    cddc:	0084303a 	nor	r2,zero,r2
    cde0:	1000561e 	bne	r2,zero,cf3c <__subdf3+0x7ac>
    cde4:	89a3883a 	add	r17,r17,r6
    cde8:	1945883a 	add	r2,r3,r5
    cdec:	898d803a 	cmpltu	r6,r17,r6
    cdf0:	3087883a 	add	r3,r6,r2
    cdf4:	4821883a 	mov	r16,r9
    cdf8:	003f0506 	br	ca10 <__subdf3+0x280>
    cdfc:	10002b1e 	bne	r2,zero,ceac <__subdf3+0x71c>
    ce00:	2984b03a 	or	r2,r5,r6
    ce04:	10008026 	beq	r2,zero,d008 <__subdf3+0x878>
    ce08:	2807883a 	mov	r3,r5
    ce0c:	3023883a 	mov	r17,r6
    ce10:	3825883a 	mov	r18,r7
    ce14:	0401ffc4 	movi	r16,2047
    ce18:	003e7e06 	br	c814 <__subdf3+0x84>
    ce1c:	3809883a 	mov	r4,r7
    ce20:	0011883a 	mov	r8,zero
    ce24:	0005883a 	mov	r2,zero
    ce28:	003ee306 	br	c9b8 <__subdf3+0x228>
    ce2c:	1c62b03a 	or	r17,r3,r17
    ce30:	8822c03a 	cmpne	r17,r17,zero
    ce34:	0005883a 	mov	r2,zero
    ce38:	003f8906 	br	cc60 <__subdf3+0x4d0>
    ce3c:	3809883a 	mov	r4,r7
    ce40:	4821883a 	mov	r16,r9
    ce44:	0011883a 	mov	r8,zero
    ce48:	0005883a 	mov	r2,zero
    ce4c:	003eda06 	br	c9b8 <__subdf3+0x228>
    ce50:	0101ffc4 	movi	r4,2047
    ce54:	49003b26 	beq	r9,r4,cf44 <__subdf3+0x7b4>
    ce58:	0085c83a 	sub	r2,zero,r2
    ce5c:	18c02034 	orhi	r3,r3,128
    ce60:	01000e04 	movi	r4,56
    ce64:	20806e16 	blt	r4,r2,d020 <__subdf3+0x890>
    ce68:	010007c4 	movi	r4,31
    ce6c:	20807716 	blt	r4,r2,d04c <__subdf3+0x8bc>
    ce70:	01000804 	movi	r4,32
    ce74:	2089c83a 	sub	r4,r4,r2
    ce78:	1914983a 	sll	r10,r3,r4
    ce7c:	8890d83a 	srl	r8,r17,r2
    ce80:	8908983a 	sll	r4,r17,r4
    ce84:	1884d83a 	srl	r2,r3,r2
    ce88:	5222b03a 	or	r17,r10,r8
    ce8c:	2006c03a 	cmpne	r3,r4,zero
    ce90:	88e2b03a 	or	r17,r17,r3
    ce94:	89a3883a 	add	r17,r17,r6
    ce98:	1145883a 	add	r2,r2,r5
    ce9c:	898d803a 	cmpltu	r6,r17,r6
    cea0:	3087883a 	add	r3,r6,r2
    cea4:	4821883a 	mov	r16,r9
    cea8:	003ed906 	br	ca10 <__subdf3+0x280>
    ceac:	2984b03a 	or	r2,r5,r6
    ceb0:	10004226 	beq	r2,zero,cfbc <__subdf3+0x82c>
    ceb4:	1808d0fa 	srli	r4,r3,3
    ceb8:	8822d0fa 	srli	r17,r17,3
    cebc:	1806977a 	slli	r3,r3,29
    cec0:	2080022c 	andhi	r2,r4,8
    cec4:	1c62b03a 	or	r17,r3,r17
    cec8:	10000826 	beq	r2,zero,ceec <__subdf3+0x75c>
    cecc:	2812d0fa 	srli	r9,r5,3
    ced0:	4880022c 	andhi	r2,r9,8
    ced4:	1000051e 	bne	r2,zero,ceec <__subdf3+0x75c>
    ced8:	300cd0fa 	srli	r6,r6,3
    cedc:	2804977a 	slli	r2,r5,29
    cee0:	4809883a 	mov	r4,r9
    cee4:	3825883a 	mov	r18,r7
    cee8:	11a2b03a 	or	r17,r2,r6
    ceec:	8806d77a 	srli	r3,r17,29
    cef0:	200890fa 	slli	r4,r4,3
    cef4:	882290fa 	slli	r17,r17,3
    cef8:	0401ffc4 	movi	r16,2047
    cefc:	1906b03a 	or	r3,r3,r4
    cf00:	003e4406 	br	c814 <__subdf3+0x84>
    cf04:	2984b03a 	or	r2,r5,r6
    cf08:	103e4226 	beq	r2,zero,c814 <__subdf3+0x84>
    cf0c:	8989c83a 	sub	r4,r17,r6
    cf10:	8911803a 	cmpltu	r8,r17,r4
    cf14:	1945c83a 	sub	r2,r3,r5
    cf18:	1205c83a 	sub	r2,r2,r8
    cf1c:	1200202c 	andhi	r8,r2,128
    cf20:	403e9a26 	beq	r8,zero,c98c <__subdf3+0x1fc>
    cf24:	3463c83a 	sub	r17,r6,r17
    cf28:	28c5c83a 	sub	r2,r5,r3
    cf2c:	344d803a 	cmpltu	r6,r6,r17
    cf30:	1187c83a 	sub	r3,r2,r6
    cf34:	3825883a 	mov	r18,r7
    cf38:	003e3606 	br	c814 <__subdf3+0x84>
    cf3c:	0101ffc4 	movi	r4,2047
    cf40:	493fc71e 	bne	r9,r4,ce60 <__subdf3+0x6d0>
    cf44:	2807883a 	mov	r3,r5
    cf48:	3023883a 	mov	r17,r6
    cf4c:	4821883a 	mov	r16,r9
    cf50:	003e3006 	br	c814 <__subdf3+0x84>
    cf54:	10003626 	beq	r2,zero,d030 <__subdf3+0x8a0>
    cf58:	2984b03a 	or	r2,r5,r6
    cf5c:	10001726 	beq	r2,zero,cfbc <__subdf3+0x82c>
    cf60:	1808d0fa 	srli	r4,r3,3
    cf64:	8822d0fa 	srli	r17,r17,3
    cf68:	1806977a 	slli	r3,r3,29
    cf6c:	2080022c 	andhi	r2,r4,8
    cf70:	1c62b03a 	or	r17,r3,r17
    cf74:	10000726 	beq	r2,zero,cf94 <__subdf3+0x804>
    cf78:	2812d0fa 	srli	r9,r5,3
    cf7c:	4880022c 	andhi	r2,r9,8
    cf80:	1000041e 	bne	r2,zero,cf94 <__subdf3+0x804>
    cf84:	300cd0fa 	srli	r6,r6,3
    cf88:	2804977a 	slli	r2,r5,29
    cf8c:	4809883a 	mov	r4,r9
    cf90:	11a2b03a 	or	r17,r2,r6
    cf94:	8806d77a 	srli	r3,r17,29
    cf98:	200890fa 	slli	r4,r4,3
    cf9c:	882290fa 	slli	r17,r17,3
    cfa0:	3825883a 	mov	r18,r7
    cfa4:	1906b03a 	or	r3,r3,r4
    cfa8:	0401ffc4 	movi	r16,2047
    cfac:	003e1906 	br	c814 <__subdf3+0x84>
    cfb0:	000b883a 	mov	r5,zero
    cfb4:	0005883a 	mov	r2,zero
    cfb8:	003e2e06 	br	c874 <__subdf3+0xe4>
    cfbc:	0401ffc4 	movi	r16,2047
    cfc0:	003e1406 	br	c814 <__subdf3+0x84>
    cfc4:	0005883a 	mov	r2,zero
    cfc8:	003f7506 	br	cda0 <__subdf3+0x610>
    cfcc:	0005883a 	mov	r2,zero
    cfd0:	0009883a 	mov	r4,zero
    cfd4:	003e7806 	br	c9b8 <__subdf3+0x228>
    cfd8:	123ff804 	addi	r8,r2,-32
    cfdc:	01000804 	movi	r4,32
    cfe0:	1a10d83a 	srl	r8,r3,r8
    cfe4:	11002526 	beq	r2,r4,d07c <__subdf3+0x8ec>
    cfe8:	01001004 	movi	r4,64
    cfec:	2085c83a 	sub	r2,r4,r2
    cff0:	1884983a 	sll	r2,r3,r2
    cff4:	1444b03a 	or	r2,r2,r17
    cff8:	1004c03a 	cmpne	r2,r2,zero
    cffc:	40a2b03a 	or	r17,r8,r2
    d000:	0005883a 	mov	r2,zero
    d004:	003f1606 	br	cc60 <__subdf3+0x4d0>
    d008:	02000434 	movhi	r8,16
    d00c:	0009883a 	mov	r4,zero
    d010:	423fffc4 	addi	r8,r8,-1
    d014:	00bfffc4 	movi	r2,-1
    d018:	0401ffc4 	movi	r16,2047
    d01c:	003e6606 	br	c9b8 <__subdf3+0x228>
    d020:	1c62b03a 	or	r17,r3,r17
    d024:	8822c03a 	cmpne	r17,r17,zero
    d028:	0005883a 	mov	r2,zero
    d02c:	003f9906 	br	ce94 <__subdf3+0x704>
    d030:	2807883a 	mov	r3,r5
    d034:	3023883a 	mov	r17,r6
    d038:	0401ffc4 	movi	r16,2047
    d03c:	003df506 	br	c814 <__subdf3+0x84>
    d040:	2807883a 	mov	r3,r5
    d044:	3023883a 	mov	r17,r6
    d048:	003df206 	br	c814 <__subdf3+0x84>
    d04c:	123ff804 	addi	r8,r2,-32
    d050:	01000804 	movi	r4,32
    d054:	1a10d83a 	srl	r8,r3,r8
    d058:	11000a26 	beq	r2,r4,d084 <__subdf3+0x8f4>
    d05c:	01001004 	movi	r4,64
    d060:	2085c83a 	sub	r2,r4,r2
    d064:	1884983a 	sll	r2,r3,r2
    d068:	1444b03a 	or	r2,r2,r17
    d06c:	1004c03a 	cmpne	r2,r2,zero
    d070:	40a2b03a 	or	r17,r8,r2
    d074:	0005883a 	mov	r2,zero
    d078:	003f8606 	br	ce94 <__subdf3+0x704>
    d07c:	0005883a 	mov	r2,zero
    d080:	003fdc06 	br	cff4 <__subdf3+0x864>
    d084:	0005883a 	mov	r2,zero
    d088:	003ff706 	br	d068 <__subdf3+0x8d8>

0000d08c <__fixdfsi>:
    d08c:	280cd53a 	srli	r6,r5,20
    d090:	00c00434 	movhi	r3,16
    d094:	18ffffc4 	addi	r3,r3,-1
    d098:	3181ffcc 	andi	r6,r6,2047
    d09c:	01c0ff84 	movi	r7,1022
    d0a0:	28c6703a 	and	r3,r5,r3
    d0a4:	280ad7fa 	srli	r5,r5,31
    d0a8:	3980120e 	bge	r7,r6,d0f4 <__fixdfsi+0x68>
    d0ac:	00810744 	movi	r2,1053
    d0b0:	11800c16 	blt	r2,r6,d0e4 <__fixdfsi+0x58>
    d0b4:	00810cc4 	movi	r2,1075
    d0b8:	1185c83a 	sub	r2,r2,r6
    d0bc:	01c007c4 	movi	r7,31
    d0c0:	18c00434 	orhi	r3,r3,16
    d0c4:	38800d16 	blt	r7,r2,d0fc <__fixdfsi+0x70>
    d0c8:	31befb44 	addi	r6,r6,-1043
    d0cc:	2084d83a 	srl	r2,r4,r2
    d0d0:	1986983a 	sll	r3,r3,r6
    d0d4:	1884b03a 	or	r2,r3,r2
    d0d8:	28000726 	beq	r5,zero,d0f8 <__fixdfsi+0x6c>
    d0dc:	0085c83a 	sub	r2,zero,r2
    d0e0:	f800283a 	ret
    d0e4:	00a00034 	movhi	r2,32768
    d0e8:	10bfffc4 	addi	r2,r2,-1
    d0ec:	2885883a 	add	r2,r5,r2
    d0f0:	f800283a 	ret
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	f800283a 	ret
    d0fc:	008104c4 	movi	r2,1043
    d100:	1185c83a 	sub	r2,r2,r6
    d104:	1884d83a 	srl	r2,r3,r2
    d108:	003ff306 	br	d0d8 <__fixdfsi+0x4c>

0000d10c <__floatsidf>:
    d10c:	defffd04 	addi	sp,sp,-12
    d110:	dfc00215 	stw	ra,8(sp)
    d114:	dc400115 	stw	r17,4(sp)
    d118:	dc000015 	stw	r16,0(sp)
    d11c:	20002b26 	beq	r4,zero,d1cc <__floatsidf+0xc0>
    d120:	2023883a 	mov	r17,r4
    d124:	2020d7fa 	srli	r16,r4,31
    d128:	20002d16 	blt	r4,zero,d1e0 <__floatsidf+0xd4>
    d12c:	8809883a 	mov	r4,r17
    d130:	000d2900 	call	d290 <__clzsi2>
    d134:	01410784 	movi	r5,1054
    d138:	288bc83a 	sub	r5,r5,r2
    d13c:	01010cc4 	movi	r4,1075
    d140:	2149c83a 	sub	r4,r4,r5
    d144:	00c007c4 	movi	r3,31
    d148:	1900160e 	bge	r3,r4,d1a4 <__floatsidf+0x98>
    d14c:	00c104c4 	movi	r3,1043
    d150:	1947c83a 	sub	r3,r3,r5
    d154:	88c6983a 	sll	r3,r17,r3
    d158:	00800434 	movhi	r2,16
    d15c:	10bfffc4 	addi	r2,r2,-1
    d160:	1886703a 	and	r3,r3,r2
    d164:	2941ffcc 	andi	r5,r5,2047
    d168:	800d883a 	mov	r6,r16
    d16c:	0005883a 	mov	r2,zero
    d170:	280a953a 	slli	r5,r5,20
    d174:	31803fcc 	andi	r6,r6,255
    d178:	01000434 	movhi	r4,16
    d17c:	300c97fa 	slli	r6,r6,31
    d180:	213fffc4 	addi	r4,r4,-1
    d184:	1906703a 	and	r3,r3,r4
    d188:	1946b03a 	or	r3,r3,r5
    d18c:	1986b03a 	or	r3,r3,r6
    d190:	dfc00217 	ldw	ra,8(sp)
    d194:	dc400117 	ldw	r17,4(sp)
    d198:	dc000017 	ldw	r16,0(sp)
    d19c:	dec00304 	addi	sp,sp,12
    d1a0:	f800283a 	ret
    d1a4:	00c002c4 	movi	r3,11
    d1a8:	1887c83a 	sub	r3,r3,r2
    d1ac:	88c6d83a 	srl	r3,r17,r3
    d1b0:	8904983a 	sll	r2,r17,r4
    d1b4:	01000434 	movhi	r4,16
    d1b8:	213fffc4 	addi	r4,r4,-1
    d1bc:	2941ffcc 	andi	r5,r5,2047
    d1c0:	1906703a 	and	r3,r3,r4
    d1c4:	800d883a 	mov	r6,r16
    d1c8:	003fe906 	br	d170 <__floatsidf+0x64>
    d1cc:	000d883a 	mov	r6,zero
    d1d0:	000b883a 	mov	r5,zero
    d1d4:	0007883a 	mov	r3,zero
    d1d8:	0005883a 	mov	r2,zero
    d1dc:	003fe406 	br	d170 <__floatsidf+0x64>
    d1e0:	0123c83a 	sub	r17,zero,r4
    d1e4:	003fd106 	br	d12c <__floatsidf+0x20>

0000d1e8 <__floatunsidf>:
    d1e8:	defffe04 	addi	sp,sp,-8
    d1ec:	dc000015 	stw	r16,0(sp)
    d1f0:	dfc00115 	stw	ra,4(sp)
    d1f4:	2021883a 	mov	r16,r4
    d1f8:	20002226 	beq	r4,zero,d284 <__floatunsidf+0x9c>
    d1fc:	000d2900 	call	d290 <__clzsi2>
    d200:	01010784 	movi	r4,1054
    d204:	2089c83a 	sub	r4,r4,r2
    d208:	01810cc4 	movi	r6,1075
    d20c:	310dc83a 	sub	r6,r6,r4
    d210:	00c007c4 	movi	r3,31
    d214:	1980120e 	bge	r3,r6,d260 <__floatunsidf+0x78>
    d218:	00c104c4 	movi	r3,1043
    d21c:	1907c83a 	sub	r3,r3,r4
    d220:	80ca983a 	sll	r5,r16,r3
    d224:	00800434 	movhi	r2,16
    d228:	10bfffc4 	addi	r2,r2,-1
    d22c:	2101ffcc 	andi	r4,r4,2047
    d230:	0021883a 	mov	r16,zero
    d234:	288a703a 	and	r5,r5,r2
    d238:	2008953a 	slli	r4,r4,20
    d23c:	00c00434 	movhi	r3,16
    d240:	18ffffc4 	addi	r3,r3,-1
    d244:	28c6703a 	and	r3,r5,r3
    d248:	8005883a 	mov	r2,r16
    d24c:	1906b03a 	or	r3,r3,r4
    d250:	dfc00117 	ldw	ra,4(sp)
    d254:	dc000017 	ldw	r16,0(sp)
    d258:	dec00204 	addi	sp,sp,8
    d25c:	f800283a 	ret
    d260:	00c002c4 	movi	r3,11
    d264:	188bc83a 	sub	r5,r3,r2
    d268:	814ad83a 	srl	r5,r16,r5
    d26c:	00c00434 	movhi	r3,16
    d270:	18ffffc4 	addi	r3,r3,-1
    d274:	81a0983a 	sll	r16,r16,r6
    d278:	2101ffcc 	andi	r4,r4,2047
    d27c:	28ca703a 	and	r5,r5,r3
    d280:	003fed06 	br	d238 <__floatunsidf+0x50>
    d284:	0009883a 	mov	r4,zero
    d288:	000b883a 	mov	r5,zero
    d28c:	003fea06 	br	d238 <__floatunsidf+0x50>

0000d290 <__clzsi2>:
    d290:	00bfffd4 	movui	r2,65535
    d294:	11000536 	bltu	r2,r4,d2ac <__clzsi2+0x1c>
    d298:	00803fc4 	movi	r2,255
    d29c:	11000f36 	bltu	r2,r4,d2dc <__clzsi2+0x4c>
    d2a0:	00800804 	movi	r2,32
    d2a4:	0007883a 	mov	r3,zero
    d2a8:	00000506 	br	d2c0 <__clzsi2+0x30>
    d2ac:	00804034 	movhi	r2,256
    d2b0:	10bfffc4 	addi	r2,r2,-1
    d2b4:	11000c2e 	bgeu	r2,r4,d2e8 <__clzsi2+0x58>
    d2b8:	00800204 	movi	r2,8
    d2bc:	00c00604 	movi	r3,24
    d2c0:	20c8d83a 	srl	r4,r4,r3
    d2c4:	00c00074 	movhi	r3,1
    d2c8:	18c08404 	addi	r3,r3,528
    d2cc:	1909883a 	add	r4,r3,r4
    d2d0:	20c00003 	ldbu	r3,0(r4)
    d2d4:	10c5c83a 	sub	r2,r2,r3
    d2d8:	f800283a 	ret
    d2dc:	00800604 	movi	r2,24
    d2e0:	00c00204 	movi	r3,8
    d2e4:	003ff606 	br	d2c0 <__clzsi2+0x30>
    d2e8:	00800404 	movi	r2,16
    d2ec:	1007883a 	mov	r3,r2
    d2f0:	003ff306 	br	d2c0 <__clzsi2+0x30>

0000d2f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2f4:	defffe04 	addi	sp,sp,-8
    d2f8:	dfc00115 	stw	ra,4(sp)
    d2fc:	df000015 	stw	fp,0(sp)
    d300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d304:	d0a00b17 	ldw	r2,-32724(gp)
    d308:	10000326 	beq	r2,zero,d318 <alt_get_errno+0x24>
    d30c:	d0a00b17 	ldw	r2,-32724(gp)
    d310:	103ee83a 	callr	r2
    d314:	00000106 	br	d31c <alt_get_errno+0x28>
    d318:	d0a6d104 	addi	r2,gp,-25788
}
    d31c:	e037883a 	mov	sp,fp
    d320:	dfc00117 	ldw	ra,4(sp)
    d324:	df000017 	ldw	fp,0(sp)
    d328:	dec00204 	addi	sp,sp,8
    d32c:	f800283a 	ret

0000d330 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d330:	defffb04 	addi	sp,sp,-20
    d334:	dfc00415 	stw	ra,16(sp)
    d338:	df000315 	stw	fp,12(sp)
    d33c:	df000304 	addi	fp,sp,12
    d340:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d344:	e0bfff17 	ldw	r2,-4(fp)
    d348:	10000816 	blt	r2,zero,d36c <close+0x3c>
    d34c:	01400304 	movi	r5,12
    d350:	e13fff17 	ldw	r4,-4(fp)
    d354:	000aa280 	call	aa28 <__mulsi3>
    d358:	1007883a 	mov	r3,r2
    d35c:	00800074 	movhi	r2,1
    d360:	10830404 	addi	r2,r2,3088
    d364:	1885883a 	add	r2,r3,r2
    d368:	00000106 	br	d370 <close+0x40>
    d36c:	0005883a 	mov	r2,zero
    d370:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d374:	e0bffd17 	ldw	r2,-12(fp)
    d378:	10001926 	beq	r2,zero,d3e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d37c:	e0bffd17 	ldw	r2,-12(fp)
    d380:	10800017 	ldw	r2,0(r2)
    d384:	10800417 	ldw	r2,16(r2)
    d388:	10000626 	beq	r2,zero,d3a4 <close+0x74>
    d38c:	e0bffd17 	ldw	r2,-12(fp)
    d390:	10800017 	ldw	r2,0(r2)
    d394:	10800417 	ldw	r2,16(r2)
    d398:	e13ffd17 	ldw	r4,-12(fp)
    d39c:	103ee83a 	callr	r2
    d3a0:	00000106 	br	d3a8 <close+0x78>
    d3a4:	0005883a 	mov	r2,zero
    d3a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d3ac:	e13fff17 	ldw	r4,-4(fp)
    d3b0:	000df200 	call	df20 <alt_release_fd>
    if (rval < 0)
    d3b4:	e0bffe17 	ldw	r2,-8(fp)
    d3b8:	1000070e 	bge	r2,zero,d3d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d3bc:	000d2f40 	call	d2f4 <alt_get_errno>
    d3c0:	1007883a 	mov	r3,r2
    d3c4:	e0bffe17 	ldw	r2,-8(fp)
    d3c8:	0085c83a 	sub	r2,zero,r2
    d3cc:	18800015 	stw	r2,0(r3)
      return -1;
    d3d0:	00bfffc4 	movi	r2,-1
    d3d4:	00000706 	br	d3f4 <close+0xc4>
    }
    return 0;
    d3d8:	0005883a 	mov	r2,zero
    d3dc:	00000506 	br	d3f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d3e0:	000d2f40 	call	d2f4 <alt_get_errno>
    d3e4:	1007883a 	mov	r3,r2
    d3e8:	00801444 	movi	r2,81
    d3ec:	18800015 	stw	r2,0(r3)
    return -1;
    d3f0:	00bfffc4 	movi	r2,-1
  }
}
    d3f4:	e037883a 	mov	sp,fp
    d3f8:	dfc00117 	ldw	ra,4(sp)
    d3fc:	df000017 	ldw	fp,0(sp)
    d400:	dec00204 	addi	sp,sp,8
    d404:	f800283a 	ret

0000d408 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d408:	defffc04 	addi	sp,sp,-16
    d40c:	df000315 	stw	fp,12(sp)
    d410:	df000304 	addi	fp,sp,12
    d414:	e13ffd15 	stw	r4,-12(fp)
    d418:	e17ffe15 	stw	r5,-8(fp)
    d41c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d420:	e0bfff17 	ldw	r2,-4(fp)
}
    d424:	e037883a 	mov	sp,fp
    d428:	df000017 	ldw	fp,0(sp)
    d42c:	dec00104 	addi	sp,sp,4
    d430:	f800283a 	ret

0000d434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d434:	defffe04 	addi	sp,sp,-8
    d438:	dfc00115 	stw	ra,4(sp)
    d43c:	df000015 	stw	fp,0(sp)
    d440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d444:	d0a00b17 	ldw	r2,-32724(gp)
    d448:	10000326 	beq	r2,zero,d458 <alt_get_errno+0x24>
    d44c:	d0a00b17 	ldw	r2,-32724(gp)
    d450:	103ee83a 	callr	r2
    d454:	00000106 	br	d45c <alt_get_errno+0x28>
    d458:	d0a6d104 	addi	r2,gp,-25788
}
    d45c:	e037883a 	mov	sp,fp
    d460:	dfc00117 	ldw	ra,4(sp)
    d464:	df000017 	ldw	fp,0(sp)
    d468:	dec00204 	addi	sp,sp,8
    d46c:	f800283a 	ret

0000d470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d470:	defffb04 	addi	sp,sp,-20
    d474:	dfc00415 	stw	ra,16(sp)
    d478:	df000315 	stw	fp,12(sp)
    d47c:	df000304 	addi	fp,sp,12
    d480:	e13ffe15 	stw	r4,-8(fp)
    d484:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d488:	e0bffe17 	ldw	r2,-8(fp)
    d48c:	10000816 	blt	r2,zero,d4b0 <fstat+0x40>
    d490:	01400304 	movi	r5,12
    d494:	e13ffe17 	ldw	r4,-8(fp)
    d498:	000aa280 	call	aa28 <__mulsi3>
    d49c:	1007883a 	mov	r3,r2
    d4a0:	00800074 	movhi	r2,1
    d4a4:	10830404 	addi	r2,r2,3088
    d4a8:	1885883a 	add	r2,r3,r2
    d4ac:	00000106 	br	d4b4 <fstat+0x44>
    d4b0:	0005883a 	mov	r2,zero
    d4b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d4b8:	e0bffd17 	ldw	r2,-12(fp)
    d4bc:	10001026 	beq	r2,zero,d500 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d4c0:	e0bffd17 	ldw	r2,-12(fp)
    d4c4:	10800017 	ldw	r2,0(r2)
    d4c8:	10800817 	ldw	r2,32(r2)
    d4cc:	10000726 	beq	r2,zero,d4ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d4d0:	e0bffd17 	ldw	r2,-12(fp)
    d4d4:	10800017 	ldw	r2,0(r2)
    d4d8:	10800817 	ldw	r2,32(r2)
    d4dc:	e17fff17 	ldw	r5,-4(fp)
    d4e0:	e13ffd17 	ldw	r4,-12(fp)
    d4e4:	103ee83a 	callr	r2
    d4e8:	00000a06 	br	d514 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d4ec:	e0bfff17 	ldw	r2,-4(fp)
    d4f0:	00c80004 	movi	r3,8192
    d4f4:	10c00115 	stw	r3,4(r2)
      return 0;
    d4f8:	0005883a 	mov	r2,zero
    d4fc:	00000506 	br	d514 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d500:	000d4340 	call	d434 <alt_get_errno>
    d504:	1007883a 	mov	r3,r2
    d508:	00801444 	movi	r2,81
    d50c:	18800015 	stw	r2,0(r3)
    return -1;
    d510:	00bfffc4 	movi	r2,-1
  }
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d528:	defff904 	addi	sp,sp,-28
    d52c:	dfc00615 	stw	ra,24(sp)
    d530:	df000515 	stw	fp,20(sp)
    d534:	df000504 	addi	fp,sp,20
    d538:	e13ffc15 	stw	r4,-16(fp)
    d53c:	e17ffd15 	stw	r5,-12(fp)
    d540:	e1bffe15 	stw	r6,-8(fp)
    d544:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d548:	e0800217 	ldw	r2,8(fp)
    d54c:	d8800015 	stw	r2,0(sp)
    d550:	e1ffff17 	ldw	r7,-4(fp)
    d554:	e1bffe17 	ldw	r6,-8(fp)
    d558:	e17ffd17 	ldw	r5,-12(fp)
    d55c:	e13ffc17 	ldw	r4,-16(fp)
    d560:	000d6d80 	call	d6d8 <alt_iic_isr_register>
}  
    d564:	e037883a 	mov	sp,fp
    d568:	dfc00117 	ldw	ra,4(sp)
    d56c:	df000017 	ldw	fp,0(sp)
    d570:	dec00204 	addi	sp,sp,8
    d574:	f800283a 	ret

0000d578 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d578:	defff904 	addi	sp,sp,-28
    d57c:	df000615 	stw	fp,24(sp)
    d580:	df000604 	addi	fp,sp,24
    d584:	e13ffe15 	stw	r4,-8(fp)
    d588:	e17fff15 	stw	r5,-4(fp)
    d58c:	e0bfff17 	ldw	r2,-4(fp)
    d590:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d594:	0005303a 	rdctl	r2,status
    d598:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d59c:	e0fffb17 	ldw	r3,-20(fp)
    d5a0:	00bfff84 	movi	r2,-2
    d5a4:	1884703a 	and	r2,r3,r2
    d5a8:	1001703a 	wrctl	status,r2
  
  return context;
    d5ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d5b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d5b4:	00c00044 	movi	r3,1
    d5b8:	e0bffa17 	ldw	r2,-24(fp)
    d5bc:	1884983a 	sll	r2,r3,r2
    d5c0:	1007883a 	mov	r3,r2
    d5c4:	d0a6d217 	ldw	r2,-25784(gp)
    d5c8:	1884b03a 	or	r2,r3,r2
    d5cc:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d5d0:	d0a6d217 	ldw	r2,-25784(gp)
    d5d4:	100170fa 	wrctl	ienable,r2
    d5d8:	e0bffc17 	ldw	r2,-16(fp)
    d5dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5e0:	e0bffd17 	ldw	r2,-12(fp)
    d5e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d5e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d5ec:	0001883a 	nop
}
    d5f0:	e037883a 	mov	sp,fp
    d5f4:	df000017 	ldw	fp,0(sp)
    d5f8:	dec00104 	addi	sp,sp,4
    d5fc:	f800283a 	ret

0000d600 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d600:	defff904 	addi	sp,sp,-28
    d604:	df000615 	stw	fp,24(sp)
    d608:	df000604 	addi	fp,sp,24
    d60c:	e13ffe15 	stw	r4,-8(fp)
    d610:	e17fff15 	stw	r5,-4(fp)
    d614:	e0bfff17 	ldw	r2,-4(fp)
    d618:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d61c:	0005303a 	rdctl	r2,status
    d620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d624:	e0fffb17 	ldw	r3,-20(fp)
    d628:	00bfff84 	movi	r2,-2
    d62c:	1884703a 	and	r2,r3,r2
    d630:	1001703a 	wrctl	status,r2
  
  return context;
    d634:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d638:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d63c:	00c00044 	movi	r3,1
    d640:	e0bffa17 	ldw	r2,-24(fp)
    d644:	1884983a 	sll	r2,r3,r2
    d648:	0084303a 	nor	r2,zero,r2
    d64c:	1007883a 	mov	r3,r2
    d650:	d0a6d217 	ldw	r2,-25784(gp)
    d654:	1884703a 	and	r2,r3,r2
    d658:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d65c:	d0a6d217 	ldw	r2,-25784(gp)
    d660:	100170fa 	wrctl	ienable,r2
    d664:	e0bffc17 	ldw	r2,-16(fp)
    d668:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d66c:	e0bffd17 	ldw	r2,-12(fp)
    d670:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d674:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d678:	0001883a 	nop
}
    d67c:	e037883a 	mov	sp,fp
    d680:	df000017 	ldw	fp,0(sp)
    d684:	dec00104 	addi	sp,sp,4
    d688:	f800283a 	ret

0000d68c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d68c:	defffc04 	addi	sp,sp,-16
    d690:	df000315 	stw	fp,12(sp)
    d694:	df000304 	addi	fp,sp,12
    d698:	e13ffe15 	stw	r4,-8(fp)
    d69c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d6a0:	000530fa 	rdctl	r2,ienable
    d6a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d6a8:	00c00044 	movi	r3,1
    d6ac:	e0bfff17 	ldw	r2,-4(fp)
    d6b0:	1884983a 	sll	r2,r3,r2
    d6b4:	1007883a 	mov	r3,r2
    d6b8:	e0bffd17 	ldw	r2,-12(fp)
    d6bc:	1884703a 	and	r2,r3,r2
    d6c0:	1004c03a 	cmpne	r2,r2,zero
    d6c4:	10803fcc 	andi	r2,r2,255
}
    d6c8:	e037883a 	mov	sp,fp
    d6cc:	df000017 	ldw	fp,0(sp)
    d6d0:	dec00104 	addi	sp,sp,4
    d6d4:	f800283a 	ret

0000d6d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d6d8:	defff504 	addi	sp,sp,-44
    d6dc:	dfc00a15 	stw	ra,40(sp)
    d6e0:	df000915 	stw	fp,36(sp)
    d6e4:	df000904 	addi	fp,sp,36
    d6e8:	e13ffc15 	stw	r4,-16(fp)
    d6ec:	e17ffd15 	stw	r5,-12(fp)
    d6f0:	e1bffe15 	stw	r6,-8(fp)
    d6f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d6f8:	00bffa84 	movi	r2,-22
    d6fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d700:	e0bffd17 	ldw	r2,-12(fp)
    d704:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d708:	e0bff817 	ldw	r2,-32(fp)
    d70c:	10800808 	cmpgei	r2,r2,32
    d710:	1000271e 	bne	r2,zero,d7b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d714:	0005303a 	rdctl	r2,status
    d718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d71c:	e0fffb17 	ldw	r3,-20(fp)
    d720:	00bfff84 	movi	r2,-2
    d724:	1884703a 	and	r2,r3,r2
    d728:	1001703a 	wrctl	status,r2
  
  return context;
    d72c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d730:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d734:	00800074 	movhi	r2,1
    d738:	108e5f04 	addi	r2,r2,14716
    d73c:	e0fff817 	ldw	r3,-32(fp)
    d740:	180690fa 	slli	r3,r3,3
    d744:	10c5883a 	add	r2,r2,r3
    d748:	e0fffe17 	ldw	r3,-8(fp)
    d74c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d750:	00800074 	movhi	r2,1
    d754:	108e5f04 	addi	r2,r2,14716
    d758:	e0fff817 	ldw	r3,-32(fp)
    d75c:	180690fa 	slli	r3,r3,3
    d760:	10c5883a 	add	r2,r2,r3
    d764:	10800104 	addi	r2,r2,4
    d768:	e0ffff17 	ldw	r3,-4(fp)
    d76c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d770:	e0bffe17 	ldw	r2,-8(fp)
    d774:	10000526 	beq	r2,zero,d78c <alt_iic_isr_register+0xb4>
    d778:	e0bff817 	ldw	r2,-32(fp)
    d77c:	100b883a 	mov	r5,r2
    d780:	e13ffc17 	ldw	r4,-16(fp)
    d784:	000d5780 	call	d578 <alt_ic_irq_enable>
    d788:	00000406 	br	d79c <alt_iic_isr_register+0xc4>
    d78c:	e0bff817 	ldw	r2,-32(fp)
    d790:	100b883a 	mov	r5,r2
    d794:	e13ffc17 	ldw	r4,-16(fp)
    d798:	000d6000 	call	d600 <alt_ic_irq_disable>
    d79c:	e0bff715 	stw	r2,-36(fp)
    d7a0:	e0bffa17 	ldw	r2,-24(fp)
    d7a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7a8:	e0bff917 	ldw	r2,-28(fp)
    d7ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d7b0:	e0bff717 	ldw	r2,-36(fp)
}
    d7b4:	e037883a 	mov	sp,fp
    d7b8:	dfc00117 	ldw	ra,4(sp)
    d7bc:	df000017 	ldw	fp,0(sp)
    d7c0:	dec00204 	addi	sp,sp,8
    d7c4:	f800283a 	ret

0000d7c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7c8:	defffe04 	addi	sp,sp,-8
    d7cc:	dfc00115 	stw	ra,4(sp)
    d7d0:	df000015 	stw	fp,0(sp)
    d7d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7d8:	d0a00b17 	ldw	r2,-32724(gp)
    d7dc:	10000326 	beq	r2,zero,d7ec <alt_get_errno+0x24>
    d7e0:	d0a00b17 	ldw	r2,-32724(gp)
    d7e4:	103ee83a 	callr	r2
    d7e8:	00000106 	br	d7f0 <alt_get_errno+0x28>
    d7ec:	d0a6d104 	addi	r2,gp,-25788
}
    d7f0:	e037883a 	mov	sp,fp
    d7f4:	dfc00117 	ldw	ra,4(sp)
    d7f8:	df000017 	ldw	fp,0(sp)
    d7fc:	dec00204 	addi	sp,sp,8
    d800:	f800283a 	ret

0000d804 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d804:	deffed04 	addi	sp,sp,-76
    d808:	dfc01215 	stw	ra,72(sp)
    d80c:	df001115 	stw	fp,68(sp)
    d810:	df001104 	addi	fp,sp,68
    d814:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d818:	e0bfff17 	ldw	r2,-4(fp)
    d81c:	10000816 	blt	r2,zero,d840 <isatty+0x3c>
    d820:	01400304 	movi	r5,12
    d824:	e13fff17 	ldw	r4,-4(fp)
    d828:	000aa280 	call	aa28 <__mulsi3>
    d82c:	1007883a 	mov	r3,r2
    d830:	00800074 	movhi	r2,1
    d834:	10830404 	addi	r2,r2,3088
    d838:	1885883a 	add	r2,r3,r2
    d83c:	00000106 	br	d844 <isatty+0x40>
    d840:	0005883a 	mov	r2,zero
    d844:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d848:	e0bfef17 	ldw	r2,-68(fp)
    d84c:	10000e26 	beq	r2,zero,d888 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d850:	e0bfef17 	ldw	r2,-68(fp)
    d854:	10800017 	ldw	r2,0(r2)
    d858:	10800817 	ldw	r2,32(r2)
    d85c:	1000021e 	bne	r2,zero,d868 <isatty+0x64>
    {
      return 1;
    d860:	00800044 	movi	r2,1
    d864:	00000d06 	br	d89c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d868:	e0bff004 	addi	r2,fp,-64
    d86c:	100b883a 	mov	r5,r2
    d870:	e13fff17 	ldw	r4,-4(fp)
    d874:	000d4700 	call	d470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d878:	e0bff117 	ldw	r2,-60(fp)
    d87c:	10880020 	cmpeqi	r2,r2,8192
    d880:	10803fcc 	andi	r2,r2,255
    d884:	00000506 	br	d89c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d888:	000d7c80 	call	d7c8 <alt_get_errno>
    d88c:	1007883a 	mov	r3,r2
    d890:	00801444 	movi	r2,81
    d894:	18800015 	stw	r2,0(r3)
    return 0;
    d898:	0005883a 	mov	r2,zero
  }
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	dfc00117 	ldw	ra,4(sp)
    d8a4:	df000017 	ldw	fp,0(sp)
    d8a8:	dec00204 	addi	sp,sp,8
    d8ac:	f800283a 	ret

0000d8b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d8b0:	defffc04 	addi	sp,sp,-16
    d8b4:	df000315 	stw	fp,12(sp)
    d8b8:	df000304 	addi	fp,sp,12
    d8bc:	e13ffd15 	stw	r4,-12(fp)
    d8c0:	e17ffe15 	stw	r5,-8(fp)
    d8c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d8c8:	e0fffe17 	ldw	r3,-8(fp)
    d8cc:	e0bffd17 	ldw	r2,-12(fp)
    d8d0:	18800c26 	beq	r3,r2,d904 <alt_load_section+0x54>
  {
    while( to != end )
    d8d4:	00000806 	br	d8f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d8d8:	e0bffe17 	ldw	r2,-8(fp)
    d8dc:	10c00104 	addi	r3,r2,4
    d8e0:	e0fffe15 	stw	r3,-8(fp)
    d8e4:	e0fffd17 	ldw	r3,-12(fp)
    d8e8:	19000104 	addi	r4,r3,4
    d8ec:	e13ffd15 	stw	r4,-12(fp)
    d8f0:	18c00017 	ldw	r3,0(r3)
    d8f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d8f8:	e0fffe17 	ldw	r3,-8(fp)
    d8fc:	e0bfff17 	ldw	r2,-4(fp)
    d900:	18bff51e 	bne	r3,r2,d8d8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d904:	0001883a 	nop
    d908:	e037883a 	mov	sp,fp
    d90c:	df000017 	ldw	fp,0(sp)
    d910:	dec00104 	addi	sp,sp,4
    d914:	f800283a 	ret

0000d918 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d918:	defffe04 	addi	sp,sp,-8
    d91c:	dfc00115 	stw	ra,4(sp)
    d920:	df000015 	stw	fp,0(sp)
    d924:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d928:	01800074 	movhi	r6,1
    d92c:	31878c04 	addi	r6,r6,7728
    d930:	01400074 	movhi	r5,1
    d934:	2940d104 	addi	r5,r5,836
    d938:	01000074 	movhi	r4,1
    d93c:	21078c04 	addi	r4,r4,7728
    d940:	000d8b00 	call	d8b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d944:	01800034 	movhi	r6,0
    d948:	31808c04 	addi	r6,r6,560
    d94c:	01400034 	movhi	r5,0
    d950:	29400804 	addi	r5,r5,32
    d954:	01000034 	movhi	r4,0
    d958:	21000804 	addi	r4,r4,32
    d95c:	000d8b00 	call	d8b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d960:	01800074 	movhi	r6,1
    d964:	3180d104 	addi	r6,r6,836
    d968:	01400074 	movhi	r5,1
    d96c:	297ffc04 	addi	r5,r5,-16
    d970:	01000074 	movhi	r4,1
    d974:	213ffc04 	addi	r4,r4,-16
    d978:	000d8b00 	call	d8b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d97c:	000f0700 	call	f070 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d980:	000f2300 	call	f230 <alt_icache_flush_all>
}
    d984:	0001883a 	nop
    d988:	e037883a 	mov	sp,fp
    d98c:	dfc00117 	ldw	ra,4(sp)
    d990:	df000017 	ldw	fp,0(sp)
    d994:	dec00204 	addi	sp,sp,8
    d998:	f800283a 	ret

0000d99c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d99c:	defffe04 	addi	sp,sp,-8
    d9a0:	dfc00115 	stw	ra,4(sp)
    d9a4:	df000015 	stw	fp,0(sp)
    d9a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9ac:	d0a00b17 	ldw	r2,-32724(gp)
    d9b0:	10000326 	beq	r2,zero,d9c0 <alt_get_errno+0x24>
    d9b4:	d0a00b17 	ldw	r2,-32724(gp)
    d9b8:	103ee83a 	callr	r2
    d9bc:	00000106 	br	d9c4 <alt_get_errno+0x28>
    d9c0:	d0a6d104 	addi	r2,gp,-25788
}
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	dfc00117 	ldw	ra,4(sp)
    d9cc:	df000017 	ldw	fp,0(sp)
    d9d0:	dec00204 	addi	sp,sp,8
    d9d4:	f800283a 	ret

0000d9d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d9d8:	defff904 	addi	sp,sp,-28
    d9dc:	dfc00615 	stw	ra,24(sp)
    d9e0:	df000515 	stw	fp,20(sp)
    d9e4:	df000504 	addi	fp,sp,20
    d9e8:	e13ffd15 	stw	r4,-12(fp)
    d9ec:	e17ffe15 	stw	r5,-8(fp)
    d9f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d9f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9f8:	e0bffd17 	ldw	r2,-12(fp)
    d9fc:	10000816 	blt	r2,zero,da20 <lseek+0x48>
    da00:	01400304 	movi	r5,12
    da04:	e13ffd17 	ldw	r4,-12(fp)
    da08:	000aa280 	call	aa28 <__mulsi3>
    da0c:	1007883a 	mov	r3,r2
    da10:	00800074 	movhi	r2,1
    da14:	10830404 	addi	r2,r2,3088
    da18:	1885883a 	add	r2,r3,r2
    da1c:	00000106 	br	da24 <lseek+0x4c>
    da20:	0005883a 	mov	r2,zero
    da24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da28:	e0bffc17 	ldw	r2,-16(fp)
    da2c:	10001026 	beq	r2,zero,da70 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da30:	e0bffc17 	ldw	r2,-16(fp)
    da34:	10800017 	ldw	r2,0(r2)
    da38:	10800717 	ldw	r2,28(r2)
    da3c:	10000926 	beq	r2,zero,da64 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da40:	e0bffc17 	ldw	r2,-16(fp)
    da44:	10800017 	ldw	r2,0(r2)
    da48:	10800717 	ldw	r2,28(r2)
    da4c:	e1bfff17 	ldw	r6,-4(fp)
    da50:	e17ffe17 	ldw	r5,-8(fp)
    da54:	e13ffc17 	ldw	r4,-16(fp)
    da58:	103ee83a 	callr	r2
    da5c:	e0bffb15 	stw	r2,-20(fp)
    da60:	00000506 	br	da78 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    da64:	00bfde84 	movi	r2,-134
    da68:	e0bffb15 	stw	r2,-20(fp)
    da6c:	00000206 	br	da78 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    da70:	00bfebc4 	movi	r2,-81
    da74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    da78:	e0bffb17 	ldw	r2,-20(fp)
    da7c:	1000070e 	bge	r2,zero,da9c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    da80:	000d99c0 	call	d99c <alt_get_errno>
    da84:	1007883a 	mov	r3,r2
    da88:	e0bffb17 	ldw	r2,-20(fp)
    da8c:	0085c83a 	sub	r2,zero,r2
    da90:	18800015 	stw	r2,0(r3)
    rc = -1;
    da94:	00bfffc4 	movi	r2,-1
    da98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    da9c:	e0bffb17 	ldw	r2,-20(fp)
}
    daa0:	e037883a 	mov	sp,fp
    daa4:	dfc00117 	ldw	ra,4(sp)
    daa8:	df000017 	ldw	fp,0(sp)
    daac:	dec00204 	addi	sp,sp,8
    dab0:	f800283a 	ret

0000dab4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dab4:	defffd04 	addi	sp,sp,-12
    dab8:	dfc00215 	stw	ra,8(sp)
    dabc:	df000115 	stw	fp,4(sp)
    dac0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dac4:	0009883a 	mov	r4,zero
    dac8:	000e1f40 	call	e1f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dacc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dad0:	000e22c0 	call	e22c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dad4:	01800074 	movhi	r6,1
    dad8:	3180c704 	addi	r6,r6,796
    dadc:	01400074 	movhi	r5,1
    dae0:	2940c704 	addi	r5,r5,796
    dae4:	01000074 	movhi	r4,1
    dae8:	2100c704 	addi	r4,r4,796
    daec:	000f3d00 	call	f3d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    daf0:	000f1700 	call	f170 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    daf4:	01000074 	movhi	r4,1
    daf8:	213c7404 	addi	r4,r4,-3632
    dafc:	000faf40 	call	faf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    db00:	d0a6d317 	ldw	r2,-25780(gp)
    db04:	d0e6d417 	ldw	r3,-25776(gp)
    db08:	d126d517 	ldw	r4,-25772(gp)
    db0c:	200d883a 	mov	r6,r4
    db10:	180b883a 	mov	r5,r3
    db14:	1009883a 	mov	r4,r2
    db18:	00002c40 	call	2c4 <main>
    db1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    db20:	01000044 	movi	r4,1
    db24:	000d3300 	call	d330 <close>
  exit (result);
    db28:	e13fff17 	ldw	r4,-4(fp)
    db2c:	000fb080 	call	fb08 <exit>

0000db30 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    db30:	defffe04 	addi	sp,sp,-8
    db34:	df000115 	stw	fp,4(sp)
    db38:	df000104 	addi	fp,sp,4
    db3c:	e13fff15 	stw	r4,-4(fp)
}
    db40:	0001883a 	nop
    db44:	e037883a 	mov	sp,fp
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00104 	addi	sp,sp,4
    db50:	f800283a 	ret

0000db54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    db54:	defffe04 	addi	sp,sp,-8
    db58:	df000115 	stw	fp,4(sp)
    db5c:	df000104 	addi	fp,sp,4
    db60:	e13fff15 	stw	r4,-4(fp)
}
    db64:	0001883a 	nop
    db68:	e037883a 	mov	sp,fp
    db6c:	df000017 	ldw	fp,0(sp)
    db70:	dec00104 	addi	sp,sp,4
    db74:	f800283a 	ret

0000db78 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    db78:	defff204 	addi	sp,sp,-56
    db7c:	dfc00a15 	stw	ra,40(sp)
    db80:	df000915 	stw	fp,36(sp)
    db84:	df000904 	addi	fp,sp,36
    db88:	e13fff15 	stw	r4,-4(fp)
    db8c:	e1400215 	stw	r5,8(fp)
    db90:	e1800315 	stw	r6,12(fp)
    db94:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    db98:	e0800204 	addi	r2,fp,8
    db9c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    dba0:	e0bfff17 	ldw	r2,-4(fp)
    dba4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    dba8:	00006f06 	br	dd68 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    dbac:	e0bff807 	ldb	r2,-32(fp)
    dbb0:	10800960 	cmpeqi	r2,r2,37
    dbb4:	1000041e 	bne	r2,zero,dbc8 <alt_printf+0x50>
        {
            alt_putchar(c);
    dbb8:	e0bff807 	ldb	r2,-32(fp)
    dbbc:	1009883a 	mov	r4,r2
    dbc0:	000dda40 	call	dda4 <alt_putchar>
    dbc4:	00006806 	br	dd68 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    dbc8:	e0bff717 	ldw	r2,-36(fp)
    dbcc:	10c00044 	addi	r3,r2,1
    dbd0:	e0fff715 	stw	r3,-36(fp)
    dbd4:	10800003 	ldbu	r2,0(r2)
    dbd8:	e0bff805 	stb	r2,-32(fp)
    dbdc:	e0bff807 	ldb	r2,-32(fp)
    dbe0:	10006926 	beq	r2,zero,dd88 <alt_printf+0x210>
            {
                if (c == '%')
    dbe4:	e0bff807 	ldb	r2,-32(fp)
    dbe8:	10800958 	cmpnei	r2,r2,37
    dbec:	1000041e 	bne	r2,zero,dc00 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    dbf0:	e0bff807 	ldb	r2,-32(fp)
    dbf4:	1009883a 	mov	r4,r2
    dbf8:	000dda40 	call	dda4 <alt_putchar>
    dbfc:	00005a06 	br	dd68 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    dc00:	e0bff807 	ldb	r2,-32(fp)
    dc04:	108018d8 	cmpnei	r2,r2,99
    dc08:	1000081e 	bne	r2,zero,dc2c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    dc0c:	e0bffe17 	ldw	r2,-8(fp)
    dc10:	10c00104 	addi	r3,r2,4
    dc14:	e0fffe15 	stw	r3,-8(fp)
    dc18:	10800017 	ldw	r2,0(r2)
    dc1c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    dc20:	e13ffd17 	ldw	r4,-12(fp)
    dc24:	000dda40 	call	dda4 <alt_putchar>
    dc28:	00004f06 	br	dd68 <alt_printf+0x1f0>
                }
                else if (c == 'x')
    dc2c:	e0bff807 	ldb	r2,-32(fp)
    dc30:	10801e18 	cmpnei	r2,r2,120
    dc34:	1000341e 	bne	r2,zero,dd08 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    dc38:	e0bffe17 	ldw	r2,-8(fp)
    dc3c:	10c00104 	addi	r3,r2,4
    dc40:	e0fffe15 	stw	r3,-8(fp)
    dc44:	10800017 	ldw	r2,0(r2)
    dc48:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    dc4c:	e0bffb17 	ldw	r2,-20(fp)
    dc50:	1000031e 	bne	r2,zero,dc60 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    dc54:	01000c04 	movi	r4,48
    dc58:	000dda40 	call	dda4 <alt_putchar>
                        continue;
    dc5c:	00004206 	br	dd68 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    dc60:	00800704 	movi	r2,28
    dc64:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    dc68:	00000306 	br	dc78 <alt_printf+0x100>
                        digit_shift -= 4;
    dc6c:	e0bff917 	ldw	r2,-28(fp)
    dc70:	10bfff04 	addi	r2,r2,-4
    dc74:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    dc78:	00c003c4 	movi	r3,15
    dc7c:	e0bff917 	ldw	r2,-28(fp)
    dc80:	1884983a 	sll	r2,r3,r2
    dc84:	1007883a 	mov	r3,r2
    dc88:	e0bffb17 	ldw	r2,-20(fp)
    dc8c:	1884703a 	and	r2,r3,r2
    dc90:	103ff626 	beq	r2,zero,dc6c <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dc94:	00001906 	br	dcfc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    dc98:	00c003c4 	movi	r3,15
    dc9c:	e0bff917 	ldw	r2,-28(fp)
    dca0:	1884983a 	sll	r2,r3,r2
    dca4:	1007883a 	mov	r3,r2
    dca8:	e0bffb17 	ldw	r2,-20(fp)
    dcac:	1886703a 	and	r3,r3,r2
    dcb0:	e0bff917 	ldw	r2,-28(fp)
    dcb4:	1884d83a 	srl	r2,r3,r2
    dcb8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    dcbc:	e0bffc17 	ldw	r2,-16(fp)
    dcc0:	108002a8 	cmpgeui	r2,r2,10
    dcc4:	1000041e 	bne	r2,zero,dcd8 <alt_printf+0x160>
                            c = '0' + digit;
    dcc8:	e0bffc17 	ldw	r2,-16(fp)
    dccc:	10800c04 	addi	r2,r2,48
    dcd0:	e0bff805 	stb	r2,-32(fp)
    dcd4:	00000306 	br	dce4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	108015c4 	addi	r2,r2,87
    dce0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    dce4:	e0bff807 	ldb	r2,-32(fp)
    dce8:	1009883a 	mov	r4,r2
    dcec:	000dda40 	call	dda4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dcf0:	e0bff917 	ldw	r2,-28(fp)
    dcf4:	10bfff04 	addi	r2,r2,-4
    dcf8:	e0bff915 	stw	r2,-28(fp)
    dcfc:	e0bff917 	ldw	r2,-28(fp)
    dd00:	103fe50e 	bge	r2,zero,dc98 <alt_printf+0x120>
    dd04:	00001806 	br	dd68 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    dd08:	e0bff807 	ldb	r2,-32(fp)
    dd0c:	10801cd8 	cmpnei	r2,r2,115
    dd10:	1000151e 	bne	r2,zero,dd68 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    dd14:	e0bffe17 	ldw	r2,-8(fp)
    dd18:	10c00104 	addi	r3,r2,4
    dd1c:	e0fffe15 	stw	r3,-8(fp)
    dd20:	10800017 	ldw	r2,0(r2)
    dd24:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    dd28:	00000906 	br	dd50 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    dd2c:	e0bffa17 	ldw	r2,-24(fp)
    dd30:	10c00044 	addi	r3,r2,1
    dd34:	e0fffa15 	stw	r3,-24(fp)
    dd38:	10800003 	ldbu	r2,0(r2)
    dd3c:	10803fcc 	andi	r2,r2,255
    dd40:	1080201c 	xori	r2,r2,128
    dd44:	10bfe004 	addi	r2,r2,-128
    dd48:	1009883a 	mov	r4,r2
    dd4c:	000dda40 	call	dda4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    dd50:	e0bffa17 	ldw	r2,-24(fp)
    dd54:	10800003 	ldbu	r2,0(r2)
    dd58:	10803fcc 	andi	r2,r2,255
    dd5c:	1080201c 	xori	r2,r2,128
    dd60:	10bfe004 	addi	r2,r2,-128
    dd64:	103ff11e 	bne	r2,zero,dd2c <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    dd68:	e0bff717 	ldw	r2,-36(fp)
    dd6c:	10c00044 	addi	r3,r2,1
    dd70:	e0fff715 	stw	r3,-36(fp)
    dd74:	10800003 	ldbu	r2,0(r2)
    dd78:	e0bff805 	stb	r2,-32(fp)
    dd7c:	e0bff807 	ldb	r2,-32(fp)
    dd80:	103f8a1e 	bne	r2,zero,dbac <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    dd84:	00000106 	br	dd8c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    dd88:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    dd8c:	0001883a 	nop
    dd90:	e037883a 	mov	sp,fp
    dd94:	dfc00117 	ldw	ra,4(sp)
    dd98:	df000017 	ldw	fp,0(sp)
    dd9c:	dec00504 	addi	sp,sp,20
    dda0:	f800283a 	ret

0000dda4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    dda4:	defffd04 	addi	sp,sp,-12
    dda8:	dfc00215 	stw	ra,8(sp)
    ddac:	df000115 	stw	fp,4(sp)
    ddb0:	df000104 	addi	fp,sp,4
    ddb4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    ddb8:	d0a00117 	ldw	r2,-32764(gp)
    ddbc:	10800217 	ldw	r2,8(r2)
    ddc0:	100b883a 	mov	r5,r2
    ddc4:	e13fff17 	ldw	r4,-4(fp)
    ddc8:	000fc5c0 	call	fc5c <putc>
#endif
#endif
}
    ddcc:	e037883a 	mov	sp,fp
    ddd0:	dfc00117 	ldw	ra,4(sp)
    ddd4:	df000017 	ldw	fp,0(sp)
    ddd8:	dec00204 	addi	sp,sp,8
    dddc:	f800283a 	ret

0000dde0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dde0:	defffe04 	addi	sp,sp,-8
    dde4:	dfc00115 	stw	ra,4(sp)
    dde8:	df000015 	stw	fp,0(sp)
    ddec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ddf0:	d0a00b17 	ldw	r2,-32724(gp)
    ddf4:	10000326 	beq	r2,zero,de04 <alt_get_errno+0x24>
    ddf8:	d0a00b17 	ldw	r2,-32724(gp)
    ddfc:	103ee83a 	callr	r2
    de00:	00000106 	br	de08 <alt_get_errno+0x28>
    de04:	d0a6d104 	addi	r2,gp,-25788
}
    de08:	e037883a 	mov	sp,fp
    de0c:	dfc00117 	ldw	ra,4(sp)
    de10:	df000017 	ldw	fp,0(sp)
    de14:	dec00204 	addi	sp,sp,8
    de18:	f800283a 	ret

0000de1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    de1c:	defff904 	addi	sp,sp,-28
    de20:	dfc00615 	stw	ra,24(sp)
    de24:	df000515 	stw	fp,20(sp)
    de28:	df000504 	addi	fp,sp,20
    de2c:	e13ffd15 	stw	r4,-12(fp)
    de30:	e17ffe15 	stw	r5,-8(fp)
    de34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de38:	e0bffd17 	ldw	r2,-12(fp)
    de3c:	10000816 	blt	r2,zero,de60 <read+0x44>
    de40:	01400304 	movi	r5,12
    de44:	e13ffd17 	ldw	r4,-12(fp)
    de48:	000aa280 	call	aa28 <__mulsi3>
    de4c:	1007883a 	mov	r3,r2
    de50:	00800074 	movhi	r2,1
    de54:	10830404 	addi	r2,r2,3088
    de58:	1885883a 	add	r2,r3,r2
    de5c:	00000106 	br	de64 <read+0x48>
    de60:	0005883a 	mov	r2,zero
    de64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    de68:	e0bffb17 	ldw	r2,-20(fp)
    de6c:	10002226 	beq	r2,zero,def8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    de70:	e0bffb17 	ldw	r2,-20(fp)
    de74:	10800217 	ldw	r2,8(r2)
    de78:	108000cc 	andi	r2,r2,3
    de7c:	10800060 	cmpeqi	r2,r2,1
    de80:	1000181e 	bne	r2,zero,dee4 <read+0xc8>
        (fd->dev->read))
    de84:	e0bffb17 	ldw	r2,-20(fp)
    de88:	10800017 	ldw	r2,0(r2)
    de8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    de90:	10001426 	beq	r2,zero,dee4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    de94:	e0bffb17 	ldw	r2,-20(fp)
    de98:	10800017 	ldw	r2,0(r2)
    de9c:	10800517 	ldw	r2,20(r2)
    dea0:	e0ffff17 	ldw	r3,-4(fp)
    dea4:	180d883a 	mov	r6,r3
    dea8:	e17ffe17 	ldw	r5,-8(fp)
    deac:	e13ffb17 	ldw	r4,-20(fp)
    deb0:	103ee83a 	callr	r2
    deb4:	e0bffc15 	stw	r2,-16(fp)
    deb8:	e0bffc17 	ldw	r2,-16(fp)
    debc:	1000070e 	bge	r2,zero,dedc <read+0xc0>
        {
          ALT_ERRNO = -rval;
    dec0:	000dde00 	call	dde0 <alt_get_errno>
    dec4:	1007883a 	mov	r3,r2
    dec8:	e0bffc17 	ldw	r2,-16(fp)
    decc:	0085c83a 	sub	r2,zero,r2
    ded0:	18800015 	stw	r2,0(r3)
          return -1;
    ded4:	00bfffc4 	movi	r2,-1
    ded8:	00000c06 	br	df0c <read+0xf0>
        }
        return rval;
    dedc:	e0bffc17 	ldw	r2,-16(fp)
    dee0:	00000a06 	br	df0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    dee4:	000dde00 	call	dde0 <alt_get_errno>
    dee8:	1007883a 	mov	r3,r2
    deec:	00800344 	movi	r2,13
    def0:	18800015 	stw	r2,0(r3)
    def4:	00000406 	br	df08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    def8:	000dde00 	call	dde0 <alt_get_errno>
    defc:	1007883a 	mov	r3,r2
    df00:	00801444 	movi	r2,81
    df04:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df08:	00bfffc4 	movi	r2,-1
}
    df0c:	e037883a 	mov	sp,fp
    df10:	dfc00117 	ldw	ra,4(sp)
    df14:	df000017 	ldw	fp,0(sp)
    df18:	dec00204 	addi	sp,sp,8
    df1c:	f800283a 	ret

0000df20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    df20:	defffc04 	addi	sp,sp,-16
    df24:	dfc00315 	stw	ra,12(sp)
    df28:	df000215 	stw	fp,8(sp)
    df2c:	dc000115 	stw	r16,4(sp)
    df30:	df000204 	addi	fp,sp,8
    df34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    df38:	e0bffe17 	ldw	r2,-8(fp)
    df3c:	108000d0 	cmplti	r2,r2,3
    df40:	1000111e 	bne	r2,zero,df88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    df44:	04000074 	movhi	r16,1
    df48:	84030404 	addi	r16,r16,3088
    df4c:	e0bffe17 	ldw	r2,-8(fp)
    df50:	01400304 	movi	r5,12
    df54:	1009883a 	mov	r4,r2
    df58:	000aa280 	call	aa28 <__mulsi3>
    df5c:	8085883a 	add	r2,r16,r2
    df60:	10800204 	addi	r2,r2,8
    df64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    df68:	04000074 	movhi	r16,1
    df6c:	84030404 	addi	r16,r16,3088
    df70:	e0bffe17 	ldw	r2,-8(fp)
    df74:	01400304 	movi	r5,12
    df78:	1009883a 	mov	r4,r2
    df7c:	000aa280 	call	aa28 <__mulsi3>
    df80:	8085883a 	add	r2,r16,r2
    df84:	10000015 	stw	zero,0(r2)
  }
}
    df88:	0001883a 	nop
    df8c:	e6ffff04 	addi	sp,fp,-4
    df90:	dfc00217 	ldw	ra,8(sp)
    df94:	df000117 	ldw	fp,4(sp)
    df98:	dc000017 	ldw	r16,0(sp)
    df9c:	dec00304 	addi	sp,sp,12
    dfa0:	f800283a 	ret

0000dfa4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dfa4:	defff904 	addi	sp,sp,-28
    dfa8:	df000615 	stw	fp,24(sp)
    dfac:	df000604 	addi	fp,sp,24
    dfb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfb4:	0005303a 	rdctl	r2,status
    dfb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfbc:	e0fffe17 	ldw	r3,-8(fp)
    dfc0:	00bfff84 	movi	r2,-2
    dfc4:	1884703a 	and	r2,r3,r2
    dfc8:	1001703a 	wrctl	status,r2
  
  return context;
    dfcc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dfd0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dfd4:	d0a00d17 	ldw	r2,-32716(gp)
    dfd8:	10c000c4 	addi	r3,r2,3
    dfdc:	00bfff04 	movi	r2,-4
    dfe0:	1884703a 	and	r2,r3,r2
    dfe4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dfe8:	d0e00d17 	ldw	r3,-32716(gp)
    dfec:	e0bfff17 	ldw	r2,-4(fp)
    dff0:	1887883a 	add	r3,r3,r2
    dff4:	008000b4 	movhi	r2,2
    dff8:	10a1a804 	addi	r2,r2,-31072
    dffc:	10c0062e 	bgeu	r2,r3,e018 <sbrk+0x74>
    e000:	e0bffb17 	ldw	r2,-20(fp)
    e004:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e008:	e0bffa17 	ldw	r2,-24(fp)
    e00c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e010:	00bfffc4 	movi	r2,-1
    e014:	00000b06 	br	e044 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e018:	d0a00d17 	ldw	r2,-32716(gp)
    e01c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e020:	d0e00d17 	ldw	r3,-32716(gp)
    e024:	e0bfff17 	ldw	r2,-4(fp)
    e028:	1885883a 	add	r2,r3,r2
    e02c:	d0a00d15 	stw	r2,-32716(gp)
    e030:	e0bffb17 	ldw	r2,-20(fp)
    e034:	e0bffc15 	stw	r2,-16(fp)
    e038:	e0bffc17 	ldw	r2,-16(fp)
    e03c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e040:	e0bffd17 	ldw	r2,-12(fp)
} 
    e044:	e037883a 	mov	sp,fp
    e048:	df000017 	ldw	fp,0(sp)
    e04c:	dec00104 	addi	sp,sp,4
    e050:	f800283a 	ret

0000e054 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    e054:	defffd04 	addi	sp,sp,-12
    e058:	dfc00215 	stw	ra,8(sp)
    e05c:	df000115 	stw	fp,4(sp)
    e060:	df000104 	addi	fp,sp,4
    e064:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    e068:	e13fff17 	ldw	r4,-4(fp)
    e06c:	000ef180 	call	ef18 <alt_busy_sleep>
}
    e070:	e037883a 	mov	sp,fp
    e074:	dfc00117 	ldw	ra,4(sp)
    e078:	df000017 	ldw	fp,0(sp)
    e07c:	dec00204 	addi	sp,sp,8
    e080:	f800283a 	ret

0000e084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e084:	defffe04 	addi	sp,sp,-8
    e088:	dfc00115 	stw	ra,4(sp)
    e08c:	df000015 	stw	fp,0(sp)
    e090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e094:	d0a00b17 	ldw	r2,-32724(gp)
    e098:	10000326 	beq	r2,zero,e0a8 <alt_get_errno+0x24>
    e09c:	d0a00b17 	ldw	r2,-32724(gp)
    e0a0:	103ee83a 	callr	r2
    e0a4:	00000106 	br	e0ac <alt_get_errno+0x28>
    e0a8:	d0a6d104 	addi	r2,gp,-25788
}
    e0ac:	e037883a 	mov	sp,fp
    e0b0:	dfc00117 	ldw	ra,4(sp)
    e0b4:	df000017 	ldw	fp,0(sp)
    e0b8:	dec00204 	addi	sp,sp,8
    e0bc:	f800283a 	ret

0000e0c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e0c0:	defff904 	addi	sp,sp,-28
    e0c4:	dfc00615 	stw	ra,24(sp)
    e0c8:	df000515 	stw	fp,20(sp)
    e0cc:	df000504 	addi	fp,sp,20
    e0d0:	e13ffd15 	stw	r4,-12(fp)
    e0d4:	e17ffe15 	stw	r5,-8(fp)
    e0d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e0dc:	e0bffd17 	ldw	r2,-12(fp)
    e0e0:	10000816 	blt	r2,zero,e104 <write+0x44>
    e0e4:	01400304 	movi	r5,12
    e0e8:	e13ffd17 	ldw	r4,-12(fp)
    e0ec:	000aa280 	call	aa28 <__mulsi3>
    e0f0:	1007883a 	mov	r3,r2
    e0f4:	00800074 	movhi	r2,1
    e0f8:	10830404 	addi	r2,r2,3088
    e0fc:	1885883a 	add	r2,r3,r2
    e100:	00000106 	br	e108 <write+0x48>
    e104:	0005883a 	mov	r2,zero
    e108:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e10c:	e0bffb17 	ldw	r2,-20(fp)
    e110:	10002126 	beq	r2,zero,e198 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e114:	e0bffb17 	ldw	r2,-20(fp)
    e118:	10800217 	ldw	r2,8(r2)
    e11c:	108000cc 	andi	r2,r2,3
    e120:	10001826 	beq	r2,zero,e184 <write+0xc4>
    e124:	e0bffb17 	ldw	r2,-20(fp)
    e128:	10800017 	ldw	r2,0(r2)
    e12c:	10800617 	ldw	r2,24(r2)
    e130:	10001426 	beq	r2,zero,e184 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e134:	e0bffb17 	ldw	r2,-20(fp)
    e138:	10800017 	ldw	r2,0(r2)
    e13c:	10800617 	ldw	r2,24(r2)
    e140:	e0ffff17 	ldw	r3,-4(fp)
    e144:	180d883a 	mov	r6,r3
    e148:	e17ffe17 	ldw	r5,-8(fp)
    e14c:	e13ffb17 	ldw	r4,-20(fp)
    e150:	103ee83a 	callr	r2
    e154:	e0bffc15 	stw	r2,-16(fp)
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	1000070e 	bge	r2,zero,e17c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e160:	000e0840 	call	e084 <alt_get_errno>
    e164:	1007883a 	mov	r3,r2
    e168:	e0bffc17 	ldw	r2,-16(fp)
    e16c:	0085c83a 	sub	r2,zero,r2
    e170:	18800015 	stw	r2,0(r3)
        return -1;
    e174:	00bfffc4 	movi	r2,-1
    e178:	00000c06 	br	e1ac <write+0xec>
      }
      return rval;
    e17c:	e0bffc17 	ldw	r2,-16(fp)
    e180:	00000a06 	br	e1ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e184:	000e0840 	call	e084 <alt_get_errno>
    e188:	1007883a 	mov	r3,r2
    e18c:	00800344 	movi	r2,13
    e190:	18800015 	stw	r2,0(r3)
    e194:	00000406 	br	e1a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e198:	000e0840 	call	e084 <alt_get_errno>
    e19c:	1007883a 	mov	r3,r2
    e1a0:	00801444 	movi	r2,81
    e1a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e1a8:	00bfffc4 	movi	r2,-1
}
    e1ac:	e037883a 	mov	sp,fp
    e1b0:	dfc00117 	ldw	ra,4(sp)
    e1b4:	df000017 	ldw	fp,0(sp)
    e1b8:	dec00204 	addi	sp,sp,8
    e1bc:	f800283a 	ret

0000e1c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e1c0:	defffd04 	addi	sp,sp,-12
    e1c4:	dfc00215 	stw	ra,8(sp)
    e1c8:	df000115 	stw	fp,4(sp)
    e1cc:	df000104 	addi	fp,sp,4
    e1d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e1d4:	d1600804 	addi	r5,gp,-32736
    e1d8:	e13fff17 	ldw	r4,-4(fp)
    e1dc:	000f0cc0 	call	f0cc <alt_dev_llist_insert>
}
    e1e0:	e037883a 	mov	sp,fp
    e1e4:	dfc00117 	ldw	ra,4(sp)
    e1e8:	df000017 	ldw	fp,0(sp)
    e1ec:	dec00204 	addi	sp,sp,8
    e1f0:	f800283a 	ret

0000e1f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e1f4:	defffd04 	addi	sp,sp,-12
    e1f8:	dfc00215 	stw	ra,8(sp)
    e1fc:	df000115 	stw	fp,4(sp)
    e200:	df000104 	addi	fp,sp,4
    e204:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e208:	000f8740 	call	f874 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e20c:	00800044 	movi	r2,1
    e210:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e214:	0001883a 	nop
    e218:	e037883a 	mov	sp,fp
    e21c:	dfc00117 	ldw	ra,4(sp)
    e220:	df000017 	ldw	fp,0(sp)
    e224:	dec00204 	addi	sp,sp,8
    e228:	f800283a 	ret

0000e22c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e22c:	defffe04 	addi	sp,sp,-8
    e230:	dfc00115 	stw	ra,4(sp)
    e234:	df000015 	stw	fp,0(sp)
    e238:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    e23c:	01c0fa04 	movi	r7,1000
    e240:	01800044 	movi	r6,1
    e244:	000b883a 	mov	r5,zero
    e248:	010000b4 	movhi	r4,2
    e24c:	21000804 	addi	r4,r4,32
    e250:	000ed700 	call	ed70 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e254:	000d883a 	mov	r6,zero
    e258:	000b883a 	mov	r5,zero
    e25c:	01000074 	movhi	r4,1
    e260:	21036e04 	addi	r4,r4,3512
    e264:	000e3f40 	call	e3f4 <altera_avalon_jtag_uart_init>
    e268:	01000074 	movhi	r4,1
    e26c:	21036404 	addi	r4,r4,3472
    e270:	000e1c00 	call	e1c0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_NIOS, spi_nios);
    e274:	0001883a 	nop
}
    e278:	0001883a 	nop
    e27c:	e037883a 	mov	sp,fp
    e280:	dfc00117 	ldw	ra,4(sp)
    e284:	df000017 	ldw	fp,0(sp)
    e288:	dec00204 	addi	sp,sp,8
    e28c:	f800283a 	ret

0000e290 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e290:	defffa04 	addi	sp,sp,-24
    e294:	dfc00515 	stw	ra,20(sp)
    e298:	df000415 	stw	fp,16(sp)
    e29c:	df000404 	addi	fp,sp,16
    e2a0:	e13ffd15 	stw	r4,-12(fp)
    e2a4:	e17ffe15 	stw	r5,-8(fp)
    e2a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e2ac:	e0bffd17 	ldw	r2,-12(fp)
    e2b0:	10800017 	ldw	r2,0(r2)
    e2b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e2b8:	e0bffc17 	ldw	r2,-16(fp)
    e2bc:	10c00a04 	addi	r3,r2,40
    e2c0:	e0bffd17 	ldw	r2,-12(fp)
    e2c4:	10800217 	ldw	r2,8(r2)
    e2c8:	100f883a 	mov	r7,r2
    e2cc:	e1bfff17 	ldw	r6,-4(fp)
    e2d0:	e17ffe17 	ldw	r5,-8(fp)
    e2d4:	1809883a 	mov	r4,r3
    e2d8:	000e8b80 	call	e8b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e2dc:	e037883a 	mov	sp,fp
    e2e0:	dfc00117 	ldw	ra,4(sp)
    e2e4:	df000017 	ldw	fp,0(sp)
    e2e8:	dec00204 	addi	sp,sp,8
    e2ec:	f800283a 	ret

0000e2f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e2f0:	defffa04 	addi	sp,sp,-24
    e2f4:	dfc00515 	stw	ra,20(sp)
    e2f8:	df000415 	stw	fp,16(sp)
    e2fc:	df000404 	addi	fp,sp,16
    e300:	e13ffd15 	stw	r4,-12(fp)
    e304:	e17ffe15 	stw	r5,-8(fp)
    e308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e30c:	e0bffd17 	ldw	r2,-12(fp)
    e310:	10800017 	ldw	r2,0(r2)
    e314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e318:	e0bffc17 	ldw	r2,-16(fp)
    e31c:	10c00a04 	addi	r3,r2,40
    e320:	e0bffd17 	ldw	r2,-12(fp)
    e324:	10800217 	ldw	r2,8(r2)
    e328:	100f883a 	mov	r7,r2
    e32c:	e1bfff17 	ldw	r6,-4(fp)
    e330:	e17ffe17 	ldw	r5,-8(fp)
    e334:	1809883a 	mov	r4,r3
    e338:	000ead40 	call	ead4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e33c:	e037883a 	mov	sp,fp
    e340:	dfc00117 	ldw	ra,4(sp)
    e344:	df000017 	ldw	fp,0(sp)
    e348:	dec00204 	addi	sp,sp,8
    e34c:	f800283a 	ret

0000e350 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e350:	defffc04 	addi	sp,sp,-16
    e354:	dfc00315 	stw	ra,12(sp)
    e358:	df000215 	stw	fp,8(sp)
    e35c:	df000204 	addi	fp,sp,8
    e360:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e364:	e0bfff17 	ldw	r2,-4(fp)
    e368:	10800017 	ldw	r2,0(r2)
    e36c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e370:	e0bffe17 	ldw	r2,-8(fp)
    e374:	10c00a04 	addi	r3,r2,40
    e378:	e0bfff17 	ldw	r2,-4(fp)
    e37c:	10800217 	ldw	r2,8(r2)
    e380:	100b883a 	mov	r5,r2
    e384:	1809883a 	mov	r4,r3
    e388:	000e7600 	call	e760 <altera_avalon_jtag_uart_close>
}
    e38c:	e037883a 	mov	sp,fp
    e390:	dfc00117 	ldw	ra,4(sp)
    e394:	df000017 	ldw	fp,0(sp)
    e398:	dec00204 	addi	sp,sp,8
    e39c:	f800283a 	ret

0000e3a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e3a0:	defffa04 	addi	sp,sp,-24
    e3a4:	dfc00515 	stw	ra,20(sp)
    e3a8:	df000415 	stw	fp,16(sp)
    e3ac:	df000404 	addi	fp,sp,16
    e3b0:	e13ffd15 	stw	r4,-12(fp)
    e3b4:	e17ffe15 	stw	r5,-8(fp)
    e3b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e3bc:	e0bffd17 	ldw	r2,-12(fp)
    e3c0:	10800017 	ldw	r2,0(r2)
    e3c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e3c8:	e0bffc17 	ldw	r2,-16(fp)
    e3cc:	10800a04 	addi	r2,r2,40
    e3d0:	e1bfff17 	ldw	r6,-4(fp)
    e3d4:	e17ffe17 	ldw	r5,-8(fp)
    e3d8:	1009883a 	mov	r4,r2
    e3dc:	000e7c80 	call	e7c8 <altera_avalon_jtag_uart_ioctl>
}
    e3e0:	e037883a 	mov	sp,fp
    e3e4:	dfc00117 	ldw	ra,4(sp)
    e3e8:	df000017 	ldw	fp,0(sp)
    e3ec:	dec00204 	addi	sp,sp,8
    e3f0:	f800283a 	ret

0000e3f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e3f4:	defffa04 	addi	sp,sp,-24
    e3f8:	dfc00515 	stw	ra,20(sp)
    e3fc:	df000415 	stw	fp,16(sp)
    e400:	df000404 	addi	fp,sp,16
    e404:	e13ffd15 	stw	r4,-12(fp)
    e408:	e17ffe15 	stw	r5,-8(fp)
    e40c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e410:	e0bffd17 	ldw	r2,-12(fp)
    e414:	00c00044 	movi	r3,1
    e418:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e41c:	e0bffd17 	ldw	r2,-12(fp)
    e420:	10800017 	ldw	r2,0(r2)
    e424:	10800104 	addi	r2,r2,4
    e428:	1007883a 	mov	r3,r2
    e42c:	e0bffd17 	ldw	r2,-12(fp)
    e430:	10800817 	ldw	r2,32(r2)
    e434:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e438:	e0bffe17 	ldw	r2,-8(fp)
    e43c:	e0ffff17 	ldw	r3,-4(fp)
    e440:	d8000015 	stw	zero,0(sp)
    e444:	e1fffd17 	ldw	r7,-12(fp)
    e448:	01800074 	movhi	r6,1
    e44c:	31b92d04 	addi	r6,r6,-6988
    e450:	180b883a 	mov	r5,r3
    e454:	1009883a 	mov	r4,r2
    e458:	000d5280 	call	d528 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e45c:	e0bffd17 	ldw	r2,-12(fp)
    e460:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e464:	e0bffd17 	ldw	r2,-12(fp)
    e468:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e46c:	d0e6d717 	ldw	r3,-25764(gp)
    e470:	e1fffd17 	ldw	r7,-12(fp)
    e474:	01800074 	movhi	r6,1
    e478:	31b9b004 	addi	r6,r6,-6464
    e47c:	180b883a 	mov	r5,r3
    e480:	1009883a 	mov	r4,r2
    e484:	000edec0 	call	edec <alt_alarm_start>
    e488:	1000040e 	bge	r2,zero,e49c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e48c:	e0fffd17 	ldw	r3,-12(fp)
    e490:	00a00034 	movhi	r2,32768
    e494:	10bfffc4 	addi	r2,r2,-1
    e498:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e49c:	0001883a 	nop
    e4a0:	e037883a 	mov	sp,fp
    e4a4:	dfc00117 	ldw	ra,4(sp)
    e4a8:	df000017 	ldw	fp,0(sp)
    e4ac:	dec00204 	addi	sp,sp,8
    e4b0:	f800283a 	ret

0000e4b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e4b4:	defff804 	addi	sp,sp,-32
    e4b8:	df000715 	stw	fp,28(sp)
    e4bc:	df000704 	addi	fp,sp,28
    e4c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e4c4:	e0bfff17 	ldw	r2,-4(fp)
    e4c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e4cc:	e0bffb17 	ldw	r2,-20(fp)
    e4d0:	10800017 	ldw	r2,0(r2)
    e4d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e4d8:	e0bffc17 	ldw	r2,-16(fp)
    e4dc:	10800104 	addi	r2,r2,4
    e4e0:	10800037 	ldwio	r2,0(r2)
    e4e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e4e8:	e0bffd17 	ldw	r2,-12(fp)
    e4ec:	1080c00c 	andi	r2,r2,768
    e4f0:	10006d26 	beq	r2,zero,e6a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e4f4:	e0bffd17 	ldw	r2,-12(fp)
    e4f8:	1080400c 	andi	r2,r2,256
    e4fc:	10003526 	beq	r2,zero,e5d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e500:	00800074 	movhi	r2,1
    e504:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e508:	e0bffb17 	ldw	r2,-20(fp)
    e50c:	10800a17 	ldw	r2,40(r2)
    e510:	10800044 	addi	r2,r2,1
    e514:	1081ffcc 	andi	r2,r2,2047
    e518:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e51c:	e0bffb17 	ldw	r2,-20(fp)
    e520:	10c00b17 	ldw	r3,44(r2)
    e524:	e0bffe17 	ldw	r2,-8(fp)
    e528:	18801526 	beq	r3,r2,e580 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e52c:	e0bffc17 	ldw	r2,-16(fp)
    e530:	10800037 	ldwio	r2,0(r2)
    e534:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e538:	e0bff917 	ldw	r2,-28(fp)
    e53c:	10a0000c 	andi	r2,r2,32768
    e540:	10001126 	beq	r2,zero,e588 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e544:	e0bffb17 	ldw	r2,-20(fp)
    e548:	10800a17 	ldw	r2,40(r2)
    e54c:	e0fff917 	ldw	r3,-28(fp)
    e550:	1809883a 	mov	r4,r3
    e554:	e0fffb17 	ldw	r3,-20(fp)
    e558:	1885883a 	add	r2,r3,r2
    e55c:	10800e04 	addi	r2,r2,56
    e560:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e564:	e0bffb17 	ldw	r2,-20(fp)
    e568:	10800a17 	ldw	r2,40(r2)
    e56c:	10800044 	addi	r2,r2,1
    e570:	10c1ffcc 	andi	r3,r2,2047
    e574:	e0bffb17 	ldw	r2,-20(fp)
    e578:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e57c:	003fe206 	br	e508 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e580:	0001883a 	nop
    e584:	00000106 	br	e58c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e588:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e58c:	e0bff917 	ldw	r2,-28(fp)
    e590:	10bfffec 	andhi	r2,r2,65535
    e594:	10000f26 	beq	r2,zero,e5d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	10c00817 	ldw	r3,32(r2)
    e5a0:	00bfff84 	movi	r2,-2
    e5a4:	1886703a 	and	r3,r3,r2
    e5a8:	e0bffb17 	ldw	r2,-20(fp)
    e5ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e5b0:	e0bffc17 	ldw	r2,-16(fp)
    e5b4:	10800104 	addi	r2,r2,4
    e5b8:	1007883a 	mov	r3,r2
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    e5c0:	10800817 	ldw	r2,32(r2)
    e5c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e5c8:	e0bffc17 	ldw	r2,-16(fp)
    e5cc:	10800104 	addi	r2,r2,4
    e5d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e5d4:	e0bffd17 	ldw	r2,-12(fp)
    e5d8:	1080800c 	andi	r2,r2,512
    e5dc:	103fbe26 	beq	r2,zero,e4d8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e5e0:	e0bffd17 	ldw	r2,-12(fp)
    e5e4:	1004d43a 	srli	r2,r2,16
    e5e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e5ec:	00001406 	br	e640 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e5f0:	e0bffc17 	ldw	r2,-16(fp)
    e5f4:	e0fffb17 	ldw	r3,-20(fp)
    e5f8:	18c00d17 	ldw	r3,52(r3)
    e5fc:	e13ffb17 	ldw	r4,-20(fp)
    e600:	20c7883a 	add	r3,r4,r3
    e604:	18c20e04 	addi	r3,r3,2104
    e608:	18c00003 	ldbu	r3,0(r3)
    e60c:	18c03fcc 	andi	r3,r3,255
    e610:	18c0201c 	xori	r3,r3,128
    e614:	18ffe004 	addi	r3,r3,-128
    e618:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e61c:	e0bffb17 	ldw	r2,-20(fp)
    e620:	10800d17 	ldw	r2,52(r2)
    e624:	10800044 	addi	r2,r2,1
    e628:	10c1ffcc 	andi	r3,r2,2047
    e62c:	e0bffb17 	ldw	r2,-20(fp)
    e630:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e634:	e0bffa17 	ldw	r2,-24(fp)
    e638:	10bfffc4 	addi	r2,r2,-1
    e63c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e640:	e0bffa17 	ldw	r2,-24(fp)
    e644:	10000526 	beq	r2,zero,e65c <altera_avalon_jtag_uart_irq+0x1a8>
    e648:	e0bffb17 	ldw	r2,-20(fp)
    e64c:	10c00d17 	ldw	r3,52(r2)
    e650:	e0bffb17 	ldw	r2,-20(fp)
    e654:	10800c17 	ldw	r2,48(r2)
    e658:	18bfe51e 	bne	r3,r2,e5f0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e65c:	e0bffa17 	ldw	r2,-24(fp)
    e660:	103f9d26 	beq	r2,zero,e4d8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e664:	e0bffb17 	ldw	r2,-20(fp)
    e668:	10c00817 	ldw	r3,32(r2)
    e66c:	00bfff44 	movi	r2,-3
    e670:	1886703a 	and	r3,r3,r2
    e674:	e0bffb17 	ldw	r2,-20(fp)
    e678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e67c:	e0bffb17 	ldw	r2,-20(fp)
    e680:	10800017 	ldw	r2,0(r2)
    e684:	10800104 	addi	r2,r2,4
    e688:	1007883a 	mov	r3,r2
    e68c:	e0bffb17 	ldw	r2,-20(fp)
    e690:	10800817 	ldw	r2,32(r2)
    e694:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e698:	e0bffc17 	ldw	r2,-16(fp)
    e69c:	10800104 	addi	r2,r2,4
    e6a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e6a4:	003f8c06 	br	e4d8 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e6a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e6ac:	0001883a 	nop
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	df000017 	ldw	fp,0(sp)
    e6b8:	dec00104 	addi	sp,sp,4
    e6bc:	f800283a 	ret

0000e6c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e6c0:	defff804 	addi	sp,sp,-32
    e6c4:	df000715 	stw	fp,28(sp)
    e6c8:	df000704 	addi	fp,sp,28
    e6cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e6d0:	e0bffb17 	ldw	r2,-20(fp)
    e6d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e6d8:	e0bff917 	ldw	r2,-28(fp)
    e6dc:	10800017 	ldw	r2,0(r2)
    e6e0:	10800104 	addi	r2,r2,4
    e6e4:	10800037 	ldwio	r2,0(r2)
    e6e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e6ec:	e0bffa17 	ldw	r2,-24(fp)
    e6f0:	1081000c 	andi	r2,r2,1024
    e6f4:	10000b26 	beq	r2,zero,e724 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e6f8:	e0bff917 	ldw	r2,-28(fp)
    e6fc:	10800017 	ldw	r2,0(r2)
    e700:	10800104 	addi	r2,r2,4
    e704:	1007883a 	mov	r3,r2
    e708:	e0bff917 	ldw	r2,-28(fp)
    e70c:	10800817 	ldw	r2,32(r2)
    e710:	10810014 	ori	r2,r2,1024
    e714:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e718:	e0bff917 	ldw	r2,-28(fp)
    e71c:	10000915 	stw	zero,36(r2)
    e720:	00000a06 	br	e74c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e724:	e0bff917 	ldw	r2,-28(fp)
    e728:	10c00917 	ldw	r3,36(r2)
    e72c:	00a00034 	movhi	r2,32768
    e730:	10bfff04 	addi	r2,r2,-4
    e734:	10c00536 	bltu	r2,r3,e74c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e738:	e0bff917 	ldw	r2,-28(fp)
    e73c:	10800917 	ldw	r2,36(r2)
    e740:	10c00044 	addi	r3,r2,1
    e744:	e0bff917 	ldw	r2,-28(fp)
    e748:	10c00915 	stw	r3,36(r2)
    e74c:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e750:	e037883a 	mov	sp,fp
    e754:	df000017 	ldw	fp,0(sp)
    e758:	dec00104 	addi	sp,sp,4
    e75c:	f800283a 	ret

0000e760 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e760:	defffd04 	addi	sp,sp,-12
    e764:	df000215 	stw	fp,8(sp)
    e768:	df000204 	addi	fp,sp,8
    e76c:	e13ffe15 	stw	r4,-8(fp)
    e770:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e774:	00000506 	br	e78c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e778:	e0bfff17 	ldw	r2,-4(fp)
    e77c:	1090000c 	andi	r2,r2,16384
    e780:	10000226 	beq	r2,zero,e78c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e784:	00bffd44 	movi	r2,-11
    e788:	00000b06 	br	e7b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e78c:	e0bffe17 	ldw	r2,-8(fp)
    e790:	10c00d17 	ldw	r3,52(r2)
    e794:	e0bffe17 	ldw	r2,-8(fp)
    e798:	10800c17 	ldw	r2,48(r2)
    e79c:	18800526 	beq	r3,r2,e7b4 <altera_avalon_jtag_uart_close+0x54>
    e7a0:	e0bffe17 	ldw	r2,-8(fp)
    e7a4:	10c00917 	ldw	r3,36(r2)
    e7a8:	e0bffe17 	ldw	r2,-8(fp)
    e7ac:	10800117 	ldw	r2,4(r2)
    e7b0:	18bff136 	bltu	r3,r2,e778 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e7b4:	0005883a 	mov	r2,zero
}
    e7b8:	e037883a 	mov	sp,fp
    e7bc:	df000017 	ldw	fp,0(sp)
    e7c0:	dec00104 	addi	sp,sp,4
    e7c4:	f800283a 	ret

0000e7c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e7c8:	defffa04 	addi	sp,sp,-24
    e7cc:	df000515 	stw	fp,20(sp)
    e7d0:	df000504 	addi	fp,sp,20
    e7d4:	e13ffd15 	stw	r4,-12(fp)
    e7d8:	e17ffe15 	stw	r5,-8(fp)
    e7dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e7e0:	00bff9c4 	movi	r2,-25
    e7e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e7e8:	e0bffe17 	ldw	r2,-8(fp)
    e7ec:	10da8060 	cmpeqi	r3,r2,27137
    e7f0:	1800031e 	bne	r3,zero,e800 <altera_avalon_jtag_uart_ioctl+0x38>
    e7f4:	109a80a0 	cmpeqi	r2,r2,27138
    e7f8:	1000181e 	bne	r2,zero,e85c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e7fc:	00002906 	br	e8a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e800:	e0bffd17 	ldw	r2,-12(fp)
    e804:	10c00117 	ldw	r3,4(r2)
    e808:	00a00034 	movhi	r2,32768
    e80c:	10bfffc4 	addi	r2,r2,-1
    e810:	18802126 	beq	r3,r2,e898 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e814:	e0bfff17 	ldw	r2,-4(fp)
    e818:	10800017 	ldw	r2,0(r2)
    e81c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e820:	e0bffc17 	ldw	r2,-16(fp)
    e824:	10800090 	cmplti	r2,r2,2
    e828:	1000061e 	bne	r2,zero,e844 <altera_avalon_jtag_uart_ioctl+0x7c>
    e82c:	e0fffc17 	ldw	r3,-16(fp)
    e830:	00a00034 	movhi	r2,32768
    e834:	10bfffc4 	addi	r2,r2,-1
    e838:	18800226 	beq	r3,r2,e844 <altera_avalon_jtag_uart_ioctl+0x7c>
    e83c:	e0bffc17 	ldw	r2,-16(fp)
    e840:	00000206 	br	e84c <altera_avalon_jtag_uart_ioctl+0x84>
    e844:	00a00034 	movhi	r2,32768
    e848:	10bfff84 	addi	r2,r2,-2
    e84c:	e0fffd17 	ldw	r3,-12(fp)
    e850:	18800115 	stw	r2,4(r3)
      rc = 0;
    e854:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e858:	00000f06 	br	e898 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e85c:	e0bffd17 	ldw	r2,-12(fp)
    e860:	10c00117 	ldw	r3,4(r2)
    e864:	00a00034 	movhi	r2,32768
    e868:	10bfffc4 	addi	r2,r2,-1
    e86c:	18800c26 	beq	r3,r2,e8a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e870:	e0bffd17 	ldw	r2,-12(fp)
    e874:	10c00917 	ldw	r3,36(r2)
    e878:	e0bffd17 	ldw	r2,-12(fp)
    e87c:	10800117 	ldw	r2,4(r2)
    e880:	1885803a 	cmpltu	r2,r3,r2
    e884:	10c03fcc 	andi	r3,r2,255
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e890:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e894:	00000206 	br	e8a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e898:	0001883a 	nop
    e89c:	00000106 	br	e8a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e8a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e8a4:	e0bffb17 	ldw	r2,-20(fp)
}
    e8a8:	e037883a 	mov	sp,fp
    e8ac:	df000017 	ldw	fp,0(sp)
    e8b0:	dec00104 	addi	sp,sp,4
    e8b4:	f800283a 	ret

0000e8b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e8b8:	defff304 	addi	sp,sp,-52
    e8bc:	dfc00c15 	stw	ra,48(sp)
    e8c0:	df000b15 	stw	fp,44(sp)
    e8c4:	df000b04 	addi	fp,sp,44
    e8c8:	e13ffc15 	stw	r4,-16(fp)
    e8cc:	e17ffd15 	stw	r5,-12(fp)
    e8d0:	e1bffe15 	stw	r6,-8(fp)
    e8d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e8d8:	e0bffd17 	ldw	r2,-12(fp)
    e8dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e8e0:	00004706 	br	ea00 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e8e4:	e0bffc17 	ldw	r2,-16(fp)
    e8e8:	10800a17 	ldw	r2,40(r2)
    e8ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e8f0:	e0bffc17 	ldw	r2,-16(fp)
    e8f4:	10800b17 	ldw	r2,44(r2)
    e8f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e8fc:	e0fff717 	ldw	r3,-36(fp)
    e900:	e0bff817 	ldw	r2,-32(fp)
    e904:	18800536 	bltu	r3,r2,e91c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e908:	e0fff717 	ldw	r3,-36(fp)
    e90c:	e0bff817 	ldw	r2,-32(fp)
    e910:	1885c83a 	sub	r2,r3,r2
    e914:	e0bff615 	stw	r2,-40(fp)
    e918:	00000406 	br	e92c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e91c:	00c20004 	movi	r3,2048
    e920:	e0bff817 	ldw	r2,-32(fp)
    e924:	1885c83a 	sub	r2,r3,r2
    e928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e92c:	e0bff617 	ldw	r2,-40(fp)
    e930:	10001e26 	beq	r2,zero,e9ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e934:	e0fffe17 	ldw	r3,-8(fp)
    e938:	e0bff617 	ldw	r2,-40(fp)
    e93c:	1880022e 	bgeu	r3,r2,e948 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e940:	e0bffe17 	ldw	r2,-8(fp)
    e944:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e948:	e0bffc17 	ldw	r2,-16(fp)
    e94c:	10c00e04 	addi	r3,r2,56
    e950:	e0bff817 	ldw	r2,-32(fp)
    e954:	1885883a 	add	r2,r3,r2
    e958:	e1bff617 	ldw	r6,-40(fp)
    e95c:	100b883a 	mov	r5,r2
    e960:	e13ff517 	ldw	r4,-44(fp)
    e964:	0005fa80 	call	5fa8 <memcpy>
      ptr   += n;
    e968:	e0fff517 	ldw	r3,-44(fp)
    e96c:	e0bff617 	ldw	r2,-40(fp)
    e970:	1885883a 	add	r2,r3,r2
    e974:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e978:	e0fffe17 	ldw	r3,-8(fp)
    e97c:	e0bff617 	ldw	r2,-40(fp)
    e980:	1885c83a 	sub	r2,r3,r2
    e984:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e988:	e0fff817 	ldw	r3,-32(fp)
    e98c:	e0bff617 	ldw	r2,-40(fp)
    e990:	1885883a 	add	r2,r3,r2
    e994:	10c1ffcc 	andi	r3,r2,2047
    e998:	e0bffc17 	ldw	r2,-16(fp)
    e99c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e9a0:	e0bffe17 	ldw	r2,-8(fp)
    e9a4:	00bfcf16 	blt	zero,r2,e8e4 <altera_avalon_jtag_uart_read+0x2c>
    e9a8:	00000106 	br	e9b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e9ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e9b0:	e0fff517 	ldw	r3,-44(fp)
    e9b4:	e0bffd17 	ldw	r2,-12(fp)
    e9b8:	1880141e 	bne	r3,r2,ea0c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e9bc:	e0bfff17 	ldw	r2,-4(fp)
    e9c0:	1090000c 	andi	r2,r2,16384
    e9c4:	1000131e 	bne	r2,zero,ea14 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e9c8:	0001883a 	nop
    e9cc:	e0bffc17 	ldw	r2,-16(fp)
    e9d0:	10c00a17 	ldw	r3,40(r2)
    e9d4:	e0bff717 	ldw	r2,-36(fp)
    e9d8:	1880051e 	bne	r3,r2,e9f0 <altera_avalon_jtag_uart_read+0x138>
    e9dc:	e0bffc17 	ldw	r2,-16(fp)
    e9e0:	10c00917 	ldw	r3,36(r2)
    e9e4:	e0bffc17 	ldw	r2,-16(fp)
    e9e8:	10800117 	ldw	r2,4(r2)
    e9ec:	18bff736 	bltu	r3,r2,e9cc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e9f0:	e0bffc17 	ldw	r2,-16(fp)
    e9f4:	10c00a17 	ldw	r3,40(r2)
    e9f8:	e0bff717 	ldw	r2,-36(fp)
    e9fc:	18800726 	beq	r3,r2,ea1c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ea00:	e0bffe17 	ldw	r2,-8(fp)
    ea04:	00bfb716 	blt	zero,r2,e8e4 <altera_avalon_jtag_uart_read+0x2c>
    ea08:	00000506 	br	ea20 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ea0c:	0001883a 	nop
    ea10:	00000306 	br	ea20 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ea14:	0001883a 	nop
    ea18:	00000106 	br	ea20 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ea1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ea20:	e0fff517 	ldw	r3,-44(fp)
    ea24:	e0bffd17 	ldw	r2,-12(fp)
    ea28:	18801826 	beq	r3,r2,ea8c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea2c:	0005303a 	rdctl	r2,status
    ea30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea34:	e0fffb17 	ldw	r3,-20(fp)
    ea38:	00bfff84 	movi	r2,-2
    ea3c:	1884703a 	and	r2,r3,r2
    ea40:	1001703a 	wrctl	status,r2
  
  return context;
    ea44:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ea48:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea4c:	e0bffc17 	ldw	r2,-16(fp)
    ea50:	10800817 	ldw	r2,32(r2)
    ea54:	10c00054 	ori	r3,r2,1
    ea58:	e0bffc17 	ldw	r2,-16(fp)
    ea5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ea60:	e0bffc17 	ldw	r2,-16(fp)
    ea64:	10800017 	ldw	r2,0(r2)
    ea68:	10800104 	addi	r2,r2,4
    ea6c:	1007883a 	mov	r3,r2
    ea70:	e0bffc17 	ldw	r2,-16(fp)
    ea74:	10800817 	ldw	r2,32(r2)
    ea78:	18800035 	stwio	r2,0(r3)
    ea7c:	e0bffa17 	ldw	r2,-24(fp)
    ea80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea84:	e0bff917 	ldw	r2,-28(fp)
    ea88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ea8c:	e0fff517 	ldw	r3,-44(fp)
    ea90:	e0bffd17 	ldw	r2,-12(fp)
    ea94:	18800426 	beq	r3,r2,eaa8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ea98:	e0fff517 	ldw	r3,-44(fp)
    ea9c:	e0bffd17 	ldw	r2,-12(fp)
    eaa0:	1885c83a 	sub	r2,r3,r2
    eaa4:	00000606 	br	eac0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    eaa8:	e0bfff17 	ldw	r2,-4(fp)
    eaac:	1090000c 	andi	r2,r2,16384
    eab0:	10000226 	beq	r2,zero,eabc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    eab4:	00bffd44 	movi	r2,-11
    eab8:	00000106 	br	eac0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    eabc:	00bffec4 	movi	r2,-5
}
    eac0:	e037883a 	mov	sp,fp
    eac4:	dfc00117 	ldw	ra,4(sp)
    eac8:	df000017 	ldw	fp,0(sp)
    eacc:	dec00204 	addi	sp,sp,8
    ead0:	f800283a 	ret

0000ead4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ead4:	defff304 	addi	sp,sp,-52
    ead8:	dfc00c15 	stw	ra,48(sp)
    eadc:	df000b15 	stw	fp,44(sp)
    eae0:	df000b04 	addi	fp,sp,44
    eae4:	e13ffc15 	stw	r4,-16(fp)
    eae8:	e17ffd15 	stw	r5,-12(fp)
    eaec:	e1bffe15 	stw	r6,-8(fp)
    eaf0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    eaf4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    eaf8:	e0bffd17 	ldw	r2,-12(fp)
    eafc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eb00:	00003706 	br	ebe0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    eb04:	e0bffc17 	ldw	r2,-16(fp)
    eb08:	10800c17 	ldw	r2,48(r2)
    eb0c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    eb10:	e0bffc17 	ldw	r2,-16(fp)
    eb14:	10800d17 	ldw	r2,52(r2)
    eb18:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    eb1c:	e0fff917 	ldw	r3,-28(fp)
    eb20:	e0bff517 	ldw	r2,-44(fp)
    eb24:	1880062e 	bgeu	r3,r2,eb40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    eb28:	e0fff517 	ldw	r3,-44(fp)
    eb2c:	e0bff917 	ldw	r2,-28(fp)
    eb30:	1885c83a 	sub	r2,r3,r2
    eb34:	10bfffc4 	addi	r2,r2,-1
    eb38:	e0bff615 	stw	r2,-40(fp)
    eb3c:	00000b06 	br	eb6c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    eb40:	e0bff517 	ldw	r2,-44(fp)
    eb44:	10000526 	beq	r2,zero,eb5c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    eb48:	00c20004 	movi	r3,2048
    eb4c:	e0bff917 	ldw	r2,-28(fp)
    eb50:	1885c83a 	sub	r2,r3,r2
    eb54:	e0bff615 	stw	r2,-40(fp)
    eb58:	00000406 	br	eb6c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    eb5c:	00c1ffc4 	movi	r3,2047
    eb60:	e0bff917 	ldw	r2,-28(fp)
    eb64:	1885c83a 	sub	r2,r3,r2
    eb68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    eb6c:	e0bff617 	ldw	r2,-40(fp)
    eb70:	10001e26 	beq	r2,zero,ebec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    eb74:	e0fffe17 	ldw	r3,-8(fp)
    eb78:	e0bff617 	ldw	r2,-40(fp)
    eb7c:	1880022e 	bgeu	r3,r2,eb88 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    eb88:	e0bffc17 	ldw	r2,-16(fp)
    eb8c:	10c20e04 	addi	r3,r2,2104
    eb90:	e0bff917 	ldw	r2,-28(fp)
    eb94:	1885883a 	add	r2,r3,r2
    eb98:	e1bff617 	ldw	r6,-40(fp)
    eb9c:	e17ffd17 	ldw	r5,-12(fp)
    eba0:	1009883a 	mov	r4,r2
    eba4:	0005fa80 	call	5fa8 <memcpy>
      ptr   += n;
    eba8:	e0fffd17 	ldw	r3,-12(fp)
    ebac:	e0bff617 	ldw	r2,-40(fp)
    ebb0:	1885883a 	add	r2,r3,r2
    ebb4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ebb8:	e0fffe17 	ldw	r3,-8(fp)
    ebbc:	e0bff617 	ldw	r2,-40(fp)
    ebc0:	1885c83a 	sub	r2,r3,r2
    ebc4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ebc8:	e0fff917 	ldw	r3,-28(fp)
    ebcc:	e0bff617 	ldw	r2,-40(fp)
    ebd0:	1885883a 	add	r2,r3,r2
    ebd4:	10c1ffcc 	andi	r3,r2,2047
    ebd8:	e0bffc17 	ldw	r2,-16(fp)
    ebdc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ebe0:	e0bffe17 	ldw	r2,-8(fp)
    ebe4:	00bfc716 	blt	zero,r2,eb04 <altera_avalon_jtag_uart_write+0x30>
    ebe8:	00000106 	br	ebf0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ebec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebf0:	0005303a 	rdctl	r2,status
    ebf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebf8:	e0fffb17 	ldw	r3,-20(fp)
    ebfc:	00bfff84 	movi	r2,-2
    ec00:	1884703a 	and	r2,r3,r2
    ec04:	1001703a 	wrctl	status,r2
  
  return context;
    ec08:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ec0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ec10:	e0bffc17 	ldw	r2,-16(fp)
    ec14:	10800817 	ldw	r2,32(r2)
    ec18:	10c00094 	ori	r3,r2,2
    ec1c:	e0bffc17 	ldw	r2,-16(fp)
    ec20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ec24:	e0bffc17 	ldw	r2,-16(fp)
    ec28:	10800017 	ldw	r2,0(r2)
    ec2c:	10800104 	addi	r2,r2,4
    ec30:	1007883a 	mov	r3,r2
    ec34:	e0bffc17 	ldw	r2,-16(fp)
    ec38:	10800817 	ldw	r2,32(r2)
    ec3c:	18800035 	stwio	r2,0(r3)
    ec40:	e0bffa17 	ldw	r2,-24(fp)
    ec44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec48:	e0bff817 	ldw	r2,-32(fp)
    ec4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ec50:	e0bffe17 	ldw	r2,-8(fp)
    ec54:	0080100e 	bge	zero,r2,ec98 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ec58:	e0bfff17 	ldw	r2,-4(fp)
    ec5c:	1090000c 	andi	r2,r2,16384
    ec60:	1000101e 	bne	r2,zero,eca4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ec64:	0001883a 	nop
    ec68:	e0bffc17 	ldw	r2,-16(fp)
    ec6c:	10c00d17 	ldw	r3,52(r2)
    ec70:	e0bff517 	ldw	r2,-44(fp)
    ec74:	1880051e 	bne	r3,r2,ec8c <altera_avalon_jtag_uart_write+0x1b8>
    ec78:	e0bffc17 	ldw	r2,-16(fp)
    ec7c:	10c00917 	ldw	r3,36(r2)
    ec80:	e0bffc17 	ldw	r2,-16(fp)
    ec84:	10800117 	ldw	r2,4(r2)
    ec88:	18bff736 	bltu	r3,r2,ec68 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ec8c:	e0bffc17 	ldw	r2,-16(fp)
    ec90:	10800917 	ldw	r2,36(r2)
    ec94:	1000051e 	bne	r2,zero,ecac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ec98:	e0bffe17 	ldw	r2,-8(fp)
    ec9c:	00bfd016 	blt	zero,r2,ebe0 <altera_avalon_jtag_uart_write+0x10c>
    eca0:	00000306 	br	ecb0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    eca4:	0001883a 	nop
    eca8:	00000106 	br	ecb0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ecac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ecb0:	e0fffd17 	ldw	r3,-12(fp)
    ecb4:	e0bff717 	ldw	r2,-36(fp)
    ecb8:	18800426 	beq	r3,r2,eccc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ecbc:	e0fffd17 	ldw	r3,-12(fp)
    ecc0:	e0bff717 	ldw	r2,-36(fp)
    ecc4:	1885c83a 	sub	r2,r3,r2
    ecc8:	00000606 	br	ece4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    eccc:	e0bfff17 	ldw	r2,-4(fp)
    ecd0:	1090000c 	andi	r2,r2,16384
    ecd4:	10000226 	beq	r2,zero,ece0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ecd8:	00bffd44 	movi	r2,-11
    ecdc:	00000106 	br	ece4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ece0:	00bffec4 	movi	r2,-5
}
    ece4:	e037883a 	mov	sp,fp
    ece8:	dfc00117 	ldw	ra,4(sp)
    ecec:	df000017 	ldw	fp,0(sp)
    ecf0:	dec00204 	addi	sp,sp,8
    ecf4:	f800283a 	ret

0000ecf8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ecf8:	defffa04 	addi	sp,sp,-24
    ecfc:	dfc00515 	stw	ra,20(sp)
    ed00:	df000415 	stw	fp,16(sp)
    ed04:	df000404 	addi	fp,sp,16
    ed08:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ed0c:	0007883a 	mov	r3,zero
    ed10:	e0bfff17 	ldw	r2,-4(fp)
    ed14:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ed18:	e0bfff17 	ldw	r2,-4(fp)
    ed1c:	10800104 	addi	r2,r2,4
    ed20:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed24:	0005303a 	rdctl	r2,status
    ed28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed2c:	e0fffd17 	ldw	r3,-12(fp)
    ed30:	00bfff84 	movi	r2,-2
    ed34:	1884703a 	and	r2,r3,r2
    ed38:	1001703a 	wrctl	status,r2
  
  return context;
    ed3c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ed40:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    ed44:	000f76c0 	call	f76c <alt_tick>
    ed48:	e0bffc17 	ldw	r2,-16(fp)
    ed4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed50:	e0bffe17 	ldw	r2,-8(fp)
    ed54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ed58:	0001883a 	nop
    ed5c:	e037883a 	mov	sp,fp
    ed60:	dfc00117 	ldw	ra,4(sp)
    ed64:	df000017 	ldw	fp,0(sp)
    ed68:	dec00204 	addi	sp,sp,8
    ed6c:	f800283a 	ret

0000ed70 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ed70:	defff804 	addi	sp,sp,-32
    ed74:	dfc00715 	stw	ra,28(sp)
    ed78:	df000615 	stw	fp,24(sp)
    ed7c:	df000604 	addi	fp,sp,24
    ed80:	e13ffc15 	stw	r4,-16(fp)
    ed84:	e17ffd15 	stw	r5,-12(fp)
    ed88:	e1bffe15 	stw	r6,-8(fp)
    ed8c:	e1ffff15 	stw	r7,-4(fp)
    ed90:	e0bfff17 	ldw	r2,-4(fp)
    ed94:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ed98:	d0a6d717 	ldw	r2,-25764(gp)
    ed9c:	1000021e 	bne	r2,zero,eda8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    eda0:	e0bffb17 	ldw	r2,-20(fp)
    eda4:	d0a6d715 	stw	r2,-25764(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    eda8:	e0bffc17 	ldw	r2,-16(fp)
    edac:	10800104 	addi	r2,r2,4
    edb0:	00c001c4 	movi	r3,7
    edb4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    edb8:	d8000015 	stw	zero,0(sp)
    edbc:	e1fffc17 	ldw	r7,-16(fp)
    edc0:	01800074 	movhi	r6,1
    edc4:	31bb3e04 	addi	r6,r6,-4872
    edc8:	e17ffe17 	ldw	r5,-8(fp)
    edcc:	e13ffd17 	ldw	r4,-12(fp)
    edd0:	000d5280 	call	d528 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    edd4:	0001883a 	nop
    edd8:	e037883a 	mov	sp,fp
    eddc:	dfc00117 	ldw	ra,4(sp)
    ede0:	df000017 	ldw	fp,0(sp)
    ede4:	dec00204 	addi	sp,sp,8
    ede8:	f800283a 	ret

0000edec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    edec:	defff504 	addi	sp,sp,-44
    edf0:	df000a15 	stw	fp,40(sp)
    edf4:	df000a04 	addi	fp,sp,40
    edf8:	e13ffc15 	stw	r4,-16(fp)
    edfc:	e17ffd15 	stw	r5,-12(fp)
    ee00:	e1bffe15 	stw	r6,-8(fp)
    ee04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ee08:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ee0c:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
    ee10:	10003c26 	beq	r2,zero,ef04 <alt_alarm_start+0x118>
  {
    if (alarm)
    ee14:	e0bffc17 	ldw	r2,-16(fp)
    ee18:	10003826 	beq	r2,zero,eefc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    ee1c:	e0bffc17 	ldw	r2,-16(fp)
    ee20:	e0fffe17 	ldw	r3,-8(fp)
    ee24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ee28:	e0bffc17 	ldw	r2,-16(fp)
    ee2c:	e0ffff17 	ldw	r3,-4(fp)
    ee30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee34:	0005303a 	rdctl	r2,status
    ee38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee3c:	e0fff917 	ldw	r3,-28(fp)
    ee40:	00bfff84 	movi	r2,-2
    ee44:	1884703a 	and	r2,r3,r2
    ee48:	1001703a 	wrctl	status,r2
  
  return context;
    ee4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ee50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ee54:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
    ee58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ee5c:	e0fffd17 	ldw	r3,-12(fp)
    ee60:	e0bff617 	ldw	r2,-40(fp)
    ee64:	1885883a 	add	r2,r3,r2
    ee68:	10c00044 	addi	r3,r2,1
    ee6c:	e0bffc17 	ldw	r2,-16(fp)
    ee70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ee74:	e0bffc17 	ldw	r2,-16(fp)
    ee78:	10c00217 	ldw	r3,8(r2)
    ee7c:	e0bff617 	ldw	r2,-40(fp)
    ee80:	1880042e 	bgeu	r3,r2,ee94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ee84:	e0bffc17 	ldw	r2,-16(fp)
    ee88:	00c00044 	movi	r3,1
    ee8c:	10c00405 	stb	r3,16(r2)
    ee90:	00000206 	br	ee9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ee94:	e0bffc17 	ldw	r2,-16(fp)
    ee98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ee9c:	e0bffc17 	ldw	r2,-16(fp)
    eea0:	d0e00e04 	addi	r3,gp,-32712
    eea4:	e0fffa15 	stw	r3,-24(fp)
    eea8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    eeac:	e0bffb17 	ldw	r2,-20(fp)
    eeb0:	e0fffa17 	ldw	r3,-24(fp)
    eeb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    eeb8:	e0bffa17 	ldw	r2,-24(fp)
    eebc:	10c00017 	ldw	r3,0(r2)
    eec0:	e0bffb17 	ldw	r2,-20(fp)
    eec4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eec8:	e0bffa17 	ldw	r2,-24(fp)
    eecc:	10800017 	ldw	r2,0(r2)
    eed0:	e0fffb17 	ldw	r3,-20(fp)
    eed4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eed8:	e0bffa17 	ldw	r2,-24(fp)
    eedc:	e0fffb17 	ldw	r3,-20(fp)
    eee0:	10c00015 	stw	r3,0(r2)
    eee4:	e0bff817 	ldw	r2,-32(fp)
    eee8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eeec:	e0bff717 	ldw	r2,-36(fp)
    eef0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    eef4:	0005883a 	mov	r2,zero
    eef8:	00000306 	br	ef08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    eefc:	00bffa84 	movi	r2,-22
    ef00:	00000106 	br	ef08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    ef04:	00bfde84 	movi	r2,-134
  }
}
    ef08:	e037883a 	mov	sp,fp
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00104 	addi	sp,sp,4
    ef14:	f800283a 	ret

0000ef18 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    ef18:	defffa04 	addi	sp,sp,-24
    ef1c:	dfc00515 	stw	ra,20(sp)
    ef20:	df000415 	stw	fp,16(sp)
    ef24:	df000404 	addi	fp,sp,16
    ef28:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    ef2c:	00800244 	movi	r2,9
    ef30:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    ef34:	014003f4 	movhi	r5,15
    ef38:	29509004 	addi	r5,r5,16960
    ef3c:	e13ffd17 	ldw	r4,-12(fp)
    ef40:	000aa280 	call	aa28 <__mulsi3>
    ef44:	100b883a 	mov	r5,r2
    ef48:	0100bef4 	movhi	r4,763
    ef4c:	213c2004 	addi	r4,r4,-3968
    ef50:	000a96c0 	call	a96c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    ef54:	100b883a 	mov	r5,r2
    ef58:	01200034 	movhi	r4,32768
    ef5c:	213fffc4 	addi	r4,r4,-1
    ef60:	000a96c0 	call	a96c <__udivsi3>
    ef64:	100b883a 	mov	r5,r2
    ef68:	e13fff17 	ldw	r4,-4(fp)
    ef6c:	000a96c0 	call	a96c <__udivsi3>
    ef70:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ef74:	e0bffe17 	ldw	r2,-8(fp)
    ef78:	10002a26 	beq	r2,zero,f024 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ef7c:	e03ffc15 	stw	zero,-16(fp)
    ef80:	00001706 	br	efe0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ef84:	00a00034 	movhi	r2,32768
    ef88:	10bfffc4 	addi	r2,r2,-1
    ef8c:	10bfffc4 	addi	r2,r2,-1
    ef90:	103ffe1e 	bne	r2,zero,ef8c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ef94:	014003f4 	movhi	r5,15
    ef98:	29509004 	addi	r5,r5,16960
    ef9c:	e13ffd17 	ldw	r4,-12(fp)
    efa0:	000aa280 	call	aa28 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    efa4:	100b883a 	mov	r5,r2
    efa8:	0100bef4 	movhi	r4,763
    efac:	213c2004 	addi	r4,r4,-3968
    efb0:	000a96c0 	call	a96c <__udivsi3>
    efb4:	100b883a 	mov	r5,r2
    efb8:	01200034 	movhi	r4,32768
    efbc:	213fffc4 	addi	r4,r4,-1
    efc0:	000a96c0 	call	a96c <__udivsi3>
    efc4:	1007883a 	mov	r3,r2
    efc8:	e0bfff17 	ldw	r2,-4(fp)
    efcc:	10c5c83a 	sub	r2,r2,r3
    efd0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    efd4:	e0bffc17 	ldw	r2,-16(fp)
    efd8:	10800044 	addi	r2,r2,1
    efdc:	e0bffc15 	stw	r2,-16(fp)
    efe0:	e0fffc17 	ldw	r3,-16(fp)
    efe4:	e0bffe17 	ldw	r2,-8(fp)
    efe8:	18bfe616 	blt	r3,r2,ef84 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    efec:	014003f4 	movhi	r5,15
    eff0:	29509004 	addi	r5,r5,16960
    eff4:	e13ffd17 	ldw	r4,-12(fp)
    eff8:	000aa280 	call	aa28 <__mulsi3>
    effc:	100b883a 	mov	r5,r2
    f000:	0100bef4 	movhi	r4,763
    f004:	213c2004 	addi	r4,r4,-3968
    f008:	000a96c0 	call	a96c <__udivsi3>
    f00c:	e17fff17 	ldw	r5,-4(fp)
    f010:	1009883a 	mov	r4,r2
    f014:	000aa280 	call	aa28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f018:	10bfffc4 	addi	r2,r2,-1
    f01c:	103ffe1e 	bne	r2,zero,f018 <alt_busy_sleep+0x100>
    f020:	00000d06 	br	f058 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f024:	014003f4 	movhi	r5,15
    f028:	29509004 	addi	r5,r5,16960
    f02c:	e13ffd17 	ldw	r4,-12(fp)
    f030:	000aa280 	call	aa28 <__mulsi3>
    f034:	100b883a 	mov	r5,r2
    f038:	0100bef4 	movhi	r4,763
    f03c:	213c2004 	addi	r4,r4,-3968
    f040:	000a96c0 	call	a96c <__udivsi3>
    f044:	e17fff17 	ldw	r5,-4(fp)
    f048:	1009883a 	mov	r4,r2
    f04c:	000aa280 	call	aa28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f050:	10bfffc4 	addi	r2,r2,-1
    f054:	00bffe16 	blt	zero,r2,f050 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f058:	0005883a 	mov	r2,zero
}
    f05c:	e037883a 	mov	sp,fp
    f060:	dfc00117 	ldw	ra,4(sp)
    f064:	df000017 	ldw	fp,0(sp)
    f068:	dec00204 	addi	sp,sp,8
    f06c:	f800283a 	ret

0000f070 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f070:	deffff04 	addi	sp,sp,-4
    f074:	df000015 	stw	fp,0(sp)
    f078:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f07c:	0001883a 	nop
    f080:	e037883a 	mov	sp,fp
    f084:	df000017 	ldw	fp,0(sp)
    f088:	dec00104 	addi	sp,sp,4
    f08c:	f800283a 	ret

0000f090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f090:	defffe04 	addi	sp,sp,-8
    f094:	dfc00115 	stw	ra,4(sp)
    f098:	df000015 	stw	fp,0(sp)
    f09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0a0:	d0a00b17 	ldw	r2,-32724(gp)
    f0a4:	10000326 	beq	r2,zero,f0b4 <alt_get_errno+0x24>
    f0a8:	d0a00b17 	ldw	r2,-32724(gp)
    f0ac:	103ee83a 	callr	r2
    f0b0:	00000106 	br	f0b8 <alt_get_errno+0x28>
    f0b4:	d0a6d104 	addi	r2,gp,-25788
}
    f0b8:	e037883a 	mov	sp,fp
    f0bc:	dfc00117 	ldw	ra,4(sp)
    f0c0:	df000017 	ldw	fp,0(sp)
    f0c4:	dec00204 	addi	sp,sp,8
    f0c8:	f800283a 	ret

0000f0cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f0cc:	defffa04 	addi	sp,sp,-24
    f0d0:	dfc00515 	stw	ra,20(sp)
    f0d4:	df000415 	stw	fp,16(sp)
    f0d8:	df000404 	addi	fp,sp,16
    f0dc:	e13ffe15 	stw	r4,-8(fp)
    f0e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f0e4:	e0bffe17 	ldw	r2,-8(fp)
    f0e8:	10000326 	beq	r2,zero,f0f8 <alt_dev_llist_insert+0x2c>
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	10800217 	ldw	r2,8(r2)
    f0f4:	1000061e 	bne	r2,zero,f110 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f0f8:	000f0900 	call	f090 <alt_get_errno>
    f0fc:	1007883a 	mov	r3,r2
    f100:	00800584 	movi	r2,22
    f104:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f108:	00bffa84 	movi	r2,-22
    f10c:	00001306 	br	f15c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f110:	e0bffe17 	ldw	r2,-8(fp)
    f114:	e0ffff17 	ldw	r3,-4(fp)
    f118:	e0fffc15 	stw	r3,-16(fp)
    f11c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f120:	e0bffd17 	ldw	r2,-12(fp)
    f124:	e0fffc17 	ldw	r3,-16(fp)
    f128:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f12c:	e0bffc17 	ldw	r2,-16(fp)
    f130:	10c00017 	ldw	r3,0(r2)
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f13c:	e0bffc17 	ldw	r2,-16(fp)
    f140:	10800017 	ldw	r2,0(r2)
    f144:	e0fffd17 	ldw	r3,-12(fp)
    f148:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f14c:	e0bffc17 	ldw	r2,-16(fp)
    f150:	e0fffd17 	ldw	r3,-12(fp)
    f154:	10c00015 	stw	r3,0(r2)

  return 0;  
    f158:	0005883a 	mov	r2,zero
}
    f15c:	e037883a 	mov	sp,fp
    f160:	dfc00117 	ldw	ra,4(sp)
    f164:	df000017 	ldw	fp,0(sp)
    f168:	dec00204 	addi	sp,sp,8
    f16c:	f800283a 	ret

0000f170 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f170:	defffd04 	addi	sp,sp,-12
    f174:	dfc00215 	stw	ra,8(sp)
    f178:	df000115 	stw	fp,4(sp)
    f17c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f180:	00800074 	movhi	r2,1
    f184:	10bffb04 	addi	r2,r2,-20
    f188:	e0bfff15 	stw	r2,-4(fp)
    f18c:	00000606 	br	f1a8 <_do_ctors+0x38>
        (*ctor) (); 
    f190:	e0bfff17 	ldw	r2,-4(fp)
    f194:	10800017 	ldw	r2,0(r2)
    f198:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f19c:	e0bfff17 	ldw	r2,-4(fp)
    f1a0:	10bfff04 	addi	r2,r2,-4
    f1a4:	e0bfff15 	stw	r2,-4(fp)
    f1a8:	e0ffff17 	ldw	r3,-4(fp)
    f1ac:	00800074 	movhi	r2,1
    f1b0:	10bffc04 	addi	r2,r2,-16
    f1b4:	18bff62e 	bgeu	r3,r2,f190 <_do_ctors+0x20>
        (*ctor) (); 
}
    f1b8:	0001883a 	nop
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	dfc00117 	ldw	ra,4(sp)
    f1c4:	df000017 	ldw	fp,0(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f1d0:	defffd04 	addi	sp,sp,-12
    f1d4:	dfc00215 	stw	ra,8(sp)
    f1d8:	df000115 	stw	fp,4(sp)
    f1dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f1e0:	00800074 	movhi	r2,1
    f1e4:	10bffb04 	addi	r2,r2,-20
    f1e8:	e0bfff15 	stw	r2,-4(fp)
    f1ec:	00000606 	br	f208 <_do_dtors+0x38>
        (*dtor) (); 
    f1f0:	e0bfff17 	ldw	r2,-4(fp)
    f1f4:	10800017 	ldw	r2,0(r2)
    f1f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f1fc:	e0bfff17 	ldw	r2,-4(fp)
    f200:	10bfff04 	addi	r2,r2,-4
    f204:	e0bfff15 	stw	r2,-4(fp)
    f208:	e0ffff17 	ldw	r3,-4(fp)
    f20c:	00800074 	movhi	r2,1
    f210:	10bffc04 	addi	r2,r2,-16
    f214:	18bff62e 	bgeu	r3,r2,f1f0 <_do_dtors+0x20>
        (*dtor) (); 
}
    f218:	0001883a 	nop
    f21c:	e037883a 	mov	sp,fp
    f220:	dfc00117 	ldw	ra,4(sp)
    f224:	df000017 	ldw	fp,0(sp)
    f228:	dec00204 	addi	sp,sp,8
    f22c:	f800283a 	ret

0000f230 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f230:	deffff04 	addi	sp,sp,-4
    f234:	df000015 	stw	fp,0(sp)
    f238:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f23c:	0001883a 	nop
    f240:	e037883a 	mov	sp,fp
    f244:	df000017 	ldw	fp,0(sp)
    f248:	dec00104 	addi	sp,sp,4
    f24c:	f800283a 	ret

0000f250 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f250:	defffe04 	addi	sp,sp,-8
    f254:	df000115 	stw	fp,4(sp)
    f258:	df000104 	addi	fp,sp,4
    f25c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f260:	e0bfff17 	ldw	r2,-4(fp)
    f264:	10bffe84 	addi	r2,r2,-6
    f268:	10c00428 	cmpgeui	r3,r2,16
    f26c:	18001a1e 	bne	r3,zero,f2d8 <alt_exception_cause_generated_bad_addr+0x88>
    f270:	100690ba 	slli	r3,r2,2
    f274:	00800074 	movhi	r2,1
    f278:	10bca204 	addi	r2,r2,-3448
    f27c:	1885883a 	add	r2,r3,r2
    f280:	10800017 	ldw	r2,0(r2)
    f284:	1000683a 	jmp	r2
    f288:	0000f2c8 	cmpgei	zero,zero,971
    f28c:	0000f2c8 	cmpgei	zero,zero,971
    f290:	0000f2d8 	cmpnei	zero,zero,971
    f294:	0000f2d8 	cmpnei	zero,zero,971
    f298:	0000f2d8 	cmpnei	zero,zero,971
    f29c:	0000f2c8 	cmpgei	zero,zero,971
    f2a0:	0000f2d0 	cmplti	zero,zero,971
    f2a4:	0000f2d8 	cmpnei	zero,zero,971
    f2a8:	0000f2c8 	cmpgei	zero,zero,971
    f2ac:	0000f2c8 	cmpgei	zero,zero,971
    f2b0:	0000f2d8 	cmpnei	zero,zero,971
    f2b4:	0000f2c8 	cmpgei	zero,zero,971
    f2b8:	0000f2d0 	cmplti	zero,zero,971
    f2bc:	0000f2d8 	cmpnei	zero,zero,971
    f2c0:	0000f2d8 	cmpnei	zero,zero,971
    f2c4:	0000f2c8 	cmpgei	zero,zero,971
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f2c8:	00800044 	movi	r2,1
    f2cc:	00000306 	br	f2dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f2d0:	0005883a 	mov	r2,zero
    f2d4:	00000106 	br	f2dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f2d8:	0005883a 	mov	r2,zero
  }
}
    f2dc:	e037883a 	mov	sp,fp
    f2e0:	df000017 	ldw	fp,0(sp)
    f2e4:	dec00104 	addi	sp,sp,4
    f2e8:	f800283a 	ret

0000f2ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f2ec:	defff804 	addi	sp,sp,-32
    f2f0:	dfc00715 	stw	ra,28(sp)
    f2f4:	df000615 	stw	fp,24(sp)
    f2f8:	dc000515 	stw	r16,20(sp)
    f2fc:	df000604 	addi	fp,sp,24
    f300:	e13ffb15 	stw	r4,-20(fp)
    f304:	e17ffc15 	stw	r5,-16(fp)
    f308:	e1bffd15 	stw	r6,-12(fp)
    f30c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f310:	e1bffe17 	ldw	r6,-8(fp)
    f314:	e17ffd17 	ldw	r5,-12(fp)
    f318:	e13ffc17 	ldw	r4,-16(fp)
    f31c:	000f5740 	call	f574 <open>
    f320:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f324:	e0bffa17 	ldw	r2,-24(fp)
    f328:	10002216 	blt	r2,zero,f3b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f32c:	04000074 	movhi	r16,1
    f330:	84030404 	addi	r16,r16,3088
    f334:	e0bffa17 	ldw	r2,-24(fp)
    f338:	01400304 	movi	r5,12
    f33c:	1009883a 	mov	r4,r2
    f340:	000aa280 	call	aa28 <__mulsi3>
    f344:	8085883a 	add	r2,r16,r2
    f348:	10c00017 	ldw	r3,0(r2)
    f34c:	e0bffb17 	ldw	r2,-20(fp)
    f350:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f354:	04000074 	movhi	r16,1
    f358:	84030404 	addi	r16,r16,3088
    f35c:	e0bffa17 	ldw	r2,-24(fp)
    f360:	01400304 	movi	r5,12
    f364:	1009883a 	mov	r4,r2
    f368:	000aa280 	call	aa28 <__mulsi3>
    f36c:	8085883a 	add	r2,r16,r2
    f370:	10800104 	addi	r2,r2,4
    f374:	10c00017 	ldw	r3,0(r2)
    f378:	e0bffb17 	ldw	r2,-20(fp)
    f37c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f380:	04000074 	movhi	r16,1
    f384:	84030404 	addi	r16,r16,3088
    f388:	e0bffa17 	ldw	r2,-24(fp)
    f38c:	01400304 	movi	r5,12
    f390:	1009883a 	mov	r4,r2
    f394:	000aa280 	call	aa28 <__mulsi3>
    f398:	8085883a 	add	r2,r16,r2
    f39c:	10800204 	addi	r2,r2,8
    f3a0:	10c00017 	ldw	r3,0(r2)
    f3a4:	e0bffb17 	ldw	r2,-20(fp)
    f3a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f3ac:	e13ffa17 	ldw	r4,-24(fp)
    f3b0:	000df200 	call	df20 <alt_release_fd>
  }
} 
    f3b4:	0001883a 	nop
    f3b8:	e6ffff04 	addi	sp,fp,-4
    f3bc:	dfc00217 	ldw	ra,8(sp)
    f3c0:	df000117 	ldw	fp,4(sp)
    f3c4:	dc000017 	ldw	r16,0(sp)
    f3c8:	dec00304 	addi	sp,sp,12
    f3cc:	f800283a 	ret

0000f3d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f3d0:	defffb04 	addi	sp,sp,-20
    f3d4:	dfc00415 	stw	ra,16(sp)
    f3d8:	df000315 	stw	fp,12(sp)
    f3dc:	df000304 	addi	fp,sp,12
    f3e0:	e13ffd15 	stw	r4,-12(fp)
    f3e4:	e17ffe15 	stw	r5,-8(fp)
    f3e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f3ec:	01c07fc4 	movi	r7,511
    f3f0:	01800044 	movi	r6,1
    f3f4:	e17ffd17 	ldw	r5,-12(fp)
    f3f8:	01000074 	movhi	r4,1
    f3fc:	21030704 	addi	r4,r4,3100
    f400:	000f2ec0 	call	f2ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f404:	01c07fc4 	movi	r7,511
    f408:	000d883a 	mov	r6,zero
    f40c:	e17ffe17 	ldw	r5,-8(fp)
    f410:	01000074 	movhi	r4,1
    f414:	21030404 	addi	r4,r4,3088
    f418:	000f2ec0 	call	f2ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f41c:	01c07fc4 	movi	r7,511
    f420:	01800044 	movi	r6,1
    f424:	e17fff17 	ldw	r5,-4(fp)
    f428:	01000074 	movhi	r4,1
    f42c:	21030a04 	addi	r4,r4,3112
    f430:	000f2ec0 	call	f2ec <alt_open_fd>
}  
    f434:	0001883a 	nop
    f438:	e037883a 	mov	sp,fp
    f43c:	dfc00117 	ldw	ra,4(sp)
    f440:	df000017 	ldw	fp,0(sp)
    f444:	dec00204 	addi	sp,sp,8
    f448:	f800283a 	ret

0000f44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f44c:	defffe04 	addi	sp,sp,-8
    f450:	dfc00115 	stw	ra,4(sp)
    f454:	df000015 	stw	fp,0(sp)
    f458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f45c:	d0a00b17 	ldw	r2,-32724(gp)
    f460:	10000326 	beq	r2,zero,f470 <alt_get_errno+0x24>
    f464:	d0a00b17 	ldw	r2,-32724(gp)
    f468:	103ee83a 	callr	r2
    f46c:	00000106 	br	f474 <alt_get_errno+0x28>
    f470:	d0a6d104 	addi	r2,gp,-25788
}
    f474:	e037883a 	mov	sp,fp
    f478:	dfc00117 	ldw	ra,4(sp)
    f47c:	df000017 	ldw	fp,0(sp)
    f480:	dec00204 	addi	sp,sp,8
    f484:	f800283a 	ret

0000f488 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f488:	defffb04 	addi	sp,sp,-20
    f48c:	dfc00415 	stw	ra,16(sp)
    f490:	df000315 	stw	fp,12(sp)
    f494:	dc000215 	stw	r16,8(sp)
    f498:	df000304 	addi	fp,sp,12
    f49c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f4a0:	e0bffe17 	ldw	r2,-8(fp)
    f4a4:	10800217 	ldw	r2,8(r2)
    f4a8:	10d00034 	orhi	r3,r2,16384
    f4ac:	e0bffe17 	ldw	r2,-8(fp)
    f4b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f4b4:	e03ffd15 	stw	zero,-12(fp)
    f4b8:	00002306 	br	f548 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f4bc:	04000074 	movhi	r16,1
    f4c0:	84030404 	addi	r16,r16,3088
    f4c4:	e0bffd17 	ldw	r2,-12(fp)
    f4c8:	01400304 	movi	r5,12
    f4cc:	1009883a 	mov	r4,r2
    f4d0:	000aa280 	call	aa28 <__mulsi3>
    f4d4:	8085883a 	add	r2,r16,r2
    f4d8:	10c00017 	ldw	r3,0(r2)
    f4dc:	e0bffe17 	ldw	r2,-8(fp)
    f4e0:	10800017 	ldw	r2,0(r2)
    f4e4:	1880151e 	bne	r3,r2,f53c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f4e8:	04000074 	movhi	r16,1
    f4ec:	84030404 	addi	r16,r16,3088
    f4f0:	e0bffd17 	ldw	r2,-12(fp)
    f4f4:	01400304 	movi	r5,12
    f4f8:	1009883a 	mov	r4,r2
    f4fc:	000aa280 	call	aa28 <__mulsi3>
    f500:	8085883a 	add	r2,r16,r2
    f504:	10800204 	addi	r2,r2,8
    f508:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f50c:	10000b0e 	bge	r2,zero,f53c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f510:	01400304 	movi	r5,12
    f514:	e13ffd17 	ldw	r4,-12(fp)
    f518:	000aa280 	call	aa28 <__mulsi3>
    f51c:	1007883a 	mov	r3,r2
    f520:	00800074 	movhi	r2,1
    f524:	10830404 	addi	r2,r2,3088
    f528:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f52c:	e0bffe17 	ldw	r2,-8(fp)
    f530:	18800226 	beq	r3,r2,f53c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f534:	00bffcc4 	movi	r2,-13
    f538:	00000806 	br	f55c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f53c:	e0bffd17 	ldw	r2,-12(fp)
    f540:	10800044 	addi	r2,r2,1
    f544:	e0bffd15 	stw	r2,-12(fp)
    f548:	d0a00a17 	ldw	r2,-32728(gp)
    f54c:	1007883a 	mov	r3,r2
    f550:	e0bffd17 	ldw	r2,-12(fp)
    f554:	18bfd92e 	bgeu	r3,r2,f4bc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f558:	0005883a 	mov	r2,zero
}
    f55c:	e6ffff04 	addi	sp,fp,-4
    f560:	dfc00217 	ldw	ra,8(sp)
    f564:	df000117 	ldw	fp,4(sp)
    f568:	dc000017 	ldw	r16,0(sp)
    f56c:	dec00304 	addi	sp,sp,12
    f570:	f800283a 	ret

0000f574 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f574:	defff604 	addi	sp,sp,-40
    f578:	dfc00915 	stw	ra,36(sp)
    f57c:	df000815 	stw	fp,32(sp)
    f580:	df000804 	addi	fp,sp,32
    f584:	e13ffd15 	stw	r4,-12(fp)
    f588:	e17ffe15 	stw	r5,-8(fp)
    f58c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f590:	00bfffc4 	movi	r2,-1
    f594:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f598:	00bffb44 	movi	r2,-19
    f59c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f5a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f5a4:	d1600804 	addi	r5,gp,-32736
    f5a8:	e13ffd17 	ldw	r4,-12(fp)
    f5ac:	000f8980 	call	f898 <alt_find_dev>
    f5b0:	e0bff815 	stw	r2,-32(fp)
    f5b4:	e0bff817 	ldw	r2,-32(fp)
    f5b8:	1000051e 	bne	r2,zero,f5d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f5bc:	e13ffd17 	ldw	r4,-12(fp)
    f5c0:	000f9280 	call	f928 <alt_find_file>
    f5c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f5c8:	00800044 	movi	r2,1
    f5cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f5d0:	e0bff817 	ldw	r2,-32(fp)
    f5d4:	10002b26 	beq	r2,zero,f684 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f5d8:	e13ff817 	ldw	r4,-32(fp)
    f5dc:	000fa300 	call	fa30 <alt_get_fd>
    f5e0:	e0bff915 	stw	r2,-28(fp)
    f5e4:	e0bff917 	ldw	r2,-28(fp)
    f5e8:	1000030e 	bge	r2,zero,f5f8 <open+0x84>
    {
      status = index;
    f5ec:	e0bff917 	ldw	r2,-28(fp)
    f5f0:	e0bffa15 	stw	r2,-24(fp)
    f5f4:	00002506 	br	f68c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f5f8:	01400304 	movi	r5,12
    f5fc:	e13ff917 	ldw	r4,-28(fp)
    f600:	000aa280 	call	aa28 <__mulsi3>
    f604:	1007883a 	mov	r3,r2
    f608:	00800074 	movhi	r2,1
    f60c:	10830404 	addi	r2,r2,3088
    f610:	1885883a 	add	r2,r3,r2
    f614:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f618:	e0fffe17 	ldw	r3,-8(fp)
    f61c:	00900034 	movhi	r2,16384
    f620:	10bfffc4 	addi	r2,r2,-1
    f624:	1886703a 	and	r3,r3,r2
    f628:	e0bffc17 	ldw	r2,-16(fp)
    f62c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f630:	e0bffb17 	ldw	r2,-20(fp)
    f634:	1000051e 	bne	r2,zero,f64c <open+0xd8>
    f638:	e13ffc17 	ldw	r4,-16(fp)
    f63c:	000f4880 	call	f488 <alt_file_locked>
    f640:	e0bffa15 	stw	r2,-24(fp)
    f644:	e0bffa17 	ldw	r2,-24(fp)
    f648:	10001016 	blt	r2,zero,f68c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f64c:	e0bff817 	ldw	r2,-32(fp)
    f650:	10800317 	ldw	r2,12(r2)
    f654:	10000826 	beq	r2,zero,f678 <open+0x104>
    f658:	e0bff817 	ldw	r2,-32(fp)
    f65c:	10800317 	ldw	r2,12(r2)
    f660:	e1ffff17 	ldw	r7,-4(fp)
    f664:	e1bffe17 	ldw	r6,-8(fp)
    f668:	e17ffd17 	ldw	r5,-12(fp)
    f66c:	e13ffc17 	ldw	r4,-16(fp)
    f670:	103ee83a 	callr	r2
    f674:	00000106 	br	f67c <open+0x108>
    f678:	0005883a 	mov	r2,zero
    f67c:	e0bffa15 	stw	r2,-24(fp)
    f680:	00000206 	br	f68c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f684:	00bffb44 	movi	r2,-19
    f688:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f68c:	e0bffa17 	ldw	r2,-24(fp)
    f690:	1000090e 	bge	r2,zero,f6b8 <open+0x144>
  {
    alt_release_fd (index);  
    f694:	e13ff917 	ldw	r4,-28(fp)
    f698:	000df200 	call	df20 <alt_release_fd>
    ALT_ERRNO = -status;
    f69c:	000f44c0 	call	f44c <alt_get_errno>
    f6a0:	1007883a 	mov	r3,r2
    f6a4:	e0bffa17 	ldw	r2,-24(fp)
    f6a8:	0085c83a 	sub	r2,zero,r2
    f6ac:	18800015 	stw	r2,0(r3)
    return -1;
    f6b0:	00bfffc4 	movi	r2,-1
    f6b4:	00000106 	br	f6bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f6b8:	e0bff917 	ldw	r2,-28(fp)
}
    f6bc:	e037883a 	mov	sp,fp
    f6c0:	dfc00117 	ldw	ra,4(sp)
    f6c4:	df000017 	ldw	fp,0(sp)
    f6c8:	dec00204 	addi	sp,sp,8
    f6cc:	f800283a 	ret

0000f6d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f6d0:	defffa04 	addi	sp,sp,-24
    f6d4:	df000515 	stw	fp,20(sp)
    f6d8:	df000504 	addi	fp,sp,20
    f6dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6e0:	0005303a 	rdctl	r2,status
    f6e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6e8:	e0fffc17 	ldw	r3,-16(fp)
    f6ec:	00bfff84 	movi	r2,-2
    f6f0:	1884703a 	and	r2,r3,r2
    f6f4:	1001703a 	wrctl	status,r2
  
  return context;
    f6f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f6fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f700:	e0bfff17 	ldw	r2,-4(fp)
    f704:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f708:	e0bffd17 	ldw	r2,-12(fp)
    f70c:	10800017 	ldw	r2,0(r2)
    f710:	e0fffd17 	ldw	r3,-12(fp)
    f714:	18c00117 	ldw	r3,4(r3)
    f718:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f71c:	e0bffd17 	ldw	r2,-12(fp)
    f720:	10800117 	ldw	r2,4(r2)
    f724:	e0fffd17 	ldw	r3,-12(fp)
    f728:	18c00017 	ldw	r3,0(r3)
    f72c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f730:	e0bffd17 	ldw	r2,-12(fp)
    f734:	e0fffd17 	ldw	r3,-12(fp)
    f738:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f73c:	e0bffd17 	ldw	r2,-12(fp)
    f740:	e0fffd17 	ldw	r3,-12(fp)
    f744:	10c00015 	stw	r3,0(r2)
    f748:	e0bffb17 	ldw	r2,-20(fp)
    f74c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f750:	e0bffe17 	ldw	r2,-8(fp)
    f754:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f758:	0001883a 	nop
    f75c:	e037883a 	mov	sp,fp
    f760:	df000017 	ldw	fp,0(sp)
    f764:	dec00104 	addi	sp,sp,4
    f768:	f800283a 	ret

0000f76c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f76c:	defffb04 	addi	sp,sp,-20
    f770:	dfc00415 	stw	ra,16(sp)
    f774:	df000315 	stw	fp,12(sp)
    f778:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f77c:	d0a00e17 	ldw	r2,-32712(gp)
    f780:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f784:	d0a6d817 	ldw	r2,-25760(gp)
    f788:	10800044 	addi	r2,r2,1
    f78c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f790:	00002e06 	br	f84c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f794:	e0bffd17 	ldw	r2,-12(fp)
    f798:	10800017 	ldw	r2,0(r2)
    f79c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f7a0:	e0bffd17 	ldw	r2,-12(fp)
    f7a4:	10800403 	ldbu	r2,16(r2)
    f7a8:	10803fcc 	andi	r2,r2,255
    f7ac:	10000426 	beq	r2,zero,f7c0 <alt_tick+0x54>
    f7b0:	d0a6d817 	ldw	r2,-25760(gp)
    f7b4:	1000021e 	bne	r2,zero,f7c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f7b8:	e0bffd17 	ldw	r2,-12(fp)
    f7bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f7c0:	e0bffd17 	ldw	r2,-12(fp)
    f7c4:	10800217 	ldw	r2,8(r2)
    f7c8:	d0e6d817 	ldw	r3,-25760(gp)
    f7cc:	18801d36 	bltu	r3,r2,f844 <alt_tick+0xd8>
    f7d0:	e0bffd17 	ldw	r2,-12(fp)
    f7d4:	10800403 	ldbu	r2,16(r2)
    f7d8:	10803fcc 	andi	r2,r2,255
    f7dc:	1000191e 	bne	r2,zero,f844 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f7e0:	e0bffd17 	ldw	r2,-12(fp)
    f7e4:	10800317 	ldw	r2,12(r2)
    f7e8:	e0fffd17 	ldw	r3,-12(fp)
    f7ec:	18c00517 	ldw	r3,20(r3)
    f7f0:	1809883a 	mov	r4,r3
    f7f4:	103ee83a 	callr	r2
    f7f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	1000031e 	bne	r2,zero,f810 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f804:	e13ffd17 	ldw	r4,-12(fp)
    f808:	000f6d00 	call	f6d0 <alt_alarm_stop>
    f80c:	00000d06 	br	f844 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	10c00217 	ldw	r3,8(r2)
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	1887883a 	add	r3,r3,r2
    f820:	e0bffd17 	ldw	r2,-12(fp)
    f824:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f828:	e0bffd17 	ldw	r2,-12(fp)
    f82c:	10c00217 	ldw	r3,8(r2)
    f830:	d0a6d817 	ldw	r2,-25760(gp)
    f834:	1880032e 	bgeu	r3,r2,f844 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f838:	e0bffd17 	ldw	r2,-12(fp)
    f83c:	00c00044 	movi	r3,1
    f840:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f844:	e0bffe17 	ldw	r2,-8(fp)
    f848:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f84c:	e0fffd17 	ldw	r3,-12(fp)
    f850:	d0a00e04 	addi	r2,gp,-32712
    f854:	18bfcf1e 	bne	r3,r2,f794 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f858:	0001883a 	nop
}
    f85c:	0001883a 	nop
    f860:	e037883a 	mov	sp,fp
    f864:	dfc00117 	ldw	ra,4(sp)
    f868:	df000017 	ldw	fp,0(sp)
    f86c:	dec00204 	addi	sp,sp,8
    f870:	f800283a 	ret

0000f874 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f874:	deffff04 	addi	sp,sp,-4
    f878:	df000015 	stw	fp,0(sp)
    f87c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f880:	000170fa 	wrctl	ienable,zero
}
    f884:	0001883a 	nop
    f888:	e037883a 	mov	sp,fp
    f88c:	df000017 	ldw	fp,0(sp)
    f890:	dec00104 	addi	sp,sp,4
    f894:	f800283a 	ret

0000f898 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f898:	defffa04 	addi	sp,sp,-24
    f89c:	dfc00515 	stw	ra,20(sp)
    f8a0:	df000415 	stw	fp,16(sp)
    f8a4:	df000404 	addi	fp,sp,16
    f8a8:	e13ffe15 	stw	r4,-8(fp)
    f8ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f8b0:	e0bfff17 	ldw	r2,-4(fp)
    f8b4:	10800017 	ldw	r2,0(r2)
    f8b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f8bc:	e13ffe17 	ldw	r4,-8(fp)
    f8c0:	00004f40 	call	4f4 <strlen>
    f8c4:	10800044 	addi	r2,r2,1
    f8c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f8cc:	00000d06 	br	f904 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f8d0:	e0bffc17 	ldw	r2,-16(fp)
    f8d4:	10800217 	ldw	r2,8(r2)
    f8d8:	e0fffd17 	ldw	r3,-12(fp)
    f8dc:	180d883a 	mov	r6,r3
    f8e0:	e17ffe17 	ldw	r5,-8(fp)
    f8e4:	1009883a 	mov	r4,r2
    f8e8:	000fb400 	call	fb40 <memcmp>
    f8ec:	1000021e 	bne	r2,zero,f8f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	00000706 	br	f914 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f8f8:	e0bffc17 	ldw	r2,-16(fp)
    f8fc:	10800017 	ldw	r2,0(r2)
    f900:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f904:	e0fffc17 	ldw	r3,-16(fp)
    f908:	e0bfff17 	ldw	r2,-4(fp)
    f90c:	18bff01e 	bne	r3,r2,f8d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f910:	0005883a 	mov	r2,zero
}
    f914:	e037883a 	mov	sp,fp
    f918:	dfc00117 	ldw	ra,4(sp)
    f91c:	df000017 	ldw	fp,0(sp)
    f920:	dec00204 	addi	sp,sp,8
    f924:	f800283a 	ret

0000f928 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f928:	defffb04 	addi	sp,sp,-20
    f92c:	dfc00415 	stw	ra,16(sp)
    f930:	df000315 	stw	fp,12(sp)
    f934:	df000304 	addi	fp,sp,12
    f938:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f93c:	d0a00617 	ldw	r2,-32744(gp)
    f940:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f944:	00003106 	br	fa0c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10800217 	ldw	r2,8(r2)
    f950:	1009883a 	mov	r4,r2
    f954:	00004f40 	call	4f4 <strlen>
    f958:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f95c:	e0bffd17 	ldw	r2,-12(fp)
    f960:	10c00217 	ldw	r3,8(r2)
    f964:	e0bffe17 	ldw	r2,-8(fp)
    f968:	10bfffc4 	addi	r2,r2,-1
    f96c:	1885883a 	add	r2,r3,r2
    f970:	10800003 	ldbu	r2,0(r2)
    f974:	10803fcc 	andi	r2,r2,255
    f978:	1080201c 	xori	r2,r2,128
    f97c:	10bfe004 	addi	r2,r2,-128
    f980:	10800bd8 	cmpnei	r2,r2,47
    f984:	1000031e 	bne	r2,zero,f994 <alt_find_file+0x6c>
    {
      len -= 1;
    f988:	e0bffe17 	ldw	r2,-8(fp)
    f98c:	10bfffc4 	addi	r2,r2,-1
    f990:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f994:	e0bffe17 	ldw	r2,-8(fp)
    f998:	e0ffff17 	ldw	r3,-4(fp)
    f99c:	1885883a 	add	r2,r3,r2
    f9a0:	10800003 	ldbu	r2,0(r2)
    f9a4:	10803fcc 	andi	r2,r2,255
    f9a8:	1080201c 	xori	r2,r2,128
    f9ac:	10bfe004 	addi	r2,r2,-128
    f9b0:	10800be0 	cmpeqi	r2,r2,47
    f9b4:	1000081e 	bne	r2,zero,f9d8 <alt_find_file+0xb0>
    f9b8:	e0bffe17 	ldw	r2,-8(fp)
    f9bc:	e0ffff17 	ldw	r3,-4(fp)
    f9c0:	1885883a 	add	r2,r3,r2
    f9c4:	10800003 	ldbu	r2,0(r2)
    f9c8:	10803fcc 	andi	r2,r2,255
    f9cc:	1080201c 	xori	r2,r2,128
    f9d0:	10bfe004 	addi	r2,r2,-128
    f9d4:	10000a1e 	bne	r2,zero,fa00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	10800217 	ldw	r2,8(r2)
    f9e0:	e0fffe17 	ldw	r3,-8(fp)
    f9e4:	180d883a 	mov	r6,r3
    f9e8:	e17fff17 	ldw	r5,-4(fp)
    f9ec:	1009883a 	mov	r4,r2
    f9f0:	000fb400 	call	fb40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9f4:	1000021e 	bne	r2,zero,fa00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f9f8:	e0bffd17 	ldw	r2,-12(fp)
    f9fc:	00000706 	br	fa1c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    fa00:	e0bffd17 	ldw	r2,-12(fp)
    fa04:	10800017 	ldw	r2,0(r2)
    fa08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fa0c:	e0fffd17 	ldw	r3,-12(fp)
    fa10:	d0a00604 	addi	r2,gp,-32744
    fa14:	18bfcc1e 	bne	r3,r2,f948 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fa18:	0005883a 	mov	r2,zero
}
    fa1c:	e037883a 	mov	sp,fp
    fa20:	dfc00117 	ldw	ra,4(sp)
    fa24:	df000017 	ldw	fp,0(sp)
    fa28:	dec00204 	addi	sp,sp,8
    fa2c:	f800283a 	ret

0000fa30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fa30:	defffa04 	addi	sp,sp,-24
    fa34:	dfc00515 	stw	ra,20(sp)
    fa38:	df000415 	stw	fp,16(sp)
    fa3c:	dc000315 	stw	r16,12(sp)
    fa40:	df000404 	addi	fp,sp,16
    fa44:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    fa48:	00bffa04 	movi	r2,-24
    fa4c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fa50:	e03ffc15 	stw	zero,-16(fp)
    fa54:	00001d06 	br	facc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    fa58:	04000074 	movhi	r16,1
    fa5c:	84030404 	addi	r16,r16,3088
    fa60:	e0bffc17 	ldw	r2,-16(fp)
    fa64:	01400304 	movi	r5,12
    fa68:	1009883a 	mov	r4,r2
    fa6c:	000aa280 	call	aa28 <__mulsi3>
    fa70:	8085883a 	add	r2,r16,r2
    fa74:	10800017 	ldw	r2,0(r2)
    fa78:	1000111e 	bne	r2,zero,fac0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    fa7c:	04000074 	movhi	r16,1
    fa80:	84030404 	addi	r16,r16,3088
    fa84:	e0bffc17 	ldw	r2,-16(fp)
    fa88:	01400304 	movi	r5,12
    fa8c:	1009883a 	mov	r4,r2
    fa90:	000aa280 	call	aa28 <__mulsi3>
    fa94:	8085883a 	add	r2,r16,r2
    fa98:	e0fffe17 	ldw	r3,-8(fp)
    fa9c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    faa0:	d0e00a17 	ldw	r3,-32728(gp)
    faa4:	e0bffc17 	ldw	r2,-16(fp)
    faa8:	1880020e 	bge	r3,r2,fab4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    faac:	e0bffc17 	ldw	r2,-16(fp)
    fab0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    fabc:	00000606 	br	fad8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fac0:	e0bffc17 	ldw	r2,-16(fp)
    fac4:	10800044 	addi	r2,r2,1
    fac8:	e0bffc15 	stw	r2,-16(fp)
    facc:	e0bffc17 	ldw	r2,-16(fp)
    fad0:	10800810 	cmplti	r2,r2,32
    fad4:	103fe01e 	bne	r2,zero,fa58 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    fad8:	e0bffd17 	ldw	r2,-12(fp)
}
    fadc:	e6ffff04 	addi	sp,fp,-4
    fae0:	dfc00217 	ldw	ra,8(sp)
    fae4:	df000117 	ldw	fp,4(sp)
    fae8:	dc000017 	ldw	r16,0(sp)
    faec:	dec00304 	addi	sp,sp,12
    faf0:	f800283a 	ret

0000faf4 <atexit>:
    faf4:	200b883a 	mov	r5,r4
    faf8:	000f883a 	mov	r7,zero
    fafc:	000d883a 	mov	r6,zero
    fb00:	0009883a 	mov	r4,zero
    fb04:	000fd241 	jmpi	fd24 <__register_exitproc>

0000fb08 <exit>:
    fb08:	defffe04 	addi	sp,sp,-8
    fb0c:	000b883a 	mov	r5,zero
    fb10:	dc000015 	stw	r16,0(sp)
    fb14:	dfc00115 	stw	ra,4(sp)
    fb18:	2021883a 	mov	r16,r4
    fb1c:	000fe3c0 	call	fe3c <__call_exitprocs>
    fb20:	00800074 	movhi	r2,1
    fb24:	10877c04 	addi	r2,r2,7664
    fb28:	11000017 	ldw	r4,0(r2)
    fb2c:	20800f17 	ldw	r2,60(r4)
    fb30:	10000126 	beq	r2,zero,fb38 <exit+0x30>
    fb34:	103ee83a 	callr	r2
    fb38:	8009883a 	mov	r4,r16
    fb3c:	000ffbc0 	call	ffbc <_exit>

0000fb40 <memcmp>:
    fb40:	01c000c4 	movi	r7,3
    fb44:	3980192e 	bgeu	r7,r6,fbac <memcmp+0x6c>
    fb48:	2144b03a 	or	r2,r4,r5
    fb4c:	11c4703a 	and	r2,r2,r7
    fb50:	10000f26 	beq	r2,zero,fb90 <memcmp+0x50>
    fb54:	20800003 	ldbu	r2,0(r4)
    fb58:	28c00003 	ldbu	r3,0(r5)
    fb5c:	10c0151e 	bne	r2,r3,fbb4 <memcmp+0x74>
    fb60:	31bfff84 	addi	r6,r6,-2
    fb64:	01ffffc4 	movi	r7,-1
    fb68:	00000406 	br	fb7c <memcmp+0x3c>
    fb6c:	20800003 	ldbu	r2,0(r4)
    fb70:	28c00003 	ldbu	r3,0(r5)
    fb74:	31bfffc4 	addi	r6,r6,-1
    fb78:	10c00e1e 	bne	r2,r3,fbb4 <memcmp+0x74>
    fb7c:	21000044 	addi	r4,r4,1
    fb80:	29400044 	addi	r5,r5,1
    fb84:	31fff91e 	bne	r6,r7,fb6c <memcmp+0x2c>
    fb88:	0005883a 	mov	r2,zero
    fb8c:	f800283a 	ret
    fb90:	20c00017 	ldw	r3,0(r4)
    fb94:	28800017 	ldw	r2,0(r5)
    fb98:	18bfee1e 	bne	r3,r2,fb54 <memcmp+0x14>
    fb9c:	31bfff04 	addi	r6,r6,-4
    fba0:	21000104 	addi	r4,r4,4
    fba4:	29400104 	addi	r5,r5,4
    fba8:	39bff936 	bltu	r7,r6,fb90 <memcmp+0x50>
    fbac:	303fe91e 	bne	r6,zero,fb54 <memcmp+0x14>
    fbb0:	003ff506 	br	fb88 <memcmp+0x48>
    fbb4:	10c5c83a 	sub	r2,r2,r3
    fbb8:	f800283a 	ret

0000fbbc <_putc_r>:
    fbbc:	defffc04 	addi	sp,sp,-16
    fbc0:	dc000215 	stw	r16,8(sp)
    fbc4:	dfc00315 	stw	ra,12(sp)
    fbc8:	2021883a 	mov	r16,r4
    fbcc:	20000226 	beq	r4,zero,fbd8 <_putc_r+0x1c>
    fbd0:	20800e17 	ldw	r2,56(r4)
    fbd4:	10001b26 	beq	r2,zero,fc44 <_putc_r+0x88>
    fbd8:	30800217 	ldw	r2,8(r6)
    fbdc:	10bfffc4 	addi	r2,r2,-1
    fbe0:	30800215 	stw	r2,8(r6)
    fbe4:	10000a16 	blt	r2,zero,fc10 <_putc_r+0x54>
    fbe8:	30800017 	ldw	r2,0(r6)
    fbec:	11400005 	stb	r5,0(r2)
    fbf0:	30800017 	ldw	r2,0(r6)
    fbf4:	10c00044 	addi	r3,r2,1
    fbf8:	30c00015 	stw	r3,0(r6)
    fbfc:	10800003 	ldbu	r2,0(r2)
    fc00:	dfc00317 	ldw	ra,12(sp)
    fc04:	dc000217 	ldw	r16,8(sp)
    fc08:	dec00404 	addi	sp,sp,16
    fc0c:	f800283a 	ret
    fc10:	30c00617 	ldw	r3,24(r6)
    fc14:	10c00616 	blt	r2,r3,fc30 <_putc_r+0x74>
    fc18:	30800017 	ldw	r2,0(r6)
    fc1c:	00c00284 	movi	r3,10
    fc20:	11400005 	stb	r5,0(r2)
    fc24:	30800017 	ldw	r2,0(r6)
    fc28:	11400003 	ldbu	r5,0(r2)
    fc2c:	28fff11e 	bne	r5,r3,fbf4 <_putc_r+0x38>
    fc30:	8009883a 	mov	r4,r16
    fc34:	dfc00317 	ldw	ra,12(sp)
    fc38:	dc000217 	ldw	r16,8(sp)
    fc3c:	dec00404 	addi	sp,sp,16
    fc40:	00099741 	jmpi	9974 <__swbuf_r>
    fc44:	d9400015 	stw	r5,0(sp)
    fc48:	d9800115 	stw	r6,4(sp)
    fc4c:	000494c0 	call	494c <__sinit>
    fc50:	d9800117 	ldw	r6,4(sp)
    fc54:	d9400017 	ldw	r5,0(sp)
    fc58:	003fdf06 	br	fbd8 <_putc_r+0x1c>

0000fc5c <putc>:
    fc5c:	00800074 	movhi	r2,1
    fc60:	defffc04 	addi	sp,sp,-16
    fc64:	10877d04 	addi	r2,r2,7668
    fc68:	dc000115 	stw	r16,4(sp)
    fc6c:	14000017 	ldw	r16,0(r2)
    fc70:	dc400215 	stw	r17,8(sp)
    fc74:	dfc00315 	stw	ra,12(sp)
    fc78:	2023883a 	mov	r17,r4
    fc7c:	80000226 	beq	r16,zero,fc88 <putc+0x2c>
    fc80:	80800e17 	ldw	r2,56(r16)
    fc84:	10001a26 	beq	r2,zero,fcf0 <putc+0x94>
    fc88:	28800217 	ldw	r2,8(r5)
    fc8c:	10bfffc4 	addi	r2,r2,-1
    fc90:	28800215 	stw	r2,8(r5)
    fc94:	10000b16 	blt	r2,zero,fcc4 <putc+0x68>
    fc98:	28800017 	ldw	r2,0(r5)
    fc9c:	14400005 	stb	r17,0(r2)
    fca0:	28800017 	ldw	r2,0(r5)
    fca4:	10c00044 	addi	r3,r2,1
    fca8:	28c00015 	stw	r3,0(r5)
    fcac:	10800003 	ldbu	r2,0(r2)
    fcb0:	dfc00317 	ldw	ra,12(sp)
    fcb4:	dc400217 	ldw	r17,8(sp)
    fcb8:	dc000117 	ldw	r16,4(sp)
    fcbc:	dec00404 	addi	sp,sp,16
    fcc0:	f800283a 	ret
    fcc4:	28c00617 	ldw	r3,24(r5)
    fcc8:	10c00e16 	blt	r2,r3,fd04 <putc+0xa8>
    fccc:	28800017 	ldw	r2,0(r5)
    fcd0:	01000284 	movi	r4,10
    fcd4:	14400005 	stb	r17,0(r2)
    fcd8:	28800017 	ldw	r2,0(r5)
    fcdc:	10c00003 	ldbu	r3,0(r2)
    fce0:	193ff01e 	bne	r3,r4,fca4 <putc+0x48>
    fce4:	280d883a 	mov	r6,r5
    fce8:	180b883a 	mov	r5,r3
    fcec:	00000706 	br	fd0c <putc+0xb0>
    fcf0:	8009883a 	mov	r4,r16
    fcf4:	d9400015 	stw	r5,0(sp)
    fcf8:	000494c0 	call	494c <__sinit>
    fcfc:	d9400017 	ldw	r5,0(sp)
    fd00:	003fe106 	br	fc88 <putc+0x2c>
    fd04:	280d883a 	mov	r6,r5
    fd08:	880b883a 	mov	r5,r17
    fd0c:	8009883a 	mov	r4,r16
    fd10:	dfc00317 	ldw	ra,12(sp)
    fd14:	dc400217 	ldw	r17,8(sp)
    fd18:	dc000117 	ldw	r16,4(sp)
    fd1c:	dec00404 	addi	sp,sp,16
    fd20:	00099741 	jmpi	9974 <__swbuf_r>

0000fd24 <__register_exitproc>:
    fd24:	defffa04 	addi	sp,sp,-24
    fd28:	dc000315 	stw	r16,12(sp)
    fd2c:	04000074 	movhi	r16,1
    fd30:	84077c04 	addi	r16,r16,7664
    fd34:	80c00017 	ldw	r3,0(r16)
    fd38:	dc400415 	stw	r17,16(sp)
    fd3c:	dfc00515 	stw	ra,20(sp)
    fd40:	18805217 	ldw	r2,328(r3)
    fd44:	2023883a 	mov	r17,r4
    fd48:	10003726 	beq	r2,zero,fe28 <__register_exitproc+0x104>
    fd4c:	10c00117 	ldw	r3,4(r2)
    fd50:	010007c4 	movi	r4,31
    fd54:	20c00e16 	blt	r4,r3,fd90 <__register_exitproc+0x6c>
    fd58:	1a000044 	addi	r8,r3,1
    fd5c:	8800221e 	bne	r17,zero,fde8 <__register_exitproc+0xc4>
    fd60:	18c00084 	addi	r3,r3,2
    fd64:	18c7883a 	add	r3,r3,r3
    fd68:	18c7883a 	add	r3,r3,r3
    fd6c:	12000115 	stw	r8,4(r2)
    fd70:	10c7883a 	add	r3,r2,r3
    fd74:	19400015 	stw	r5,0(r3)
    fd78:	0005883a 	mov	r2,zero
    fd7c:	dfc00517 	ldw	ra,20(sp)
    fd80:	dc400417 	ldw	r17,16(sp)
    fd84:	dc000317 	ldw	r16,12(sp)
    fd88:	dec00604 	addi	sp,sp,24
    fd8c:	f800283a 	ret
    fd90:	00800034 	movhi	r2,0
    fd94:	10800004 	addi	r2,r2,0
    fd98:	10002626 	beq	r2,zero,fe34 <__register_exitproc+0x110>
    fd9c:	01006404 	movi	r4,400
    fda0:	d9400015 	stw	r5,0(sp)
    fda4:	d9800115 	stw	r6,4(sp)
    fda8:	d9c00215 	stw	r7,8(sp)
    fdac:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    fdb0:	d9400017 	ldw	r5,0(sp)
    fdb4:	d9800117 	ldw	r6,4(sp)
    fdb8:	d9c00217 	ldw	r7,8(sp)
    fdbc:	10001d26 	beq	r2,zero,fe34 <__register_exitproc+0x110>
    fdc0:	81000017 	ldw	r4,0(r16)
    fdc4:	10000115 	stw	zero,4(r2)
    fdc8:	02000044 	movi	r8,1
    fdcc:	22405217 	ldw	r9,328(r4)
    fdd0:	0007883a 	mov	r3,zero
    fdd4:	12400015 	stw	r9,0(r2)
    fdd8:	20805215 	stw	r2,328(r4)
    fddc:	10006215 	stw	zero,392(r2)
    fde0:	10006315 	stw	zero,396(r2)
    fde4:	883fde26 	beq	r17,zero,fd60 <__register_exitproc+0x3c>
    fde8:	18c9883a 	add	r4,r3,r3
    fdec:	2109883a 	add	r4,r4,r4
    fdf0:	1109883a 	add	r4,r2,r4
    fdf4:	21802215 	stw	r6,136(r4)
    fdf8:	01800044 	movi	r6,1
    fdfc:	12406217 	ldw	r9,392(r2)
    fe00:	30cc983a 	sll	r6,r6,r3
    fe04:	4992b03a 	or	r9,r9,r6
    fe08:	12406215 	stw	r9,392(r2)
    fe0c:	21c04215 	stw	r7,264(r4)
    fe10:	01000084 	movi	r4,2
    fe14:	893fd21e 	bne	r17,r4,fd60 <__register_exitproc+0x3c>
    fe18:	11006317 	ldw	r4,396(r2)
    fe1c:	218cb03a 	or	r6,r4,r6
    fe20:	11806315 	stw	r6,396(r2)
    fe24:	003fce06 	br	fd60 <__register_exitproc+0x3c>
    fe28:	18805304 	addi	r2,r3,332
    fe2c:	18805215 	stw	r2,328(r3)
    fe30:	003fc606 	br	fd4c <__register_exitproc+0x28>
    fe34:	00bfffc4 	movi	r2,-1
    fe38:	003fd006 	br	fd7c <__register_exitproc+0x58>

0000fe3c <__call_exitprocs>:
    fe3c:	defff504 	addi	sp,sp,-44
    fe40:	df000915 	stw	fp,36(sp)
    fe44:	dd400615 	stw	r21,24(sp)
    fe48:	dc800315 	stw	r18,12(sp)
    fe4c:	dfc00a15 	stw	ra,40(sp)
    fe50:	ddc00815 	stw	r23,32(sp)
    fe54:	dd800715 	stw	r22,28(sp)
    fe58:	dd000515 	stw	r20,20(sp)
    fe5c:	dcc00415 	stw	r19,16(sp)
    fe60:	dc400215 	stw	r17,8(sp)
    fe64:	dc000115 	stw	r16,4(sp)
    fe68:	d9000015 	stw	r4,0(sp)
    fe6c:	2839883a 	mov	fp,r5
    fe70:	04800044 	movi	r18,1
    fe74:	057fffc4 	movi	r21,-1
    fe78:	00800074 	movhi	r2,1
    fe7c:	10877c04 	addi	r2,r2,7664
    fe80:	12000017 	ldw	r8,0(r2)
    fe84:	45005217 	ldw	r20,328(r8)
    fe88:	44c05204 	addi	r19,r8,328
    fe8c:	a0001c26 	beq	r20,zero,ff00 <__call_exitprocs+0xc4>
    fe90:	a0800117 	ldw	r2,4(r20)
    fe94:	15ffffc4 	addi	r23,r2,-1
    fe98:	b8000d16 	blt	r23,zero,fed0 <__call_exitprocs+0x94>
    fe9c:	14000044 	addi	r16,r2,1
    fea0:	8421883a 	add	r16,r16,r16
    fea4:	8421883a 	add	r16,r16,r16
    fea8:	84402004 	addi	r17,r16,128
    feac:	a463883a 	add	r17,r20,r17
    feb0:	a421883a 	add	r16,r20,r16
    feb4:	e0001e26 	beq	fp,zero,ff30 <__call_exitprocs+0xf4>
    feb8:	80804017 	ldw	r2,256(r16)
    febc:	e0801c26 	beq	fp,r2,ff30 <__call_exitprocs+0xf4>
    fec0:	bdffffc4 	addi	r23,r23,-1
    fec4:	843fff04 	addi	r16,r16,-4
    fec8:	8c7fff04 	addi	r17,r17,-4
    fecc:	bd7ff91e 	bne	r23,r21,feb4 <__call_exitprocs+0x78>
    fed0:	00800034 	movhi	r2,0
    fed4:	10800004 	addi	r2,r2,0
    fed8:	10000926 	beq	r2,zero,ff00 <__call_exitprocs+0xc4>
    fedc:	a0800117 	ldw	r2,4(r20)
    fee0:	1000301e 	bne	r2,zero,ffa4 <__call_exitprocs+0x168>
    fee4:	a0800017 	ldw	r2,0(r20)
    fee8:	10003226 	beq	r2,zero,ffb4 <__call_exitprocs+0x178>
    feec:	a009883a 	mov	r4,r20
    fef0:	98800015 	stw	r2,0(r19)
    fef4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    fef8:	9d000017 	ldw	r20,0(r19)
    fefc:	a03fe41e 	bne	r20,zero,fe90 <__call_exitprocs+0x54>
    ff00:	dfc00a17 	ldw	ra,40(sp)
    ff04:	df000917 	ldw	fp,36(sp)
    ff08:	ddc00817 	ldw	r23,32(sp)
    ff0c:	dd800717 	ldw	r22,28(sp)
    ff10:	dd400617 	ldw	r21,24(sp)
    ff14:	dd000517 	ldw	r20,20(sp)
    ff18:	dcc00417 	ldw	r19,16(sp)
    ff1c:	dc800317 	ldw	r18,12(sp)
    ff20:	dc400217 	ldw	r17,8(sp)
    ff24:	dc000117 	ldw	r16,4(sp)
    ff28:	dec00b04 	addi	sp,sp,44
    ff2c:	f800283a 	ret
    ff30:	a0800117 	ldw	r2,4(r20)
    ff34:	80c00017 	ldw	r3,0(r16)
    ff38:	10bfffc4 	addi	r2,r2,-1
    ff3c:	15c01426 	beq	r2,r23,ff90 <__call_exitprocs+0x154>
    ff40:	80000015 	stw	zero,0(r16)
    ff44:	183fde26 	beq	r3,zero,fec0 <__call_exitprocs+0x84>
    ff48:	95c8983a 	sll	r4,r18,r23
    ff4c:	a0806217 	ldw	r2,392(r20)
    ff50:	a5800117 	ldw	r22,4(r20)
    ff54:	2084703a 	and	r2,r4,r2
    ff58:	10000b26 	beq	r2,zero,ff88 <__call_exitprocs+0x14c>
    ff5c:	a0806317 	ldw	r2,396(r20)
    ff60:	2088703a 	and	r4,r4,r2
    ff64:	20000c1e 	bne	r4,zero,ff98 <__call_exitprocs+0x15c>
    ff68:	89400017 	ldw	r5,0(r17)
    ff6c:	d9000017 	ldw	r4,0(sp)
    ff70:	183ee83a 	callr	r3
    ff74:	a0800117 	ldw	r2,4(r20)
    ff78:	15bfbf1e 	bne	r2,r22,fe78 <__call_exitprocs+0x3c>
    ff7c:	98800017 	ldw	r2,0(r19)
    ff80:	153fcf26 	beq	r2,r20,fec0 <__call_exitprocs+0x84>
    ff84:	003fbc06 	br	fe78 <__call_exitprocs+0x3c>
    ff88:	183ee83a 	callr	r3
    ff8c:	003ff906 	br	ff74 <__call_exitprocs+0x138>
    ff90:	a5c00115 	stw	r23,4(r20)
    ff94:	003feb06 	br	ff44 <__call_exitprocs+0x108>
    ff98:	89000017 	ldw	r4,0(r17)
    ff9c:	183ee83a 	callr	r3
    ffa0:	003ff406 	br	ff74 <__call_exitprocs+0x138>
    ffa4:	a0800017 	ldw	r2,0(r20)
    ffa8:	a027883a 	mov	r19,r20
    ffac:	1029883a 	mov	r20,r2
    ffb0:	003fb606 	br	fe8c <__call_exitprocs+0x50>
    ffb4:	0005883a 	mov	r2,zero
    ffb8:	003ffb06 	br	ffa8 <__call_exitprocs+0x16c>

0000ffbc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ffbc:	defffd04 	addi	sp,sp,-12
    ffc0:	df000215 	stw	fp,8(sp)
    ffc4:	df000204 	addi	fp,sp,8
    ffc8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ffcc:	0001883a 	nop
    ffd0:	e0bfff17 	ldw	r2,-4(fp)
    ffd4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    ffd8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ffdc:	10000226 	beq	r2,zero,ffe8 <_exit+0x2c>
    ALT_SIM_FAIL();
    ffe0:	002af070 	cmpltui	zero,zero,43969
    ffe4:	00000106 	br	ffec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    ffe8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ffec:	003fff06 	br	ffec <_exit+0x30>

/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/motor/feedback/20042.PositionPID.uavcan
 */

#ifndef MOTOR_FEEDBACK_POSITIONPID_HPP_INCLUDED
#define MOTOR_FEEDBACK_POSITIONPID_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Stream to tune the position PID
#

float16 position_setpoint
float16 position
******************************************************************************/

/********************* DSDL signature source definition ***********************
motor.feedback.PositionPID
saturated float16 position_setpoint
saturated float16 position
******************************************************************************/

#undef position_setpoint
#undef position

namespace motor
{
namespace feedback
{

template <int _tmpl>
struct UAVCAN_EXPORT PositionPID_
{
    typedef const PositionPID_<_tmpl>& ParameterType;
    typedef PositionPID_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > position_setpoint;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > position;
    };

    enum
    {
        MinBitLen
            = FieldTypes::position_setpoint::MinBitLen
            + FieldTypes::position::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::position_setpoint::MaxBitLen
            + FieldTypes::position::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::position_setpoint >::Type position_setpoint;
    typename ::uavcan::StorageType< typename FieldTypes::position >::Type position;

    PositionPID_()
        : position_setpoint()
        , position()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<32 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20042 };

    static const char* getDataTypeFullName()
    {
        return "motor.feedback.PositionPID";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool PositionPID_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        position_setpoint == rhs.position_setpoint &&
        position == rhs.position;
}

template <int _tmpl>
bool PositionPID_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(position_setpoint, rhs.position_setpoint) &&
        ::uavcan::areClose(position, rhs.position);
}

template <int _tmpl>
int PositionPID_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position_setpoint::encode(self.position_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::position::encode(self.position, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PositionPID_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position_setpoint::decode(self.position_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::position::decode(self.position, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature PositionPID_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x8631BD4F96946B59ULL);

    FieldTypes::position_setpoint::extendDataTypeSignature(signature);
    FieldTypes::position::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef PositionPID_<0> PositionPID;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::motor::feedback::PositionPID > _uavcan_gdtr_registrator_PositionPID;

}

} // Namespace feedback
} // Namespace motor

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::feedback::PositionPID >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::feedback::PositionPID::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::feedback::PositionPID >::stream(Stream& s, ::motor::feedback::PositionPID::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "position_setpoint: ";
    YamlStreamer< ::motor::feedback::PositionPID::FieldTypes::position_setpoint >::stream(s, obj.position_setpoint, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "position: ";
    YamlStreamer< ::motor::feedback::PositionPID::FieldTypes::position >::stream(s, obj.position, level + 1);
}

}

namespace motor
{
namespace feedback
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::feedback::PositionPID::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::feedback::PositionPID >::stream(s, obj, 0);
    return s;
}

} // Namespace feedback
} // Namespace motor

#endif // MOTOR_FEEDBACK_POSITIONPID_HPP_INCLUDED
/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/motor/config/204.TorqueLimit.uavcan
 */

#ifndef MOTOR_CONFIG_TORQUELIMIT_HPP_INCLUDED
#define MOTOR_CONFIG_TORQUELIMIT_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# This torque limit applies to all three control modes.
#

float16 torque_limit        # [Nm] or NaN to disable
---
******************************************************************************/

/********************* DSDL signature source definition ***********************
motor.config.TorqueLimit
saturated float16 torque_limit
---
******************************************************************************/

#undef torque_limit

namespace motor
{
namespace config
{

struct UAVCAN_EXPORT TorqueLimit_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > torque_limit;
        };

        enum
        {
            MinBitLen
                = FieldTypes::torque_limit::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::torque_limit::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::torque_limit >::Type torque_limit;

        Request_()
            : torque_limit()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<16 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
        };

        enum
        {
            MinBitLen
        };

        enum
        {
            MaxBitLen
        };

        // Constants

        // Fields

        Response_()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<0 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 204 };

    static const char* getDataTypeFullName()
    {
        return "motor.config.TorqueLimit";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    TorqueLimit_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool TorqueLimit_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        torque_limit == rhs.torque_limit;
}

template <int _tmpl>
bool TorqueLimit_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(torque_limit, rhs.torque_limit);
}

template <int _tmpl>
int TorqueLimit_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::torque_limit::encode(self.torque_limit, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int TorqueLimit_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::torque_limit::decode(self.torque_limit, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool TorqueLimit_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
bool TorqueLimit_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
int TorqueLimit_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

template <int _tmpl>
int TorqueLimit_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature TorqueLimit_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xD512F9081FF7622AULL);

    Request::FieldTypes::torque_limit::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef TorqueLimit_ TorqueLimit;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::motor::config::TorqueLimit > _uavcan_gdtr_registrator_TorqueLimit;

}

} // Namespace config
} // Namespace motor

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::TorqueLimit::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::TorqueLimit::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::TorqueLimit::Request >::stream(Stream& s, ::motor::config::TorqueLimit::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "torque_limit: ";
    YamlStreamer< ::motor::config::TorqueLimit::Request::FieldTypes::torque_limit >::stream(s, obj.torque_limit, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::TorqueLimit::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::TorqueLimit::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::TorqueLimit::Response >::stream(Stream& s, ::motor::config::TorqueLimit::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
}

}

namespace motor
{
namespace config
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::TorqueLimit::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::TorqueLimit::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::TorqueLimit::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::TorqueLimit::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace config
} // Namespace motor

#endif // MOTOR_CONFIG_TORQUELIMIT_HPP_INCLUDED
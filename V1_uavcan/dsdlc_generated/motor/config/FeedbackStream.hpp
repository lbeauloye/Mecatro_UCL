/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/motor/config/211.FeedbackStream.uavcan
 */

#ifndef MOTOR_CONFIG_FEEDBACKSTREAM_HPP_INCLUDED
#define MOTOR_CONFIG_FEEDBACKSTREAM_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Feedback Stream setup
#

uint8 stream
uint8 enabled
float16 frequency

uint8 STREAM_CURRENT_PID    = 1
uint8 STREAM_VELOCITY_PID   = 2
uint8 STREAM_POSITION_PID   = 3
uint8 STREAM_INDEX          = 4
uint8 STREAM_MOTOR_ENCODER  = 5
uint8 STREAM_MOTOR_POSITION = 6
uint8 STREAM_MOTOR_TORQUE   = 7
---
******************************************************************************/

/********************* DSDL signature source definition ***********************
motor.config.FeedbackStream
saturated uint8 stream
saturated uint8 enabled
saturated float16 frequency
---
******************************************************************************/

#undef stream
#undef enabled
#undef frequency
#undef STREAM_CURRENT_PID
#undef STREAM_VELOCITY_PID
#undef STREAM_POSITION_PID
#undef STREAM_INDEX
#undef STREAM_MOTOR_ENCODER
#undef STREAM_MOTOR_POSITION
#undef STREAM_MOTOR_TORQUE

namespace motor
{
namespace config
{

struct UAVCAN_EXPORT FeedbackStream_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_CURRENT_PID;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_VELOCITY_PID;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_POSITION_PID;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_INDEX;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_MOTOR_ENCODER;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_MOTOR_POSITION;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STREAM_MOTOR_TORQUE;
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > stream;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > enabled;
            typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > frequency;
        };

        enum
        {
            MinBitLen
                = FieldTypes::stream::MinBitLen
                + FieldTypes::enabled::MinBitLen
                + FieldTypes::frequency::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::stream::MaxBitLen
                + FieldTypes::enabled::MaxBitLen
                + FieldTypes::frequency::MaxBitLen
        };

        // Constants
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_CURRENT_PID >::Type STREAM_CURRENT_PID; // 1
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_VELOCITY_PID >::Type STREAM_VELOCITY_PID; // 2
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_POSITION_PID >::Type STREAM_POSITION_PID; // 3
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_INDEX >::Type STREAM_INDEX; // 4
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_MOTOR_ENCODER >::Type STREAM_MOTOR_ENCODER; // 5
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_MOTOR_POSITION >::Type STREAM_MOTOR_POSITION; // 6
        static const typename ::uavcan::StorageType< typename ConstantTypes::STREAM_MOTOR_TORQUE >::Type STREAM_MOTOR_TORQUE; // 7

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::stream >::Type stream;
        typename ::uavcan::StorageType< typename FieldTypes::enabled >::Type enabled;
        typename ::uavcan::StorageType< typename FieldTypes::frequency >::Type frequency;

        Request_()
            : stream()
            , enabled()
            , frequency()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<32 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
        };

        enum
        {
            MinBitLen
        };

        enum
        {
            MaxBitLen
        };

        // Constants

        // Fields

        Response_()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<0 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 211 };

    static const char* getDataTypeFullName()
    {
        return "motor.config.FeedbackStream";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    FeedbackStream_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool FeedbackStream_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        stream == rhs.stream &&
        enabled == rhs.enabled &&
        frequency == rhs.frequency;
}

template <int _tmpl>
bool FeedbackStream_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(stream, rhs.stream) &&
        ::uavcan::areClose(enabled, rhs.enabled) &&
        ::uavcan::areClose(frequency, rhs.frequency);
}

template <int _tmpl>
int FeedbackStream_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::stream::encode(self.stream, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::enabled::encode(self.enabled, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::frequency::encode(self.frequency, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int FeedbackStream_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::stream::decode(self.stream, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::enabled::decode(self.enabled, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::frequency::decode(self.frequency, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool FeedbackStream_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
bool FeedbackStream_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
int FeedbackStream_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

template <int _tmpl>
int FeedbackStream_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature FeedbackStream_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x3FD905EDA8178197ULL);

    Request::FieldTypes::stream::extendDataTypeSignature(signature);
    Request::FieldTypes::enabled::extendDataTypeSignature(signature);
    Request::FieldTypes::frequency::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_CURRENT_PID >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_CURRENT_PID = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_VELOCITY_PID >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_VELOCITY_PID = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_POSITION_PID >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_POSITION_PID = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_INDEX >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_INDEX = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_MOTOR_ENCODER >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_MOTOR_ENCODER = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_MOTOR_POSITION >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_MOTOR_POSITION = 6U; // 6

template <int _tmpl>
const typename ::uavcan::StorageType< typename FeedbackStream_::Request_<_tmpl>::ConstantTypes::STREAM_MOTOR_TORQUE >::Type
    FeedbackStream_::Request_<_tmpl>::STREAM_MOTOR_TORQUE = 7U; // 7

/*
 * Final typedef
 */
typedef FeedbackStream_ FeedbackStream;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::motor::config::FeedbackStream > _uavcan_gdtr_registrator_FeedbackStream;

}

} // Namespace config
} // Namespace motor

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::FeedbackStream::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::FeedbackStream::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::FeedbackStream::Request >::stream(Stream& s, ::motor::config::FeedbackStream::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "stream: ";
    YamlStreamer< ::motor::config::FeedbackStream::Request::FieldTypes::stream >::stream(s, obj.stream, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "enabled: ";
    YamlStreamer< ::motor::config::FeedbackStream::Request::FieldTypes::enabled >::stream(s, obj.enabled, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "frequency: ";
    YamlStreamer< ::motor::config::FeedbackStream::Request::FieldTypes::frequency >::stream(s, obj.frequency, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::FeedbackStream::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::FeedbackStream::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::FeedbackStream::Response >::stream(Stream& s, ::motor::config::FeedbackStream::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
}

}

namespace motor
{
namespace config
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::FeedbackStream::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::FeedbackStream::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::FeedbackStream::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::FeedbackStream::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace config
} // Namespace motor

#endif // MOTOR_CONFIG_FEEDBACKSTREAM_HPP_INCLUDED
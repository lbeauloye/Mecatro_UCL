/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/motor/config/PID.uavcan
 */

#ifndef MOTOR_CONFIG_PID_HPP_INCLUDED
#define MOTOR_CONFIG_PID_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
float16 kp
float16 ki
float16 kd
float16 ilimit
******************************************************************************/

/********************* DSDL signature source definition ***********************
motor.config.PID
saturated float16 kp
saturated float16 ki
saturated float16 kd
saturated float16 ilimit
******************************************************************************/

#undef kp
#undef ki
#undef kd
#undef ilimit

namespace motor
{
namespace config
{

template <int _tmpl>
struct UAVCAN_EXPORT PID_
{
    typedef const PID_<_tmpl>& ParameterType;
    typedef PID_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > kp;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > ki;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > kd;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > ilimit;
    };

    enum
    {
        MinBitLen
            = FieldTypes::kp::MinBitLen
            + FieldTypes::ki::MinBitLen
            + FieldTypes::kd::MinBitLen
            + FieldTypes::ilimit::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::kp::MaxBitLen
            + FieldTypes::ki::MaxBitLen
            + FieldTypes::kd::MaxBitLen
            + FieldTypes::ilimit::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::kp >::Type kp;
    typename ::uavcan::StorageType< typename FieldTypes::ki >::Type ki;
    typename ::uavcan::StorageType< typename FieldTypes::kd >::Type kd;
    typename ::uavcan::StorageType< typename FieldTypes::ilimit >::Type ilimit;

    PID_()
        : kp()
        , ki()
        , kd()
        , ilimit()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "motor.config.PID";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool PID_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        kp == rhs.kp &&
        ki == rhs.ki &&
        kd == rhs.kd &&
        ilimit == rhs.ilimit;
}

template <int _tmpl>
bool PID_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(kp, rhs.kp) &&
        ::uavcan::areClose(ki, rhs.ki) &&
        ::uavcan::areClose(kd, rhs.kd) &&
        ::uavcan::areClose(ilimit, rhs.ilimit);
}

template <int _tmpl>
int PID_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::kp::encode(self.kp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ki::encode(self.ki, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::kd::encode(self.kd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ilimit::encode(self.ilimit, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PID_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::kp::decode(self.kp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ki::decode(self.ki, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::kd::decode(self.kd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ilimit::decode(self.ilimit, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature PID_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xE8D950DA928858FCULL);

    FieldTypes::kp::extendDataTypeSignature(signature);
    FieldTypes::ki::extendDataTypeSignature(signature);
    FieldTypes::kd::extendDataTypeSignature(signature);
    FieldTypes::ilimit::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef PID_<0> PID;

// No default registration

} // Namespace config
} // Namespace motor

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::PID >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::PID::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::PID >::stream(Stream& s, ::motor::config::PID::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "kp: ";
    YamlStreamer< ::motor::config::PID::FieldTypes::kp >::stream(s, obj.kp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ki: ";
    YamlStreamer< ::motor::config::PID::FieldTypes::ki >::stream(s, obj.ki, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "kd: ";
    YamlStreamer< ::motor::config::PID::FieldTypes::kd >::stream(s, obj.kd, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ilimit: ";
    YamlStreamer< ::motor::config::PID::FieldTypes::ilimit >::stream(s, obj.ilimit, level + 1);
}

}

namespace motor
{
namespace config
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::PID::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::PID >::stream(s, obj, 0);
    return s;
}

} // Namespace config
} // Namespace motor

#endif // MOTOR_CONFIG_PID_HPP_INCLUDED
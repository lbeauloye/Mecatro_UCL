/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/motor/config/209.PeriodicDataConfig.uavcan
 */

#ifndef MOTOR_CONFIG_PERIODICDATACONFIG_HPP_INCLUDED
#define MOTOR_CONFIG_PERIODICDATACONFIG_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# This command is used to enable / disable periodic data transmission and set
# its transmission rate.
#

int8 message_type
float16 transmission_rate       # [Hz]
---
******************************************************************************/

/********************* DSDL signature source definition ***********************
motor.config.PeriodicDataConfig
saturated int8 message_type
saturated float16 transmission_rate
---
******************************************************************************/

#undef message_type
#undef transmission_rate

namespace motor
{
namespace config
{

struct UAVCAN_EXPORT PeriodicDataConfig_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > message_type;
            typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > transmission_rate;
        };

        enum
        {
            MinBitLen
                = FieldTypes::message_type::MinBitLen
                + FieldTypes::transmission_rate::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::message_type::MaxBitLen
                + FieldTypes::transmission_rate::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::message_type >::Type message_type;
        typename ::uavcan::StorageType< typename FieldTypes::transmission_rate >::Type transmission_rate;

        Request_()
            : message_type()
            , transmission_rate()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<24 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
        };

        enum
        {
            MinBitLen
        };

        enum
        {
            MaxBitLen
        };

        // Constants

        // Fields

        Response_()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<0 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 209 };

    static const char* getDataTypeFullName()
    {
        return "motor.config.PeriodicDataConfig";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    PeriodicDataConfig_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool PeriodicDataConfig_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        message_type == rhs.message_type &&
        transmission_rate == rhs.transmission_rate;
}

template <int _tmpl>
bool PeriodicDataConfig_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(message_type, rhs.message_type) &&
        ::uavcan::areClose(transmission_rate, rhs.transmission_rate);
}

template <int _tmpl>
int PeriodicDataConfig_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::message_type::encode(self.message_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::transmission_rate::encode(self.transmission_rate, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PeriodicDataConfig_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::message_type::decode(self.message_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::transmission_rate::decode(self.transmission_rate, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool PeriodicDataConfig_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
bool PeriodicDataConfig_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    (void)rhs;
    return true;
}

template <int _tmpl>
int PeriodicDataConfig_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

template <int _tmpl>
int PeriodicDataConfig_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature PeriodicDataConfig_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x7532809C84105B07ULL);

    Request::FieldTypes::message_type::extendDataTypeSignature(signature);
    Request::FieldTypes::transmission_rate::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef PeriodicDataConfig_ PeriodicDataConfig;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::motor::config::PeriodicDataConfig > _uavcan_gdtr_registrator_PeriodicDataConfig;

}

} // Namespace config
} // Namespace motor

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::PeriodicDataConfig::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::PeriodicDataConfig::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::PeriodicDataConfig::Request >::stream(Stream& s, ::motor::config::PeriodicDataConfig::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "message_type: ";
    YamlStreamer< ::motor::config::PeriodicDataConfig::Request::FieldTypes::message_type >::stream(s, obj.message_type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "transmission_rate: ";
    YamlStreamer< ::motor::config::PeriodicDataConfig::Request::FieldTypes::transmission_rate >::stream(s, obj.transmission_rate, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::motor::config::PeriodicDataConfig::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::motor::config::PeriodicDataConfig::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::motor::config::PeriodicDataConfig::Response >::stream(Stream& s, ::motor::config::PeriodicDataConfig::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
}

}

namespace motor
{
namespace config
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::PeriodicDataConfig::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::PeriodicDataConfig::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::motor::config::PeriodicDataConfig::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::motor::config::PeriodicDataConfig::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace config
} // Namespace motor

#endif // MOTOR_CONFIG_PERIODICDATACONFIG_HPP_INCLUDED
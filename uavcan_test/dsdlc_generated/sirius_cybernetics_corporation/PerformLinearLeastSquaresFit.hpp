/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/jyl/Documents/GitHub/MotorBoard/uavcan_test/sirius_cybernetics_corporation/PerformLinearLeastSquaresFit.uavcan
 */

#ifndef SIRIUS_CYBERNETICS_CORPORATION_PERFORMLINEARLEASTSQUARESFIT_HPP_INCLUDED
#define SIRIUS_CYBERNETICS_CORPORATION_PERFORMLINEARLEASTSQUARESFIT_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <sirius_cybernetics_corporation/PointXY.hpp>

/******************************* Source text **********************************
#
# This service accepts a dynamic array of 2D coordinates and returns
# the coefficients for the best-fit linear function.
#
# This service doesn't have a default Data Type ID.
#

PointXY[<64] points

---

float64 slope
float64 y_intercept
******************************************************************************/

/********************* DSDL signature source definition ***********************
sirius_cybernetics_corporation.PerformLinearLeastSquaresFit
sirius_cybernetics_corporation.PointXY[<=63] points
---
saturated float64 slope
saturated float64 y_intercept
******************************************************************************/

#undef points
#undef slope
#undef y_intercept

namespace sirius_cybernetics_corporation
{

struct UAVCAN_EXPORT PerformLinearLeastSquaresFit_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::Array< ::sirius_cybernetics_corporation::PointXY, ::uavcan::ArrayModeDynamic, 63 > points;
        };

        enum
        {
            MinBitLen
                = FieldTypes::points::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::points::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::points >::Type points;

        Request_()
            : points()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<2022 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > slope;
            typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > y_intercept;
        };

        enum
        {
            MinBitLen
                = FieldTypes::slope::MinBitLen
                + FieldTypes::y_intercept::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::slope::MaxBitLen
                + FieldTypes::y_intercept::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::slope >::Type slope;
        typename ::uavcan::StorageType< typename FieldTypes::y_intercept >::Type y_intercept;

        Response_()
            : slope()
            , y_intercept()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<128 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "sirius_cybernetics_corporation.PerformLinearLeastSquaresFit";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    PerformLinearLeastSquaresFit_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool PerformLinearLeastSquaresFit_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        points == rhs.points;
}

template <int _tmpl>
bool PerformLinearLeastSquaresFit_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(points, rhs.points);
}

template <int _tmpl>
int PerformLinearLeastSquaresFit_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::points::encode(self.points, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PerformLinearLeastSquaresFit_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::points::decode(self.points, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool PerformLinearLeastSquaresFit_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        slope == rhs.slope &&
        y_intercept == rhs.y_intercept;
}

template <int _tmpl>
bool PerformLinearLeastSquaresFit_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(slope, rhs.slope) &&
        ::uavcan::areClose(y_intercept, rhs.y_intercept);
}

template <int _tmpl>
int PerformLinearLeastSquaresFit_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::slope::encode(self.slope, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y_intercept::encode(self.y_intercept, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PerformLinearLeastSquaresFit_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::slope::decode(self.slope, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y_intercept::decode(self.y_intercept, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature PerformLinearLeastSquaresFit_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x90AC3E0B3FE27030ULL);

    Request::FieldTypes::points::extendDataTypeSignature(signature);

    Response::FieldTypes::slope::extendDataTypeSignature(signature);
    Response::FieldTypes::y_intercept::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef PerformLinearLeastSquaresFit_ PerformLinearLeastSquaresFit;

// No default registration

} // Namespace sirius_cybernetics_corporation

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request >::stream(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "points: ";
    YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request::FieldTypes::points >::stream(s, obj.points, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response >::stream(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "slope: ";
    YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response::FieldTypes::slope >::stream(s, obj.slope, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "y_intercept: ";
    YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response::FieldTypes::y_intercept >::stream(s, obj.y_intercept, level + 1);
}

}

namespace sirius_cybernetics_corporation
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::sirius_cybernetics_corporation::PerformLinearLeastSquaresFit::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace sirius_cybernetics_corporation

#endif // SIRIUS_CYBERNETICS_CORPORATION_PERFORMLINEARLEASTSQUARESFIT_HPP_INCLUDED
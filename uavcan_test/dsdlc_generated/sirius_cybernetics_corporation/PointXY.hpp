/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/westornd/Documents/UCL/Q7/ELME2002/CVRA/C/sirius_cybernetics_corporation/PointXY.uavcan
 */

#ifndef SIRIUS_CYBERNETICS_CORPORATION_POINTXY_HPP_INCLUDED
#define SIRIUS_CYBERNETICS_CORPORATION_POINTXY_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# This nested type contains 2D point coordinates.
#

float16 x
float16 y
******************************************************************************/

/********************* DSDL signature source definition ***********************
sirius_cybernetics_corporation.PointXY
saturated float16 x
saturated float16 y
******************************************************************************/

#undef x
#undef y

namespace sirius_cybernetics_corporation
{

template <int _tmpl>
struct UAVCAN_EXPORT PointXY_
{
    typedef const PointXY_<_tmpl>& ParameterType;
    typedef PointXY_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > x;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > y;
    };

    enum
    {
        MinBitLen
            = FieldTypes::x::MinBitLen
            + FieldTypes::y::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::x::MaxBitLen
            + FieldTypes::y::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::x >::Type x;
    typename ::uavcan::StorageType< typename FieldTypes::y >::Type y;

    PointXY_()
        : x()
        , y()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<32 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "sirius_cybernetics_corporation.PointXY";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool PointXY_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        x == rhs.x &&
        y == rhs.y;
}

template <int _tmpl>
bool PointXY_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(x, rhs.x) &&
        ::uavcan::areClose(y, rhs.y);
}

template <int _tmpl>
int PointXY_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::x::encode(self.x, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y::encode(self.y, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int PointXY_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::x::decode(self.x, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y::decode(self.y, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature PointXY_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x58A2E8CBA1A69A73ULL);

    FieldTypes::x::extendDataTypeSignature(signature);
    FieldTypes::y::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef PointXY_<0> PointXY;

// No default registration

} // Namespace sirius_cybernetics_corporation

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::sirius_cybernetics_corporation::PointXY >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::sirius_cybernetics_corporation::PointXY::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::sirius_cybernetics_corporation::PointXY >::stream(Stream& s, ::sirius_cybernetics_corporation::PointXY::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "x: ";
    YamlStreamer< ::sirius_cybernetics_corporation::PointXY::FieldTypes::x >::stream(s, obj.x, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "y: ";
    YamlStreamer< ::sirius_cybernetics_corporation::PointXY::FieldTypes::y >::stream(s, obj.y, level + 1);
}

}

namespace sirius_cybernetics_corporation
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::sirius_cybernetics_corporation::PointXY::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::sirius_cybernetics_corporation::PointXY >::stream(s, obj, 0);
    return s;
}

} // Namespace sirius_cybernetics_corporation

#endif // SIRIUS_CYBERNETICS_CORPORATION_POINTXY_HPP_INCLUDED